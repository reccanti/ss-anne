{"version":3,"sources":["AllTheFuckingState.tsx","utils/PromiseAllChunk.ts","utils/CoolCache.ts","utils/pokeGetter.ts","PokeGetterContext.tsx","utils/BetterSelect.tsx","Board.tsx","LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","users","player","opponent","board","name","columns","game","id","pokedex","generation","pokemon","reducer","state","action","type","payload","initialContext","dispatch","AllTheFuckingStateCtx","createContext","AllTheFuckingStateProvider","children","useReducer","value","Provider","PromiseAllSettledChunk","ps","a","chunkSize","pchunks","cur","length","chunk","slice","push","allRes","Promise","allSettled","res","concat","CoolCache","key","handler","this","lookupVal","mkKey","localVal","localStorage","getItem","parsed","JSON","parse","setItem","stringify","makePokemonGenLookup","memo","PokeAPI","Generaition","listAll","gens","fetchGens","results","map","gen","get","all","genInfo","lookup","Map","forEach","pokemon_species","poke","set","isPromise","PokemonCache","PokemonSpecies","resolve","species","defaultForm","varieties","find","variety","is_default","Pokemon","nationalDexNumber","artworkUrl","sprites","front_default","names","reduce","acc","language","GameCache","title","Version","VerionGroup","version_group","group","pokedexes","dex","getAllGenerations","lang","genList","genRequests","genInfoDump","genName","getPokemonByGeneration","generationId","currentGen","genPromises","pokePromises","p","filter","r","status","getAllGames","gameResources","gamePromises","cachedGames","filtered","cache","PokeGetter","initialGetter","PokeGetterContext","PokeGetterProvider","props","useState","getter","setGetter","useEffect","BetterSelect","stuffLookup","data","d","getValue","FormControl","fullWidth","InputLabel","htmlFor","label","Select","onChange","event","target","trueValue","MenuItem","getDisplayValue","getKeyValue","useCellStyles","makeStyles","root","display","background","variant","teal","red","blueGrey","image","Cell","onClick","styles","className","useBoardStyles","gridTemplateColumns","listStyle","padding","Board","items","renderCell","item","useBoardContainerStyles","width","height","overflow","BoardContainer","Box","useCreateStyles","margin","marginTop","CreateUser","useContext","setState","Container","fixed","maxWidth","Paper","onSubmit","preventDefault","TextField","Button","BoardSetup","games","setGames","fetch","pokes","Grid","container","xs","component","Input","Number","src","alt","LandingPage","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e6bf77e6.chunk.js","sourcesContent":["/**\n * @TODO - Here it is, all the fucking state! I can't think\n * of a better way to structure this right now, so I\n * won't. In time, it will probably be better to start\n * breaking this out into separate state managers, for\n * organization as much as performance\n *\n * ~reccanti 6/19/2021\n */\nimport { createContext, ReactNode, useReducer } from \"react\";\nimport { Pokemon, PokeGeneration, Game } from \"./utils/pokeGetter\";\n\n// various types for interacting with state\n\ninterface User {\n  name: string;\n}\n\ninterface BoardConfig {\n  name: string;\n  columns: number;\n  generation: PokeGeneration;\n  game: Game;\n  pokemon: Pokemon[];\n}\n\n// compose all our types into a state blob. Create the reducer\n// and action for managing this\n\ninterface FuckingState {\n  users: {\n    player: User | null;\n    opponent: User | null;\n  };\n  board: BoardConfig;\n}\n\nconst initialState: FuckingState = {\n  users: {\n    player: null,\n    opponent: null,\n  },\n  board: {\n    name: \"\",\n    columns: 15,\n    game: {\n      id: 1,\n      name: \"Red\",\n      pokedex: [],\n    },\n    generation: {\n      id: 1,\n      name: \"Generation I\",\n    },\n    pokemon: [],\n  },\n};\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetPlayer extends BaseAction {\n  type: \"setPlayer\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardName extends BaseAction {\n  type: \"setBoardName\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardColumns extends BaseAction {\n  type: \"setBoardColumns\";\n  payload: {\n    columns: number;\n  };\n}\n\ninterface SetBoardGeneration extends BaseAction {\n  type: \"setBoardGeneration\";\n  payload: PokeGeneration;\n}\n\ninterface SetBoardPokemon extends BaseAction {\n  type: \"setBoardPokemon\";\n  payload: Pokemon[];\n}\n\ninterface SetBoardGame extends BaseAction {\n  type: \"setBoardGame\";\n  payload: Game;\n}\n\ntype Action =\n  | SetPlayer\n  | SetBoardName\n  | SetBoardColumns\n  | SetBoardGeneration\n  | SetBoardPokemon\n  | SetBoardGame;\n\nfunction reducer(state: FuckingState, action: Action): FuckingState {\n  switch (action.type) {\n    case \"setPlayer\": {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          player: {\n            name: action.payload.name,\n          },\n        },\n      };\n    }\n    case \"setBoardColumns\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          columns: action.payload.columns,\n        },\n      };\n    }\n    case \"setBoardName\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardGeneration\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          generation: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardGame\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          game: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardPokemon\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokemon: [...action.payload],\n        },\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// combine the state blob with a dispatch function and actions\n// to create the context and Provider\n\ninterface FuckingContext {\n  state: FuckingState;\n  dispatch: (action: Action) => void;\n}\n\nconst initialContext: FuckingContext = {\n  state: initialState,\n  dispatch() {},\n};\n\nexport const AllTheFuckingStateCtx =\n  createContext<FuckingContext>(initialContext);\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport function AllTheFuckingStateProvider({ children }: Props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value: FuckingContext = {\n    state,\n    dispatch,\n  };\n  return (\n    <AllTheFuckingStateCtx.Provider value={value}>\n      {children}\n    </AllTheFuckingStateCtx.Provider>\n  );\n}\n","/**\n * A drop-in replacement for Promise.all, except you can specify a chunk size.\n * This way, you can chunk your requests so that you don't overwhelm the API.\n *\n * @METEORCITY_CANDIDATE\n * - maybe make \"options\" instead of passing the chunksize as a full parameter\n */\nexport async function PromiseAllSettledChunk<T>(\n  ps: Promise<T>[],\n  chunkSize: number = 25\n): Promise<PromiseSettledResult<T>[]> {\n  // split the array into chunks\n  const pchunks: Promise<T>[][] = [];\n  let cur = 0;\n  while (cur < ps.length) {\n    const chunk = ps.slice(cur, cur + chunkSize);\n    pchunks.push(chunk);\n    cur += chunkSize;\n  }\n\n  // asynchronously iterate through each chunk and add the results\n  let allRes: PromiseSettledResult<T>[] = [];\n  for (const chunk of pchunks) {\n    const res = await Promise.allSettled(chunk);\n    allRes = allRes.concat(res);\n  }\n\n  return allRes;\n}\n","/**\n * A cool cache for cool people 😎. This cache\n * wraps around API calls and caches the results\n * in localStorage\n *\n * @METEORCITY_CANDIDATE\n * - I don't really like the Promise<T | void> signature.\n *   Maybe come up with some sort of CacheResponse type?\n * - better error handling\n */\n\n/**\n * A function that will be used to fetch a value if it isn't\n * stored in the cache already\n */\ntype LookerUpper<T> = (lookupVal: string) => T | Promise<T | void>;\n\nexport class CoolCache<T> {\n  /**\n   * This key will be used to identify the resource in localStorage\n   */\n  private key: string;\n\n  /**\n   * This will be used to look up the value if it isn't available\n   * in localStorage\n   */\n  private handler: LookerUpper<T>;\n\n  constructor(key: string, handler: LookerUpper<T>) {\n    this.key = key;\n    this.handler = handler;\n  }\n\n  private mkKey(key: string): string {\n    return `${this.key}.${key}`;\n  }\n\n  async get(lookupVal: string): Promise<T | void> {\n    const key = this.mkKey(lookupVal);\n    const localVal = localStorage.getItem(key);\n    if (localVal) {\n      const parsed = JSON.parse(localVal) as T;\n      return parsed;\n    }\n    const res = await this.handler(lookupVal);\n    if (res) {\n      localStorage.setItem(key, JSON.stringify(res));\n      return res;\n    }\n  }\n}\n","/**\n * This is kind of an extension of what I started with pokeFuncs.\n * The goal here is to create an wrapper around the PokeAPI that can\n * be used to simplify the process of fetching pokemon and formatting\n * it in the way I'd like.\n *\n * @TODO - Even though pokeapi-typescript caches our API requests,\n * we might want to pull all this down and host all the data locally.\n * By having this Getter, we can preserve the API our app uses while\n * swapping out the data source\n */\nimport PokeAPI, { IPokemonSpeciesVariety } from \"pokeapi-typescript\";\nimport memo from \"micro-memoize\";\nimport { PromiseAllSettledChunk } from \"./PromiseAllChunk\";\nimport { CoolCache } from \"./CoolCache\";\n\n/**\n * Utility function to generate a lookup map for what generation\n * each pokemon belongs to. It's cached, so once it's been generated\n * the first time, it won't need to be called again.\n */\nconst makePokemonGenLookup = memo(\n  async () => {\n    // fetch all generations from the PokeAPI\n    const gens = await PokeAPI.Generaition.listAll();\n    const fetchGens = gens.results.map((gen) =>\n      PokeAPI.Generaition.get(gen.name)\n    );\n    const genInfo = await Promise.all(fetchGens);\n\n    // create a lookup map to associate pokemon with\n    // generation\n    const lookup = new Map<string, number>();\n    genInfo.forEach((gen) => {\n      gen.pokemon_species.forEach((poke) => {\n        lookup.set(poke.name, gen.id);\n      });\n    });\n\n    return lookup;\n  },\n  { isPromise: true }\n);\n\n/**\n * All the languages that information could be\n * displayed in\n */\nexport type Language =\n  | \"ja-Hrkt\"\n  | \"roomaji\"\n  | \"ko\"\n  | \"zh-Hant\"\n  | \"fr\"\n  | \"de\"\n  | \"es\"\n  | \"it\"\n  | \"en\"\n  | \"cs\"\n  | \"ja\"\n  | \"zh-Hans\"\n  | \"pt-BR\";\n\n/**\n * The Pokemon Cache contains all the information needed to display\n * and work with Pokemon data. When needed, objects are used instead\n * of arrays in order to decrease the time needed\n */\ninterface IPokemonCache {\n  nationalDexNumber: number;\n  artworkUrl: string;\n  generation: number;\n  names: {\n    [lang in Language]: string;\n  };\n}\n\nconst PokemonCache = new CoolCache<IPokemonCache>(\n  \"pokemon\",\n  async (name: string) => {\n    // first, look up the Pokemon species and fetch the\n    // resource for its default variety\n    const species = await PokeAPI.PokemonSpecies.resolve(name);\n    const defaultForm = species.varieties.find(\n      (variety) => variety.is_default\n    ) as IPokemonSpeciesVariety;\n    const pokemon = await PokeAPI.Pokemon.resolve(defaultForm.pokemon.name);\n\n    // get the lookup map for all generations\n    const lookup = await makePokemonGenLookup();\n\n    // extract the ID, name, and artwork for the pokemon. Put it in a format\n    // that's faster to search than an array\n    const nationalDexNumber = pokemon.id;\n    const artworkUrl = pokemon.sprites.front_default;\n    const names = species.names.reduce((acc, cur) => {\n      acc[cur.language.name as Language] = cur.name;\n      return acc;\n    }, {} as { [lang in Language]: string });\n    const generation = lookup.get(pokemon.name) as number;\n\n    return {\n      nationalDexNumber,\n      artworkUrl,\n      names,\n      generation,\n    };\n  }\n);\n\n/**\n * The Game Cache contains all the information needed to get game-related\n * information\n */\ninterface IGameCache {\n  id: number;\n  names: {\n    [lang in Language]: string;\n  };\n  pokedex: string[];\n}\n\nconst GameCache = new CoolCache<IGameCache>(\"games\", async (title: string) => {\n  // get the game and the version group that game belongs to\n  const game = await PokeAPI.Version.resolve(title);\n  const group = await PokeAPI.VerionGroup.resolve(game.version_group.name);\n\n  // extract the ID, names, and pokedex and put it in a format\n  // that's faster to search than an array\n  const id = game.id;\n  const names = game.names.reduce((acc, cur) => {\n    acc[cur.language.name as Language] = cur.name;\n    return acc;\n  }, {} as { [lang in Language]: string });\n  const pokedex = group.pokedexes.map((dex) => dex.name);\n\n  return {\n    id,\n    names,\n    pokedex,\n  };\n});\n\nexport interface PokeGeneration {\n  name: string;\n  id: number;\n}\n\n/**\n * Fetch all the Pokemon generations\n */\nasync function getAllGenerations(lang: Language): Promise<PokeGeneration[]> {\n  // list out all the generations\n  const genList = await PokeAPI.Generaition.listAll();\n\n  // get info from all of the generations\n  const genRequests = genList.results.map((gen) =>\n    PokeAPI.Generaition.resolve(gen.name)\n  );\n  const genInfoDump = await Promise.all(genRequests);\n\n  // parse out that info into a list of our generations\n  const gens: PokeGeneration[] = [];\n  genInfoDump.forEach((gen) => {\n    const genName = gen.names.find((name) => name.language.name === lang);\n    if (genName) {\n      gens.push({\n        name: genName.name,\n        id: gen.id,\n      });\n    }\n  });\n\n  return gens;\n}\n\n/**\n * Get info on all the pokemon available in each generation\n *\n * @TODO - This logic is incomplete and probably bad. I think this\n * is the flow I'd like to encourage:\n *\n * 1. Select the game you're playing\n * 2. Use that to find the version group\n * 3. Use that to find the generation\n * 4. Find all the pokemon-species in that generation\n * 5. Get the names of all the varieties of that species\n * 6. Look up all those varieties\n *\n * This is kind of unmanegeable in it's current form. I think\n * what I'd like to do is create a \"Cache\" layer that will look\n * something like this:\n *\n * {\n *   pokemon: {...},\n *   games: {...}\n * }\n *\n * The cache will work like this:\n *\n * ```\n * Cache.get(\"pokemon\").get(\"crobat\")\n * ```\n *\n * or\n *\n * ```\n * Cache.get(\"games\").get(\"pokemon\")\n * ```\n *\n * It will work like this:\n *\n * 1. Does that request exist as a memoized value in the cache?\n *    If so, return that\n * 2. Does the entry exist in the cache? If so, lookup the value\n *    and return that\n * 3. Otherwise, make a request to the PokeAPI, store the value\n *    in localstorage, and then return the result\n *\n * Maybe multiple Caches for each type would be easier to implement\n * and manage?\n *\n * ~reccanti 6/22/21\n */\n\nexport interface Pokemon {\n  nationalDexNumber: number;\n  name: string;\n  generation: number;\n  artworkUrl: string;\n}\n\nexport async function getPokemonByGeneration(\n  lang: Language,\n  generationId: number\n): Promise<Pokemon[]> {\n  // based on the generation, cycle backward to get all the pokemon\n  let currentGen = generationId;\n  const genPromises: ReturnType<typeof PokeAPI.Generaition.resolve>[] = [];\n  while (currentGen > 0) {\n    genPromises.push(PokeAPI.Generaition.resolve(currentGen));\n    currentGen--;\n  }\n  const gens = await Promise.all(genPromises);\n\n  const pokePromises: Promise<IPokemonCache | void>[] = [];\n  gens.forEach((gen) => {\n    gen.pokemon_species.forEach((poke) => {\n      const p = PokemonCache.get(poke.name);\n      pokePromises.push(p);\n    });\n  });\n\n  const res = await PromiseAllSettledChunk(pokePromises, 100);\n  const pokemon: Pokemon[] = res\n    .filter((r) => r.status === \"fulfilled\" && !!r.value)\n    .map((r) => ({\n      // @ts-ignore\n      name: r.value.names[lang],\n      // @ts-ignore\n      nationalDexNumber: r.value.id,\n      // @ts-ignore\n      generation: r.value.generation,\n      // @ts-ignore\n      artworkUrl: r.value.artworkUrl,\n    }));\n\n  return pokemon;\n}\n\n/**\n * This is used to get a list of all the mainline Pokemon games\n */\nexport interface Game {\n  id: number;\n  name: string;\n  pokedex: string[];\n}\n\nconst getAllGames = memo(async (lang: Language): Promise<Game[]> => {\n  const gameResources = await PokeAPI.Version.listAll();\n  const gamePromises = gameResources.results.map((res) =>\n    GameCache.get(res.name)\n  );\n  const cachedGames = await Promise.all(gamePromises);\n  const filtered = cachedGames.filter((game) => !!game) as IGameCache[];\n  return filtered.map((cache) => ({\n    id: cache.id,\n    name: cache.names[lang],\n    pokedex: cache.pokedex,\n  }));\n});\n\ninterface Options {\n  lang: Language;\n}\n\nexport class PokeGetter {\n  private language: Language;\n\n  constructor({ lang = \"en\" }: Options) {\n    this.language = lang;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await getAllGames(this.language);\n  }\n\n  async getAllGenerations(): Promise<PokeGeneration[]> {\n    return await getAllGenerations(this.language);\n  }\n\n  async getPokemonByGeneration(generation: PokeGeneration) {\n    return await getPokemonByGeneration(this.language, generation.id);\n  }\n}\n","/**\n * A context that provides a wrapper aound the PokeGetter\n * so that we don't have to reinitialize it everywhere\n */\n\nimport { createContext, useState, useEffect, ReactNode } from \"react\";\nimport { PokeGetter, Language } from \"./utils/pokeGetter\";\n\nconst initialGetter = new PokeGetter({ lang: \"en\" });\n\nexport const PokeGetterContext = createContext<PokeGetter>(initialGetter);\n\ninterface Props {\n  children: ReactNode;\n  lang: Language;\n}\n\nexport function PokeGetterProvider(props: Props) {\n  const [getter, setGetter] = useState(new PokeGetter({ lang: props.lang }));\n\n  useEffect(() => {\n    setGetter(new PokeGetter({ lang: props.lang }));\n  }, [props.lang]);\n\n  return (\n    <PokeGetterContext.Provider value={getter}>\n      {props.children}\n    </PokeGetterContext.Provider>\n  );\n}\n","/**\n * I just want to use objects for Select values. Is that so\n * much to ask for???\n *\n * @METEORCITY_CANDIDATE\n * - Need to make this entirely hook-based, so it isn't dependent on\n *   any particular UI theme\n * - Probably need to figure out that change event type\n */\n\nimport { Select, FormControl, InputLabel, MenuItem } from \"@material-ui/core\";\n\ninterface Props<DataType> {\n  // these are all things that will be passed to the UI elements\n  id: string;\n  label: string;\n  fullWidth?: boolean;\n\n  // these are all things for interacting with complex data\n  data: DataType[];\n  getDisplayValue: (data: DataType) => string;\n  getKeyValue: (data: DataType) => string | number;\n  getValue: (data: DataType) => string | number;\n  onChange: (data: DataType) => void;\n  value: DataType;\n}\n\nexport function BetterSelect<DataType extends object>(props: Props<DataType>) {\n  const stuffLookup = new Map<string | number, DataType>();\n  props.data.forEach((d) => {\n    stuffLookup.set(props.getValue(d), d);\n  });\n\n  /**\n   * @NOTE - this is bleh but the type for the Select component's\n   * onChange function is stupid and I don't want to replicate it.\n   * There'll be a value, so who cares\n   *\n   * ~reccanti 6/20/2021\n   */\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    const trueValue = stuffLookup.get(value) as DataType;\n    props.onChange(trueValue);\n  };\n\n  return (\n    <FormControl fullWidth={props.fullWidth ?? false}>\n      <InputLabel htmlFor={props.id}>{props.label}</InputLabel>\n      <Select\n        id={props.id}\n        value={props.getValue(props.value)}\n        onChange={handleChange}\n      >\n        {props.data.map((d) => (\n          <MenuItem key={props.getKeyValue(d)} value={props.getValue(d)}>\n            {props.getDisplayValue(d)}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n\ninterface BoardContainerStyleProps {\n  height?: number | string;\n  width?: number | string;\n}\n\nconst useBoardContainerStyles = makeStyles({\n  root: (props: BoardContainerStyleProps) => ({\n    width: props.width ?? \"100%\",\n    height: props.height ?? \"100vh\",\n    overflow: \"scroll\",\n  }),\n});\n\ninterface BoardContainerProps {\n  children: ReactNode;\n}\n\nexport function BoardContainer({ children }: BoardContainerProps) {\n  const styles = useBoardContainerStyles({});\n  return <Box className={styles.root}>{children}</Box>;\n}\n","/**\n * This is the landing page for the application. This is where the\n * user sets their username and launches their instance. I'm modeling\n * it basically on the landing screen for https://skribbl.io/ since\n * I think it does a really good job!\n */\n\nimport {\n  Paper,\n  Container,\n  TextField,\n  Button,\n  makeStyles,\n  FormControl,\n  Input,\n  InputLabel,\n  Grid,\n} from \"@material-ui/core\";\nimport { useContext, useState, ChangeEvent, FormEvent, useEffect } from \"react\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { PokeGetterContext } from \"./PokeGetterContext\";\nimport { Game } from \"./utils/pokeGetter\";\nimport { BetterSelect } from \"./utils/BetterSelect\";\nimport { BoardContainer, Board, Cell } from \"./Board\";\n\n/**\n * This is a sub-page of the landing page. Here, we ask the user to\n * select a username before either creating their board or joining\n * someone at a particular instance.\n *\n * @TODO - right now, we only allow the user to create a new board.\n * Users will be able to join directly using a URL provided by the\n * other player once their board is created.\n *\n * ~reccanti 6/20/2021\n */\nconst useCreateStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    margin: \"1rem\",\n    \"& *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\ninterface FormState {\n  name: string;\n}\n\nfunction CreateUser() {\n  const styles = useCreateStyles();\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const [state, setState] = useState<FormState>({ name: \"\" });\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setState({\n      ...state,\n      name: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    dispatch({ type: \"setPlayer\", payload: { name: state.name } });\n    dispatch({\n      type: \"setBoardName\",\n      payload: { name: `${state.name}'s board` },\n    });\n  };\n\n  return (\n    <Container fixed maxWidth=\"sm\">\n      <Paper className={styles.root}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Display Name\"\n            onChange={handleNameChange}\n            value={state.name}\n            fullWidth\n          />\n          <Button type=\"submit\" fullWidth>\n            Get Started\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n\n/**\n * This is where we'll set up the board for an upcoming game\n */\n\nconst useBoardStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    maxWidth: \"350px\",\n    margin: \"1rem\",\n    \"& > *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\nfunction BoardSetup() {\n  // hooks\n\n  const [games, setGames] = useState<Game[]>([]);\n\n  const { state, dispatch } = useContext(AllTheFuckingStateCtx);\n  const getter = useContext(PokeGetterContext);\n\n  const styles = useBoardStyles();\n\n  // handlers\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.value;\n    dispatch({ type: \"setBoardName\", payload: { name } });\n  };\n\n  const handleColumnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const columns = Number(event.target.value);\n    dispatch({ type: \"setBoardColumns\", payload: { columns } });\n  };\n\n  const handleGameChange = (game: Game) => {\n    dispatch({ type: \"setBoardGame\", payload: game });\n  };\n\n  // fetch state\n\n  useEffect(() => {\n    const fetch = async () => {\n      const games = await getter.getAllGames();\n      setGames(games);\n    };\n    fetch();\n  }, [getter]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const pokes = await getter.getPokemonByGeneration(state.board.generation);\n      dispatch({ type: \"setBoardPokemon\", payload: pokes });\n    };\n    fetch();\n  }, [getter, dispatch, state.board.generation]);\n\n  // render\n\n  return (\n    <Grid container>\n      <Grid container item xs={2}>\n        <Paper component=\"form\" className={styles.root}>\n          <TextField\n            fullWidth\n            label=\"Board Name\"\n            onChange={handleNameChange}\n            value={state.board.name}\n          />\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"column-input\">Columns</InputLabel>\n            <Input\n              id=\"column-input\"\n              type=\"number\"\n              onChange={handleColumnChange}\n              value={state.board.columns}\n            />\n          </FormControl>\n          <BetterSelect\n            id=\"game-select\"\n            label=\"Game\"\n            fullWidth\n            data={games}\n            value={state.board.game}\n            getDisplayValue={(d) => d.name}\n            getKeyValue={(d) => d.name}\n            getValue={(d) => d.id}\n            onChange={handleGameChange}\n          />\n        </Paper>\n      </Grid>\n      <Grid container item xs={10}>\n        <BoardContainer>\n          <Board\n            columns={state.board.columns}\n            items={state.board.pokemon}\n            renderCell={(item) => (\n              <Cell key={item.name} variant=\"unknown\">\n                <img src={item.artworkUrl} alt={item.name} />\n              </Cell>\n            )}\n          />\n        </BoardContainer>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport function LandingPage() {\n  const { state } = useContext(AllTheFuckingStateCtx);\n  if (state.users.player) {\n    return <BoardSetup />;\n  }\n  return <CreateUser />;\n}\n","import { AllTheFuckingStateProvider } from \"./AllTheFuckingState\";\nimport { PokeGetterProvider } from \"./PokeGetterContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { LandingPage } from \"./LandingPage\";\n\n/**\n * Let's start thinking about the \"App State\". These will be the various\n * different phases of using this application. Each phase could probably\n * be considered a mini-application\n *\n * 1. Setup - This is where you set up the board, establishing the shape\n * of the board and the order the pokemon appear in\n *\n * 2. Connection - Once the board is configured, we'll try to connect to\n * another instance that we can pass that data along to. Maybe this could\n * happen in the background of other phases?\n *\n * 3. Game - This probably consists of several sub-phases, such as ship\n * placement and actual play\n *\n * 4. PostGame - After a player wins, what happens? Do we just return to\n * the main phase or give people a chance to do another round?\n */\nfunction App() {\n  return (\n    // <WebRTCProvider>\n    //   <SetupProvider>\n    //     <Connector />\n    //     <Loader />\n    //   </SetupProvider>\n    // </WebRTCProvider>\n    <AllTheFuckingStateProvider>\n      <PokeGetterProvider lang=\"en\">\n        {/**\n         * @TODO - instead of hard-coding this, it might be better\n         * to do some fancy logic to determine what the base-url\n         * actually is. This way, localhost:3000/ and reccanti.github.io/ss-anne\n         * would both work\n         *\n         * ~reccanti 6/22/2021\n         */}\n        <Router basename=\"/ss-anne\">\n          <Switch>\n            <Route exact path=\"/\">\n              <LandingPage />\n            </Route>\n          </Switch>\n        </Router>\n      </PokeGetterProvider>\n    </AllTheFuckingStateProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}