{"version":3,"sources":["AllTheFuckingState.tsx","utils/PromiseAllChunk.ts","utils/CoolCache.ts","utils/pokeGetter.ts","PokeGetterContext.tsx","utils/BetterSelect.tsx","Board.tsx","LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","users","player","opponent","board","name","columns","game","id","generation","pokedex","pokemon","reducer","state","action","type","payload","initialContext","dispatch","AllTheFuckingStateCtx","createContext","AllTheFuckingStateProvider","children","useReducer","value","Provider","PromiseAllSettledChunk","ps","a","chunkSize","pchunks","cur","length","chunk","slice","push","allRes","Promise","allSettled","res","concat","CoolCache","key","handler","this","lookupVal","mkKey","localVal","localStorage","getItem","parsed","JSON","parse","setItem","stringify","PokemonCache","PokeAPI","PokemonSpecies","resolve","species","defaultForm","varieties","find","variety","is_default","Pokemon","nationalDexNumber","artworkUrl","sprites","front_default","names","reduce","acc","language","GameCache","title","Version","VerionGroup","version_group","group","pokedexes","map","dex","makeNationalDex","memo","gen","Generaition","groupPromises","version_groups","all","groups","dexPromises","flatMap","PokedexCache","get","dexes","pokemonSet","Set","forEach","poke","add","lookup","Map","pokePromises","Array","from","pokeResults","fulfilled","filter","r","status","set","nationalDex","sort","b","aNum","bNum","includes","split","cache","Pokedex","pokemonEntries","pokemon_entries","entry","pokemon_species","num","entry_number","getPokemonByPokedex","lang","dexName","pokemonPromises","pokemonCacheResults","pokemonAccepted","pokemonCached","getAllGames","listAll","gameResources","gamePromises","results","cachedGames","filtered","getPokedexByGame","gameName","dexNames","cachedDexes","basePokedexes","nationalDexCache","PokeGetter","initialGetter","PokeGetterContext","PokeGetterProvider","props","useState","getter","setGetter","useEffect","BetterSelect","stuffLookup","data","d","getValue","FormControl","fullWidth","InputLabel","htmlFor","label","Select","onChange","event","target","trueValue","MenuItem","getDisplayValue","getKeyValue","useCellStyles","makeStyles","root","display","background","variant","teal","red","blueGrey","image","Cell","onClick","styles","className","useBoardStyles","gridTemplateColumns","listStyle","padding","Board","items","renderCell","item","useBoardContainerStyles","width","height","overflow","BoardContainer","Box","useCreateStyles","margin","marginTop","CreateUser","useContext","setState","Container","fixed","maxWidth","Paper","onSubmit","preventDefault","TextField","Button","BoardSetup","games","setGames","setDexes","fetch","Grid","container","xs","component","Input","Number","src","alt","LandingPage","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ae784406.chunk.js","sourcesContent":["/**\n * @TODO - Here it is, all the fucking state! I can't think\n * of a better way to structure this right now, so I\n * won't. In time, it will probably be better to start\n * breaking this out into separate state managers, for\n * organization as much as performance\n *\n * ~reccanti 6/19/2021\n */\nimport { createContext, ReactNode, useReducer } from \"react\";\nimport { Pokemon, PokeGeneration, Game, Pokedex } from \"./utils/pokeGetter\";\n\n// various types for interacting with state\n\ninterface User {\n  name: string;\n}\n\ninterface BoardConfig {\n  name: string;\n  columns: number;\n  generation: PokeGeneration;\n  game: Game;\n  pokemon: Pokemon[];\n  pokedex: Pokedex;\n}\n\n// compose all our types into a state blob. Create the reducer\n// and action for managing this\n\ninterface FuckingState {\n  users: {\n    player: User | null;\n    opponent: User | null;\n  };\n  board: BoardConfig;\n}\n\nconst initialState: FuckingState = {\n  users: {\n    player: null,\n    opponent: null,\n  },\n  board: {\n    name: \"\",\n    columns: 15,\n    game: {\n      id: \"red\",\n      name: \"Red\",\n      generation: \"generation-i\",\n      pokedex: [],\n    },\n    generation: {\n      id: 1,\n      name: \"Generation I\",\n    },\n    pokedex: {\n      id: \"kanto\",\n      name: \"Kanto\",\n      pokemon: [],\n    },\n    pokemon: [],\n  },\n};\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetPlayer extends BaseAction {\n  type: \"setPlayer\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardName extends BaseAction {\n  type: \"setBoardName\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardColumns extends BaseAction {\n  type: \"setBoardColumns\";\n  payload: {\n    columns: number;\n  };\n}\n\ninterface SetBoardGeneration extends BaseAction {\n  type: \"setBoardGeneration\";\n  payload: PokeGeneration;\n}\n\ninterface SetBoardPokemon extends BaseAction {\n  type: \"setBoardPokemon\";\n  payload: Pokemon[];\n}\n\ninterface SetBoardGame extends BaseAction {\n  type: \"setBoardGame\";\n  payload: Game;\n}\n\ninterface SetBoardPokedex extends BaseAction {\n  type: \"setBoardPokedex\";\n  payload: Pokedex;\n}\n\ntype Action =\n  | SetPlayer\n  | SetBoardName\n  | SetBoardColumns\n  | SetBoardGeneration\n  | SetBoardPokemon\n  | SetBoardGame\n  | SetBoardPokedex;\n\nfunction reducer(state: FuckingState, action: Action): FuckingState {\n  switch (action.type) {\n    case \"setPlayer\": {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          player: {\n            name: action.payload.name,\n          },\n        },\n      };\n    }\n    case \"setBoardColumns\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          columns: action.payload.columns,\n        },\n      };\n    }\n    case \"setBoardName\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardGeneration\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          generation: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardGame\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          game: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardPokemon\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokemon: [...action.payload],\n        },\n      };\n    }\n    case \"setBoardPokedex\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokedex: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// combine the state blob with a dispatch function and actions\n// to create the context and Provider\n\ninterface FuckingContext {\n  state: FuckingState;\n  dispatch: (action: Action) => void;\n}\n\nconst initialContext: FuckingContext = {\n  state: initialState,\n  dispatch() {},\n};\n\nexport const AllTheFuckingStateCtx =\n  createContext<FuckingContext>(initialContext);\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport function AllTheFuckingStateProvider({ children }: Props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value: FuckingContext = {\n    state,\n    dispatch,\n  };\n  return (\n    <AllTheFuckingStateCtx.Provider value={value}>\n      {children}\n    </AllTheFuckingStateCtx.Provider>\n  );\n}\n","/**\n * A drop-in replacement for Promise.all, except you can specify a chunk size.\n * This way, you can chunk your requests so that you don't overwhelm the API.\n *\n * @METEORCITY_CANDIDATE\n * - maybe make \"options\" instead of passing the chunksize as a full parameter\n */\nexport async function PromiseAllSettledChunk<T>(\n  ps: Promise<T>[],\n  chunkSize: number = 25\n): Promise<PromiseSettledResult<T>[]> {\n  // split the array into chunks\n  const pchunks: Promise<T>[][] = [];\n  let cur = 0;\n  while (cur < ps.length) {\n    const chunk = ps.slice(cur, cur + chunkSize);\n    pchunks.push(chunk);\n    cur += chunkSize;\n  }\n\n  // asynchronously iterate through each chunk and add the results\n  let allRes: PromiseSettledResult<T>[] = [];\n  for (const chunk of pchunks) {\n    const res = await Promise.allSettled(chunk);\n    allRes = allRes.concat(res);\n  }\n\n  return allRes;\n}\n","/**\n * A cool cache for cool people 😎. This cache\n * wraps around API calls and caches the results\n * in localStorage\n *\n * @METEORCITY_CANDIDATE\n * - I don't really like the Promise<T | void> signature.\n *   Maybe come up with some sort of CacheResponse type?\n * - better error handling\n */\n\n/**\n * A function that will be used to fetch a value if it isn't\n * stored in the cache already\n */\ntype LookerUpper<T> = (lookupVal: string) => T | Promise<T | void>;\n\nexport class CoolCache<T> {\n  /**\n   * This key will be used to identify the resource in localStorage\n   */\n  private key: string;\n\n  /**\n   * This will be used to look up the value if it isn't available\n   * in localStorage\n   */\n  private handler: LookerUpper<T>;\n\n  constructor(key: string, handler: LookerUpper<T>) {\n    this.key = key;\n    this.handler = handler;\n  }\n\n  private mkKey(key: string): string {\n    return `${this.key}.${key}`;\n  }\n\n  async get(lookupVal: string): Promise<T | void> {\n    const key = this.mkKey(lookupVal);\n    const localVal = localStorage.getItem(key);\n    if (localVal) {\n      const parsed = JSON.parse(localVal) as T;\n      return parsed;\n    }\n    const res = await this.handler(lookupVal);\n    if (res) {\n      localStorage.setItem(key, JSON.stringify(res));\n      return res;\n    }\n  }\n}\n","/**\n * This is kind of an extension of what I started with pokeFuncs.\n * The goal here is to create an wrapper around the PokeAPI that can\n * be used to simplify the process of fetching pokemon and formatting\n * it in the way I'd like.\n *\n * @TODO - Even though pokeapi-typescript caches our API requests,\n * we might want to pull all this down and host all the data locally.\n * By having this Getter, we can preserve the API our app uses while\n * swapping out the data source\n */\nimport PokeAPI, { IPokemonSpeciesVariety } from \"pokeapi-typescript\";\nimport memo from \"micro-memoize\";\nimport { PromiseAllSettledChunk } from \"./PromiseAllChunk\";\nimport { CoolCache } from \"./CoolCache\";\n\n/**\n * All the languages that information could be\n * displayed in\n */\nexport type Language =\n  | \"ja-Hrkt\"\n  | \"roomaji\"\n  | \"ko\"\n  | \"zh-Hant\"\n  | \"fr\"\n  | \"de\"\n  | \"es\"\n  | \"it\"\n  | \"en\"\n  | \"cs\"\n  | \"ja\"\n  | \"zh-Hans\"\n  | \"pt-BR\";\n\n/**\n * The Pokemon Cache contains all the information needed to display\n * and work with Pokemon data. When needed, objects are used instead\n * of arrays in order to decrease the time needed\n */\ninterface IPokemonCache {\n  id: string;\n  nationalDexNumber: number;\n  artworkUrl: string;\n  names: {\n    [lang in Language]: string;\n  };\n}\n\nconst PokemonCache = new CoolCache<IPokemonCache>(\n  \"pokemon\",\n  async (name: string) => {\n    // first, look up the Pokemon species and fetch the\n    // resource for its default variety\n    const species = await PokeAPI.PokemonSpecies.resolve(name);\n    const defaultForm = species.varieties.find(\n      (variety) => variety.is_default\n    ) as IPokemonSpeciesVariety;\n    const pokemon = await PokeAPI.Pokemon.resolve(defaultForm.pokemon.name);\n\n    // extract the ID, name, and artwork for the pokemon. Put it in a format\n    // that's faster to search than an array\n    const nationalDexNumber = pokemon.id;\n    const artworkUrl = pokemon.sprites.front_default;\n    const names = species.names.reduce((acc, cur) => {\n      acc[cur.language.name as Language] = cur.name;\n      return acc;\n    }, {} as { [lang in Language]: string });\n\n    return {\n      id: name,\n      nationalDexNumber,\n      artworkUrl,\n      names,\n    };\n  }\n);\n\n/**\n * The Game Cache contains all the information needed to get game-related\n * information\n */\ninterface IGameCache {\n  id: string;\n  generation: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokedex: string[];\n}\n\nconst GameCache = new CoolCache<IGameCache>(\"games\", async (title: string) => {\n  // get the game and the version group that game belongs to\n  const game = await PokeAPI.Version.resolve(title);\n  const group = await PokeAPI.VerionGroup.resolve(game.version_group.name);\n\n  // extract the ID, names, and pokedex and put it in a format\n  // that's faster to search than an array\n  const id = game.name;\n  const names = game.names.reduce((acc, cur) => {\n    acc[cur.language.name as Language] = cur.name;\n    return acc;\n  }, {} as { [lang in Language]: string });\n  const pokedex = group.pokedexes.map((dex) => dex.name);\n  const generation = group.generation.name;\n\n  return {\n    id,\n    names,\n    pokedex,\n    generation,\n  };\n});\n\n/**\n * The Pokedex cache is where we keep all pokedex info\n */\nconst makeNationalDex = memo(async (gen: string): Promise<IPokedexCache> => {\n  // first get all the pokedex in each generation\n  const generation = await PokeAPI.Generaition.resolve(gen);\n  const groupPromises = generation.version_groups.map((group) =>\n    PokeAPI.VerionGroup.resolve(group.name)\n  );\n  const groups = await Promise.all(groupPromises);\n  const dexPromises = groups.flatMap((group) =>\n    group.pokedexes.map((dex) => PokedexCache.get(dex.name))\n  );\n  const dexes = (await Promise.all(dexPromises)) as IPokedexCache[];\n\n  // create a set containing the names of each unique pokemon across\n  // all the dexes. This should cover scenarios like Sword and Shield,\n  // where not all pokemon are present.\n  const pokemonSet = new Set<string>();\n  dexes.forEach((dex) => {\n    dex.pokemon.forEach((poke) => {\n      pokemonSet.add(poke);\n    });\n  });\n\n  // we need to determine the order the pokemon should appear in, so\n  // let's get all of their data, put them in a lookup map, and sort\n  // them\n  const lookup = new Map<string, number>();\n  const pokePromises = Array.from(pokemonSet).map((poke) =>\n    PokemonCache.get(poke)\n  );\n  const pokeResults = await PromiseAllSettledChunk(pokePromises, 100);\n  const fulfilled = pokeResults.filter(\n    (r) => r.status === \"fulfilled\"\n  ) as PromiseFulfilledResult<IPokemonCache>[];\n  const pokes = fulfilled.map((r) => r.value);\n  pokes.forEach((poke) => {\n    lookup.set(poke.id, poke.nationalDexNumber);\n  });\n\n  // get the name of the National dex for the game\n  const nationalDex = (await PokedexCache.get(\"national\")) as IPokedexCache;\n\n  const names = nationalDex.names;\n  const pokemon = Array.from(pokemonSet).sort((a, b) => {\n    const aNum = lookup.get(a) as number;\n    const bNum = lookup.get(b) as number;\n    if (aNum > bNum) {\n      return 1;\n    } else if (aNum < bNum) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  const id = `national/${gen}`;\n\n  return {\n    names,\n    pokemon,\n    id,\n  };\n});\n\ninterface IPokedexCache {\n  id: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokemon: string[];\n}\n\nconst PokedexCache = new CoolCache<IPokedexCache>(\n  \"pokedex\",\n  async (name: string) => {\n    if (name.includes(\"national/\")) {\n      const [, gen] = name.split(\"/\");\n      const cache = makeNationalDex(gen);\n      return cache;\n    } else {\n      // get the pokedex\n      const dex = await PokeAPI.Pokedex.resolve(name);\n\n      // extract the ID, names, and pokemon and put it in a\n      // format  that's faster to search than an array\n      const id = dex.name;\n      const names = dex.names.reduce((acc, cur) => {\n        acc[cur.language.name as Language] = cur.name;\n        return acc;\n      }, {} as { [lang in Language]: string });\n      /**\n       * @NOTE this is a little complicated. What we're doing here\n       * is creating list of pokemon sorted by the pokedex order,\n       * which involves several steps\n       */\n      const pokemonEntries = dex.pokemon_entries.map((entry) => ({\n        name: entry.pokemon_species.name,\n        num: entry.entry_number,\n      }));\n      pokemonEntries.sort((a, b) => {\n        if (a.num > b.num) {\n          return 1;\n        } else if (a.num < b.num) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      const pokemon = pokemonEntries.map((entry) => entry.name);\n\n      return {\n        id,\n        names,\n        pokemon,\n      };\n    }\n  }\n);\n\nexport interface PokeGeneration {\n  name: string;\n  id: number;\n}\n\n/**\n * Get info on all the pokemon\n */\n\nexport interface Pokemon {\n  id: string;\n  nationalDexNumber: number;\n  name: string;\n  artworkUrl: string;\n}\n\nconst getPokemonByPokedex = memo(\n  async (lang: Language, dexName: string): Promise<Pokemon[]> => {\n    const dex = (await PokedexCache.get(dexName)) as IPokedexCache;\n    const pokemonPromises = dex.pokemon.map((poke) => PokemonCache.get(poke));\n    const pokemonCacheResults = await PromiseAllSettledChunk(\n      pokemonPromises,\n      50\n    );\n    const pokemonAccepted = pokemonCacheResults.filter(\n      (r) => r.status === \"fulfilled\" && !!r.value\n    ) as PromiseFulfilledResult<IPokemonCache>[];\n    const pokemonCached = pokemonAccepted.map((r) => r.value);\n    return pokemonCached.map((poke) => ({\n      id: poke.id,\n      name: poke.names[lang],\n      artworkUrl: poke.artworkUrl,\n      nationalDexNumber: poke.nationalDexNumber,\n    }));\n  }\n);\n\n/**\n * This is used to get a list of all the mainline Pokemon games\n */\nexport interface Game {\n  id: string;\n  name: string;\n  generation: string;\n  pokedex: string[];\n}\n\nconst getAllGames = memo(async (lang: Language): Promise<Game[]> => {\n  const gameResources = await PokeAPI.Version.listAll();\n  const gamePromises = gameResources.results.map((res) =>\n    GameCache.get(res.name)\n  );\n  const cachedGames = await Promise.all(gamePromises);\n  const filtered = cachedGames.filter((game) => !!game) as IGameCache[];\n  return (\n    filtered\n      // just filter out games without pokedexes because this won't work otherwise.\n      // seems to be a problem for XD and Colosseum\n      .filter((game) => game.pokedex.length > 0)\n      .map((cache) => ({\n        id: cache.id,\n        name: cache.names[lang],\n        generation: cache.generation,\n        pokedex: cache.pokedex,\n      }))\n  );\n});\n\n/**\n * This is used to get a list of Pokedexes for each game.\n */\nexport interface Pokedex {\n  id: string;\n  name: string;\n  pokemon: string[];\n}\n\nconst getPokedexByGame = memo(async (lang: Language, gameName: string): Promise<\n  Pokedex[]\n> => {\n  const game = (await GameCache.get(gameName)) as IGameCache;\n  const dexNames = game.pokedex;\n  const dexPromises = dexNames.map((name) => PokedexCache.get(name));\n  const cachedDexes = await Promise.all(dexPromises);\n  const filtered = cachedDexes.filter((dex) => !!dex) as IPokedexCache[];\n  const basePokedexes = filtered.map((cache) => ({\n    id: cache.id,\n    name: cache.names[lang],\n    pokemon: cache.pokemon,\n  }));\n\n  const nationalDexCache = await makeNationalDex(game.generation);\n  const nationalDex = {\n    name: nationalDexCache.names[lang],\n    id: nationalDexCache.id,\n    pokemon: nationalDexCache.pokemon,\n  };\n\n  return [nationalDex, ...basePokedexes];\n});\n\n/**\n * A wrapper around all of these functions which automatically sets\n * the correct language. Maybe other things in the future\n */\ninterface Options {\n  lang: Language;\n}\n\nexport class PokeGetter {\n  private language: Language;\n\n  constructor({ lang = \"en\" }: Options) {\n    this.language = lang;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await getAllGames(this.language);\n  }\n\n  async getPokedexByGame(game: Game): Promise<Pokedex[]> {\n    return await getPokedexByGame(this.language, game.id);\n  }\n\n  async getPokemonByPokedex(dex: Pokedex): Promise<Pokemon[]> {\n    return await getPokemonByPokedex(this.language, dex.id);\n  }\n}\n","/**\n * A context that provides a wrapper aound the PokeGetter\n * so that we don't have to reinitialize it everywhere\n */\n\nimport { createContext, useState, useEffect, ReactNode } from \"react\";\nimport { PokeGetter, Language } from \"./utils/pokeGetter\";\n\nconst initialGetter = new PokeGetter({ lang: \"en\" });\n\nexport const PokeGetterContext = createContext<PokeGetter>(initialGetter);\n\ninterface Props {\n  children: ReactNode;\n  lang: Language;\n}\n\nexport function PokeGetterProvider(props: Props) {\n  const [getter, setGetter] = useState(new PokeGetter({ lang: props.lang }));\n\n  useEffect(() => {\n    setGetter(new PokeGetter({ lang: props.lang }));\n  }, [props.lang]);\n\n  return (\n    <PokeGetterContext.Provider value={getter}>\n      {props.children}\n    </PokeGetterContext.Provider>\n  );\n}\n","/**\n * I just want to use objects for Select values. Is that so\n * much to ask for???\n *\n * @METEORCITY_CANDIDATE\n * - Need to make this entirely hook-based, so it isn't dependent on\n *   any particular UI theme\n * - Probably need to figure out that change event type\n */\n\nimport { Select, FormControl, InputLabel, MenuItem } from \"@material-ui/core\";\n\ninterface Props<DataType> {\n  // these are all things that will be passed to the UI elements\n  id: string;\n  label: string;\n  fullWidth?: boolean;\n\n  // these are all things for interacting with complex data\n  data: DataType[];\n  getDisplayValue: (data: DataType) => string;\n  getKeyValue: (data: DataType) => string | number;\n  getValue: (data: DataType) => string | number;\n  onChange: (data: DataType) => void;\n  value: DataType;\n}\n\nexport function BetterSelect<DataType extends object>(props: Props<DataType>) {\n  const stuffLookup = new Map<string | number, DataType>();\n  props.data.forEach((d) => {\n    stuffLookup.set(props.getValue(d), d);\n  });\n\n  /**\n   * @NOTE - this is bleh but the type for the Select component's\n   * onChange function is stupid and I don't want to replicate it.\n   * There'll be a value, so who cares\n   *\n   * ~reccanti 6/20/2021\n   */\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    const trueValue = stuffLookup.get(value) as DataType;\n    props.onChange(trueValue);\n  };\n\n  return (\n    <FormControl fullWidth={props.fullWidth ?? false}>\n      <InputLabel htmlFor={props.id}>{props.label}</InputLabel>\n      <Select\n        id={props.id}\n        value={props.getValue(props.value)}\n        onChange={handleChange}\n      >\n        {props.data.map((d) => (\n          <MenuItem key={props.getKeyValue(d)} value={props.getValue(d)}>\n            {props.getDisplayValue(d)}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles, Box } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n\ninterface BoardContainerStyleProps {\n  height?: number | string;\n  width?: number | string;\n}\n\nconst useBoardContainerStyles = makeStyles({\n  root: (props: BoardContainerStyleProps) => ({\n    width: props.width ?? \"100%\",\n    height: props.height ?? \"100vh\",\n    overflow: \"scroll\",\n  }),\n});\n\ninterface BoardContainerProps {\n  children: ReactNode;\n}\n\nexport function BoardContainer({ children }: BoardContainerProps) {\n  const styles = useBoardContainerStyles({});\n  return <Box className={styles.root}>{children}</Box>;\n}\n","/**\n * This is the landing page for the application. This is where the\n * user sets their username and launches their instance. I'm modeling\n * it basically on the landing screen for https://skribbl.io/ since\n * I think it does a really good job!\n */\n\nimport {\n  Paper,\n  Container,\n  TextField,\n  Button,\n  makeStyles,\n  FormControl,\n  Input,\n  InputLabel,\n  Grid,\n} from \"@material-ui/core\";\nimport { useContext, useState, ChangeEvent, FormEvent, useEffect } from \"react\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { PokeGetterContext } from \"./PokeGetterContext\";\nimport { Game, Pokedex } from \"./utils/pokeGetter\";\nimport { BetterSelect } from \"./utils/BetterSelect\";\nimport { BoardContainer, Board, Cell } from \"./Board\";\n\n/**\n * This is a sub-page of the landing page. Here, we ask the user to\n * select a username before either creating their board or joining\n * someone at a particular instance.\n *\n * @TODO - right now, we only allow the user to create a new board.\n * Users will be able to join directly using a URL provided by the\n * other player once their board is created.\n *\n * ~reccanti 6/20/2021\n */\nconst useCreateStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    margin: \"1rem\",\n    \"& *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\ninterface FormState {\n  name: string;\n}\n\nfunction CreateUser() {\n  const styles = useCreateStyles();\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const [state, setState] = useState<FormState>({ name: \"\" });\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setState({\n      ...state,\n      name: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    dispatch({ type: \"setPlayer\", payload: { name: state.name } });\n    dispatch({\n      type: \"setBoardName\",\n      payload: { name: `${state.name}'s board` },\n    });\n  };\n\n  return (\n    <Container fixed maxWidth=\"sm\">\n      <Paper className={styles.root}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Display Name\"\n            onChange={handleNameChange}\n            value={state.name}\n            fullWidth\n          />\n          <Button type=\"submit\" fullWidth>\n            Get Started\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n\n/**\n * This is where we'll set up the board for an upcoming game\n */\n\nconst useBoardStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    maxWidth: \"350px\",\n    margin: \"1rem\",\n    \"& > *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\nfunction BoardSetup() {\n  // hooks\n\n  const [games, setGames] = useState<Game[]>([]);\n  const [dexes, setDexes] = useState<Pokedex[]>([]);\n\n  const { state, dispatch } = useContext(AllTheFuckingStateCtx);\n  const getter = useContext(PokeGetterContext);\n\n  const styles = useBoardStyles();\n\n  // handlers\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.value;\n    dispatch({ type: \"setBoardName\", payload: { name } });\n  };\n\n  const handleColumnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const columns = Number(event.target.value);\n    dispatch({ type: \"setBoardColumns\", payload: { columns } });\n  };\n\n  const handleGameChange = (game: Game) => {\n    dispatch({ type: \"setBoardGame\", payload: game });\n  };\n\n  const handlePokedexChange = (dex: Pokedex) => {\n    dispatch({ type: \"setBoardPokedex\", payload: dex });\n  };\n\n  // fetch state\n\n  useEffect(() => {\n    const fetch = async () => {\n      const games = await getter.getAllGames();\n      setGames(games);\n    };\n    fetch();\n  }, [getter]);\n\n  // useEffect(() => {\n  //   const fetch = async () => {\n  //     const pokes = await getter.getPokemonByGeneration(state.board.generation);\n  //     dispatch({ type: \"setBoardPokemon\", payload: pokes });\n  //   };\n  //   fetch();\n  // }, [getter, dispatch, state.board.generation]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const dexes = await getter.getPokedexByGame(state.board.game);\n      setDexes(dexes);\n    };\n    fetch();\n  }, [getter, dispatch, state.board.game]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const pokemon = await getter.getPokemonByPokedex(state.board.pokedex);\n      dispatch({ type: \"setBoardPokemon\", payload: pokemon });\n    };\n    fetch();\n  }, [getter, dispatch, state.board.pokedex]);\n\n  // render\n\n  return (\n    <Grid container>\n      <Grid container item xs={2}>\n        <Paper component=\"form\" className={styles.root}>\n          <TextField\n            fullWidth\n            label=\"Board Name\"\n            onChange={handleNameChange}\n            value={state.board.name}\n          />\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"column-input\">Columns</InputLabel>\n            <Input\n              id=\"column-input\"\n              type=\"number\"\n              onChange={handleColumnChange}\n              value={state.board.columns}\n            />\n          </FormControl>\n          <BetterSelect\n            id=\"game-select\"\n            label=\"Game\"\n            fullWidth\n            data={games}\n            value={state.board.game}\n            getDisplayValue={(d) => d.name}\n            getKeyValue={(d) => d.id}\n            getValue={(d) => d.id}\n            onChange={handleGameChange}\n          />\n          <BetterSelect\n            id=\"pokedex-select\"\n            label=\"Pokedex\"\n            fullWidth\n            data={dexes}\n            value={state.board.pokedex}\n            getDisplayValue={(d) => d.name}\n            getKeyValue={(d) => d.id}\n            getValue={(d) => d.id}\n            onChange={handlePokedexChange}\n          />\n        </Paper>\n      </Grid>\n      <Grid container item xs={10}>\n        <BoardContainer>\n          <Board\n            columns={state.board.columns}\n            items={state.board.pokemon}\n            renderCell={(item) => (\n              <Cell key={item.name} variant=\"unknown\">\n                <img src={item.artworkUrl} alt={item.name} />\n              </Cell>\n            )}\n          />\n        </BoardContainer>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport function LandingPage() {\n  const { state } = useContext(AllTheFuckingStateCtx);\n  if (state.users.player) {\n    return <BoardSetup />;\n  }\n  return <CreateUser />;\n}\n","import { AllTheFuckingStateProvider } from \"./AllTheFuckingState\";\nimport { PokeGetterProvider } from \"./PokeGetterContext\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { LandingPage } from \"./LandingPage\";\n\n/**\n * Let's start thinking about the \"App State\". These will be the various\n * different phases of using this application. Each phase could probably\n * be considered a mini-application\n *\n * 1. Setup - This is where you set up the board, establishing the shape\n * of the board and the order the pokemon appear in\n *\n * 2. Connection - Once the board is configured, we'll try to connect to\n * another instance that we can pass that data along to. Maybe this could\n * happen in the background of other phases?\n *\n * 3. Game - This probably consists of several sub-phases, such as ship\n * placement and actual play\n *\n * 4. PostGame - After a player wins, what happens? Do we just return to\n * the main phase or give people a chance to do another round?\n */\nfunction App() {\n  return (\n    // <WebRTCProvider>\n    //   <SetupProvider>\n    //     <Connector />\n    //     <Loader />\n    //   </SetupProvider>\n    // </WebRTCProvider>\n    <AllTheFuckingStateProvider>\n      <PokeGetterProvider lang=\"en\">\n        {/**\n         * @TODO - instead of hard-coding this, it might be better\n         * to do some fancy logic to determine what the base-url\n         * actually is. This way, localhost:3000/ and reccanti.github.io/ss-anne\n         * would both work\n         *\n         * ~reccanti 6/22/2021\n         */}\n        <Router basename=\"/ss-anne\">\n          <Switch>\n            <Route exact path=\"/\">\n              <LandingPage />\n            </Route>\n          </Switch>\n        </Router>\n      </PokeGetterProvider>\n    </AllTheFuckingStateProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}