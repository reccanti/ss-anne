{"version":3,"sources":["../node_modules/peerjs/dist sync","AllTheFuckingState.tsx","utils/PromiseAllChunk.ts","utils/CoolCache.ts","utils/pokeGetter.ts","PokeGetterContext.tsx","PeerJSContext.tsx","utils/createCtx.tsx","utils/BetterSelect.tsx","Board.tsx","CreateUserPage.tsx","LandingPage.tsx","LobbyPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","user","board","name","columns","game","generation","pokedex","pokemon","peerjs","reducer","state","action","type","payload","initialContext","dispatch","AllTheFuckingStateCtx","createContext","AllTheFuckingStateProvider","children","useReducer","value","Provider","PromiseAllSettledChunk","ps","a","chunkSize","pchunks","cur","length","chunk","slice","push","allRes","Promise","allSettled","res","concat","CoolCache","key","handler","this","lookupVal","mkKey","localVal","localStorage","getItem","parsed","JSON","parse","setItem","stringify","PokemonCache","PokeAPI","PokemonSpecies","species","defaultForm","varieties","find","variety","is_default","Pokemon","nationalDexNumber","artworkUrl","sprites","front_default","names","reduce","acc","language","GameCache","title","Version","VerionGroup","version_group","group","pokedexes","map","dex","makeNationalDex","memo","gen","Generaition","groupPromises","version_groups","all","groups","dexPromises","flatMap","PokedexCache","get","dexes","pokemonSet","Set","forEach","poke","add","lookup","Map","pokePromises","Array","from","pokeResults","fulfilled","filter","r","status","set","nationalDex","sort","b","aNum","bNum","includes","split","cache","Pokedex","pokemonEntries","pokemon_entries","entry","pokemon_species","num","entry_number","getPokemonByPokedex","lang","dexName","pokemonPromises","pokemonCacheResults","pokemonAccepted","pokemonCached","getAllGames","listAll","gameResources","gamePromises","results","cachedGames","filtered","Object","getPokedexByGame","gameName","dexNames","cachedDexes","basePokedexes","nationalDexCache","PokeGetter","initialGetter","PokeGetterContext","PokeGetterProvider","props","useState","getter","setGetter","useEffect","ctx","undefined","c","useContext","createCtx","useCtx","BasePeerJSProvider","usePeerJS","PeerJSProvider","context","PeerJSStatusContext","PeerJSStatusProvider","peer","useRef","setId","connections","useMemo","openCbs","dataCbs","errorCbs","connectCbs","registerOnOpen","cb","registerOnData","registerOnConnect","registerOnError","messageById","data","conn","send","messageAll","values","isConnected","has","connect","current","reject","on","console","log","onData","err","p","PeerJS","onOpen","onError","BetterSelect","stuffLookup","d","getValue","FormControl","fullWidth","InputLabel","htmlFor","label","Select","onChange","event","target","trueValue","MenuItem","getDisplayValue","getKeyValue","useCellStyles","makeStyles","root","display","background","variant","teal","red","blueGrey","image","Cell","onClick","styles","className","useBoardStyles","gridTemplateColumns","listStyle","padding","Board","items","renderCell","item","useBoardContainerStyles","width","height","overflow","BoardContainer","useCreateStyles","margin","marginTop","CreateUser","setState","Container","fixed","maxWidth","Paper","onSubmit","preventDefault","TextField","onNameChange","Button","pointerEvents","BoardSetupManager","games","setGames","setDexes","history","useHistory","peerContext","fetch","BoardSetup","curName","curColumn","curGame","curPokedex","curPokemon","onColumnChange","Number","onGameChange","onPokedexChange","Grid","container","xs","Input","src","alt","LandingPage","useStyles","theme","spacing","button","marginLeft","cardGrid","card","JoinPage","Box","component","Typography","color","startIcon","Card","CardContent","waitingUsers","index","LobbyPage","setWaitingUsers","addWatingUser","w","peer_id","useParams","actionCallbacks","sendAction","registerActionListener","listener","size","parseData","useActionListener","listen","Debug","AppBar","position","Toolbar","IconButton","Home","App","CircularProgress","basename","exact","path","AppInitialization","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.05cf6b9e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 126;","/**\n * @TODO - Here it is, all the fucking state! I can't think\n * of a better way to structure this right now, so I\n * won't. In time, it will probably be better to start\n * breaking this out into separate state managers, for\n * organization as much as performance\n *\n * ~reccanti 6/19/2021\n */\nimport { createContext, ReactNode, useReducer } from \"react\";\nimport { Pokemon, PokeGeneration, Game, Pokedex } from \"./utils/pokeGetter\";\nimport PeerJS from \"peerjs\";\n\n// various types for interacting with state\n\ninterface User {\n  name: string;\n}\n\ninterface BoardConfig {\n  name: string;\n  columns: number;\n  generation: PokeGeneration;\n  game: Game;\n  pokemon: Pokemon[];\n  pokedex: Pokedex;\n}\n\n// compose all our types into a state blob. Create the reducer\n// and action for managing this\n\ninterface FuckingState {\n  // users: {\n  //   player: User | null;\n  //   opponent: User | null;\n  // };\n  user: User | null;\n  board: BoardConfig;\n  peerjs: PeerJS | null;\n}\n\nconst initialState: FuckingState = {\n  user: null,\n  /**\n   * @TODO - It might make more sense to make this\n   * local state in the BoardSetup page, only updating\n   * the full state once we're ready to submit it. This\n   * would allow us to more easily make a BoardConfig | null\n   * type, since we'd only have to make the board when we have\n   * all the information\n   *\n   * ~reccanti 6/28/2021\n   */\n  board: {\n    name: \"\",\n    columns: 15,\n    game: {\n      id: \"red\",\n      name: \"Red\",\n      generation: \"generation-i\",\n      pokedex: [],\n    },\n    generation: {\n      id: 1,\n      name: \"Generation I\",\n    },\n    pokedex: {\n      id: \"kanto\",\n      name: \"Kanto\",\n      pokemon: [],\n    },\n    pokemon: [],\n  },\n  peerjs: null,\n};\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetUser extends BaseAction {\n  type: \"setUser\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardName extends BaseAction {\n  type: \"setBoardName\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardColumns extends BaseAction {\n  type: \"setBoardColumns\";\n  payload: {\n    columns: number;\n  };\n}\n\ninterface SetBoardGeneration extends BaseAction {\n  type: \"setBoardGeneration\";\n  payload: PokeGeneration;\n}\n\ninterface SetBoardPokemon extends BaseAction {\n  type: \"setBoardPokemon\";\n  payload: Pokemon[];\n}\n\ninterface SetBoardGame extends BaseAction {\n  type: \"setBoardGame\";\n  payload: Game;\n}\n\ninterface SetBoardPokedex extends BaseAction {\n  type: \"setBoardPokedex\";\n  payload: Pokedex;\n}\n\ninterface SetPeerJS extends BaseAction {\n  type: \"setPeerJS\";\n  payload: PeerJS;\n}\n\ninterface Clear extends BaseAction {\n  type: \"clear\";\n}\n\ntype Action =\n  | SetUser\n  | SetBoardName\n  | SetBoardColumns\n  | SetBoardGeneration\n  | SetBoardPokemon\n  | SetBoardGame\n  | SetBoardPokedex\n  | SetPeerJS\n  | Clear;\n\nfunction reducer(state: FuckingState, action: Action): FuckingState {\n  switch (action.type) {\n    case \"setUser\": {\n      return {\n        ...state,\n        user: {\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardColumns\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          columns: action.payload.columns,\n        },\n      };\n    }\n    case \"setBoardName\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardGeneration\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          generation: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardGame\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          game: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardPokemon\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokemon: [...action.payload],\n        },\n      };\n    }\n    case \"setBoardPokedex\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokedex: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setPeerJS\": {\n      return {\n        ...state,\n        peerjs: action.payload,\n      };\n    }\n    case \"clear\": {\n      return initialState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// combine the state blob with a dispatch function and actions\n// to create the context and Provider\n\ninterface FuckingContext {\n  state: FuckingState;\n  dispatch: (action: Action) => void;\n}\n\nconst initialContext: FuckingContext = {\n  state: initialState,\n  dispatch() {},\n};\n\nexport const AllTheFuckingStateCtx =\n  createContext<FuckingContext>(initialContext);\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport function AllTheFuckingStateProvider({ children }: Props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const value: FuckingContext = {\n    state,\n    dispatch,\n  };\n  return (\n    <AllTheFuckingStateCtx.Provider value={value}>\n      {children}\n    </AllTheFuckingStateCtx.Provider>\n  );\n}\n","/**\n * A drop-in replacement for Promise.all, except you can specify a chunk size.\n * This way, you can chunk your requests so that you don't overwhelm the API.\n *\n * @METEORCITY_CANDIDATE\n * - maybe make \"options\" instead of passing the chunksize as a full parameter\n */\nexport async function PromiseAllSettledChunk<T>(\n  ps: Promise<T>[],\n  chunkSize: number = 25\n): Promise<PromiseSettledResult<T>[]> {\n  // split the array into chunks\n  const pchunks: Promise<T>[][] = [];\n  let cur = 0;\n  while (cur < ps.length) {\n    const chunk = ps.slice(cur, cur + chunkSize);\n    pchunks.push(chunk);\n    cur += chunkSize;\n  }\n\n  // asynchronously iterate through each chunk and add the results\n  let allRes: PromiseSettledResult<T>[] = [];\n  for (const chunk of pchunks) {\n    const res = await Promise.allSettled(chunk);\n    allRes = allRes.concat(res);\n  }\n\n  return allRes;\n}\n","/**\n * A cool cache for cool people 😎. This cache\n * wraps around API calls and caches the results\n * in localStorage\n *\n * @METEORCITY_CANDIDATE\n * - I don't really like the Promise<T | void> signature.\n *   Maybe come up with some sort of CacheResponse type?\n * - better error handling\n */\n\n/**\n * A function that will be used to fetch a value if it isn't\n * stored in the cache already\n */\ntype LookerUpper<T> = (lookupVal: string) => T | Promise<T | void>;\n\nexport class CoolCache<T> {\n  /**\n   * This key will be used to identify the resource in localStorage\n   */\n  private key: string;\n\n  /**\n   * This will be used to look up the value if it isn't available\n   * in localStorage\n   */\n  private handler: LookerUpper<T>;\n\n  constructor(key: string, handler: LookerUpper<T>) {\n    this.key = key;\n    this.handler = handler;\n  }\n\n  private mkKey(key: string): string {\n    return `${this.key}.${key}`;\n  }\n\n  async get(lookupVal: string): Promise<T | void> {\n    const key = this.mkKey(lookupVal);\n    const localVal = localStorage.getItem(key);\n    if (localVal) {\n      const parsed = JSON.parse(localVal) as T;\n      return parsed;\n    }\n    const res = await this.handler(lookupVal);\n    if (res) {\n      localStorage.setItem(key, JSON.stringify(res));\n      return res;\n    }\n  }\n}\n","/**\n * This is kind of an extension of what I started with pokeFuncs.\n * The goal here is to create an wrapper around the PokeAPI that can\n * be used to simplify the process of fetching pokemon and formatting\n * it in the way I'd like.\n *\n * @TODO - Even though pokeapi-typescript caches our API requests,\n * we might want to pull all this down and host all the data locally.\n * By having this Getter, we can preserve the API our app uses while\n * swapping out the data source\n */\nimport PokeAPI, { IPokemonSpeciesVariety } from \"pokeapi-typescript\";\nimport memo from \"micro-memoize\";\nimport { PromiseAllSettledChunk } from \"./PromiseAllChunk\";\nimport { CoolCache } from \"./CoolCache\";\n\n/**\n * All the languages that information could be\n * displayed in\n */\nexport type Language =\n  | \"ja-Hrkt\"\n  | \"roomaji\"\n  | \"ko\"\n  | \"zh-Hant\"\n  | \"fr\"\n  | \"de\"\n  | \"es\"\n  | \"it\"\n  | \"en\"\n  | \"cs\"\n  | \"ja\"\n  | \"zh-Hans\"\n  | \"pt-BR\";\n\n/**\n * The Pokemon Cache contains all the information needed to display\n * and work with Pokemon data. When needed, objects are used instead\n * of arrays in order to decrease the time needed\n */\ninterface IPokemonCache {\n  id: string;\n  nationalDexNumber: number;\n  artworkUrl: string;\n  names: {\n    [lang in Language]: string;\n  };\n}\n\nconst PokemonCache = new CoolCache<IPokemonCache>(\n  \"pokemon\",\n  async (name: string) => {\n    // first, look up the Pokemon species and fetch the\n    // resource for its default variety\n    const species = await PokeAPI.PokemonSpecies.resolve(name);\n    const defaultForm = species.varieties.find(\n      (variety) => variety.is_default\n    ) as IPokemonSpeciesVariety;\n    const pokemon = await PokeAPI.Pokemon.resolve(defaultForm.pokemon.name);\n\n    // extract the ID, name, and artwork for the pokemon. Put it in a format\n    // that's faster to search than an array\n    const nationalDexNumber = pokemon.id;\n    const artworkUrl = pokemon.sprites.front_default;\n    const names = species.names.reduce((acc, cur) => {\n      acc[cur.language.name as Language] = cur.name;\n      return acc;\n    }, {} as { [lang in Language]: string });\n\n    return {\n      id: name,\n      nationalDexNumber,\n      artworkUrl,\n      names,\n    };\n  }\n);\n\n/**\n * The Game Cache contains all the information needed to get game-related\n * information\n */\ninterface IGameCache {\n  id: string;\n  generation: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokedex: string[];\n}\n\nconst GameCache = new CoolCache<IGameCache>(\"games\", async (title: string) => {\n  // get the game and the version group that game belongs to\n  const game = await PokeAPI.Version.resolve(title);\n  const group = await PokeAPI.VerionGroup.resolve(game.version_group.name);\n\n  // extract the ID, names, and pokedex and put it in a format\n  // that's faster to search than an array\n  const id = game.name;\n  const names = game.names.reduce((acc, cur) => {\n    acc[cur.language.name as Language] = cur.name;\n    return acc;\n  }, {} as { [lang in Language]: string });\n  const pokedex = group.pokedexes.map((dex) => dex.name);\n  const generation = group.generation.name;\n\n  return {\n    id,\n    names,\n    pokedex,\n    generation,\n  };\n});\n\n/**\n * The Pokedex cache is where we keep all pokedex info\n */\nconst makeNationalDex = memo(async (gen: string): Promise<IPokedexCache> => {\n  // first get all the pokedex in each generation\n  const generation = await PokeAPI.Generaition.resolve(gen);\n  const groupPromises = generation.version_groups.map((group) =>\n    PokeAPI.VerionGroup.resolve(group.name)\n  );\n  const groups = await Promise.all(groupPromises);\n  const dexPromises = groups.flatMap((group) =>\n    group.pokedexes.map((dex) => PokedexCache.get(dex.name))\n  );\n  const dexes = (await Promise.all(dexPromises)) as IPokedexCache[];\n\n  // create a set containing the names of each unique pokemon across\n  // all the dexes. This should cover scenarios like Sword and Shield,\n  // where not all pokemon are present.\n  const pokemonSet = new Set<string>();\n  dexes.forEach((dex) => {\n    dex.pokemon.forEach((poke) => {\n      pokemonSet.add(poke);\n    });\n  });\n\n  // we need to determine the order the pokemon should appear in, so\n  // let's get all of their data, put them in a lookup map, and sort\n  // them\n  const lookup = new Map<string, number>();\n  const pokePromises = Array.from(pokemonSet).map((poke) =>\n    PokemonCache.get(poke)\n  );\n  const pokeResults = await PromiseAllSettledChunk(pokePromises, 100);\n  const fulfilled = pokeResults.filter(\n    (r) => r.status === \"fulfilled\"\n  ) as PromiseFulfilledResult<IPokemonCache>[];\n  const pokes = fulfilled.map((r) => r.value);\n  pokes.forEach((poke) => {\n    lookup.set(poke.id, poke.nationalDexNumber);\n  });\n\n  // get the name of the National dex for the game\n  const nationalDex = (await PokedexCache.get(\"national\")) as IPokedexCache;\n\n  const names = nationalDex.names;\n  const pokemon = Array.from(pokemonSet).sort((a, b) => {\n    const aNum = lookup.get(a) as number;\n    const bNum = lookup.get(b) as number;\n    if (aNum > bNum) {\n      return 1;\n    } else if (aNum < bNum) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  const id = `national/${gen}`;\n\n  return {\n    names,\n    pokemon,\n    id,\n  };\n});\n\ninterface IPokedexCache {\n  id: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokemon: string[];\n}\n\nconst PokedexCache = new CoolCache<IPokedexCache>(\n  \"pokedex\",\n  async (name: string) => {\n    if (name.includes(\"national/\")) {\n      const [, gen] = name.split(\"/\");\n      const cache = makeNationalDex(gen);\n      return cache;\n    } else {\n      // get the pokedex\n      const dex = await PokeAPI.Pokedex.resolve(name);\n\n      // extract the ID, names, and pokemon and put it in a\n      // format  that's faster to search than an array\n      const id = dex.name;\n      const names = dex.names.reduce((acc, cur) => {\n        acc[cur.language.name as Language] = cur.name;\n        return acc;\n      }, {} as { [lang in Language]: string });\n      /**\n       * @NOTE this is a little complicated. What we're doing here\n       * is creating list of pokemon sorted by the pokedex order,\n       * which involves several steps\n       */\n      const pokemonEntries = dex.pokemon_entries.map((entry) => ({\n        name: entry.pokemon_species.name,\n        num: entry.entry_number,\n      }));\n      pokemonEntries.sort((a, b) => {\n        if (a.num > b.num) {\n          return 1;\n        } else if (a.num < b.num) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      const pokemon = pokemonEntries.map((entry) => entry.name);\n\n      return {\n        id,\n        names,\n        pokemon,\n      };\n    }\n  }\n);\n\nexport interface PokeGeneration {\n  name: string;\n  id: number;\n}\n\n/**\n * Get info on all the pokemon\n */\n\nexport interface Pokemon {\n  id: string;\n  nationalDexNumber: number;\n  name: string;\n  artworkUrl: string;\n}\n\nconst getPokemonByPokedex = memo(\n  async (lang: Language, dexName: string): Promise<Pokemon[]> => {\n    const dex = (await PokedexCache.get(dexName)) as IPokedexCache;\n    const pokemonPromises = dex.pokemon.map((poke) => PokemonCache.get(poke));\n    const pokemonCacheResults = await PromiseAllSettledChunk(\n      pokemonPromises,\n      50\n    );\n    const pokemonAccepted = pokemonCacheResults.filter(\n      (r) => r.status === \"fulfilled\" && !!r.value\n    ) as PromiseFulfilledResult<IPokemonCache>[];\n    const pokemonCached = pokemonAccepted.map((r) => r.value);\n    return pokemonCached.map((poke) => ({\n      id: poke.id,\n      name: poke.names[lang],\n      artworkUrl: poke.artworkUrl,\n      nationalDexNumber: poke.nationalDexNumber,\n    }));\n  }\n);\n\n/**\n * This is used to get a list of all the mainline Pokemon games\n */\nexport interface Game {\n  id: string;\n  name: string;\n  generation: string;\n  pokedex: string[];\n}\n\nconst getAllGames = memo(async (lang: Language): Promise<Game[]> => {\n  const gameResources = await PokeAPI.Version.listAll();\n  const gamePromises = gameResources.results.map((res) =>\n    GameCache.get(res.name)\n  );\n  const cachedGames = await Promise.all(gamePromises);\n  const filtered = cachedGames.filter((game) => !!game) as IGameCache[];\n  return (\n    filtered\n      // just filter out games without pokedexes because this won't work otherwise.\n      // seems to be a problem for XD and Colosseum\n      .filter((game) => game.pokedex.length > 0)\n      // filtering out games without a name array because this won't work otherwise.\n      // seems to be a problem for Let's Go and Sword & Shield\n      .filter((game) => Object.keys(game.names).length > 0)\n      .map((cache) => ({\n        id: cache.id,\n        name: cache.names[lang],\n        generation: cache.generation,\n        pokedex: cache.pokedex,\n      }))\n  );\n});\n\n/**\n * This is used to get a list of Pokedexes for each game.\n */\nexport interface Pokedex {\n  id: string;\n  name: string;\n  pokemon: string[];\n}\n\nconst getPokedexByGame = memo(async (lang: Language, gameName: string): Promise<\n  Pokedex[]\n> => {\n  const game = (await GameCache.get(gameName)) as IGameCache;\n  const dexNames = game.pokedex;\n  const dexPromises = dexNames.map((name) => PokedexCache.get(name));\n  const cachedDexes = await Promise.all(dexPromises);\n  const filtered = cachedDexes.filter((dex) => !!dex) as IPokedexCache[];\n  const basePokedexes = filtered.map((cache) => ({\n    id: cache.id,\n    name: cache.names[lang],\n    pokemon: cache.pokemon,\n  }));\n\n  const nationalDexCache = await makeNationalDex(game.generation);\n  const nationalDex = {\n    name: nationalDexCache.names[lang],\n    id: nationalDexCache.id,\n    pokemon: nationalDexCache.pokemon,\n  };\n\n  return [nationalDex, ...basePokedexes];\n});\n\n/**\n * A wrapper around all of these functions which automatically sets\n * the correct language. Maybe other things in the future\n */\ninterface Options {\n  lang: Language;\n}\n\nexport class PokeGetter {\n  private language: Language;\n\n  constructor({ lang = \"en\" }: Options) {\n    this.language = lang;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await getAllGames(this.language);\n  }\n\n  async getPokedexByGame(game: Game): Promise<Pokedex[]> {\n    return await getPokedexByGame(this.language, game.id);\n  }\n\n  async getPokemonByPokedex(dex: Pokedex): Promise<Pokemon[]> {\n    return await getPokemonByPokedex(this.language, dex.id);\n  }\n}\n","/**\n * A context that provides a wrapper aound the PokeGetter\n * so that we don't have to reinitialize it everywhere\n */\n\nimport { createContext, useState, useEffect, ReactNode } from \"react\";\nimport { PokeGetter, Language } from \"./utils/pokeGetter\";\n\nconst initialGetter = new PokeGetter({ lang: \"en\" });\n\nexport const PokeGetterContext = createContext<PokeGetter>(initialGetter);\n\ninterface Props {\n  children: ReactNode;\n  lang: Language;\n}\n\nexport function PokeGetterProvider(props: Props) {\n  const [getter, setGetter] = useState(new PokeGetter({ lang: props.lang }));\n\n  useEffect(() => {\n    setGetter(new PokeGetter({ lang: props.lang }));\n  }, [props.lang]);\n\n  return (\n    <PokeGetterContext.Provider value={getter}>\n      {props.children}\n    </PokeGetterContext.Provider>\n  );\n}\n","/**\n * In this file, we'll handle all the things for connecting\n * and sending data using webrtc\n */\nimport {\n  createContext,\n  ReactNode,\n  useEffect,\n  useState,\n  useRef,\n  useMemo,\n  useContext,\n} from \"react\";\nimport PeerJS, { DataConnection } from \"peerjs\";\nimport { createCtx } from \"./utils/createCtx\";\n\ntype OnOpenCallback = (id: string) => void;\ntype OnConnectCallback = (dataConnection: PeerJS.DataConnection) => void;\ntype OnErrorCallback = (err: Error) => void;\ntype OnDataCallback = (data: any) => void;\n\ntype RegisterCallback<T> = (cb: T) => void;\n\ninterface BaseState {\n  status: string;\n}\n\ninterface PeerJSContext {\n  registerOnOpen: RegisterCallback<OnOpenCallback>;\n  registerOnConnect: RegisterCallback<OnConnectCallback>;\n  registerOnError: RegisterCallback<OnErrorCallback>;\n  registerOnData: RegisterCallback<OnDataCallback>;\n  messageById: (id: string, data: any) => void;\n  messageAll: (data: any) => void;\n  connect: (id: string) => Promise<DataConnection>;\n  isConnected: (id: string) => boolean;\n  id: string;\n}\n\nconst [useCtx, BasePeerJSProvider] = createCtx<PeerJSContext>();\n\nexport const usePeerJS = useCtx;\n\ninterface PeerJSProviderProps {\n  children: ReactNode;\n  context: PeerJSContext;\n}\n\nexport function PeerJSProvider({ children, context }: PeerJSProviderProps) {\n  return <BasePeerJSProvider value={context}>{children}</BasePeerJSProvider>;\n}\n\n/**\n * PeerJS requires some setup before it's ready for use, so this is\n * used to initialize PeerJS in an asynchronous way. Once it's\n * ready, we can use this to pass the context down to the main\n * PeerJS context. This way, we can ensure that PeerJS will always\n * be ready and we won't have to do any weird typechecking\n */\ninterface Uninitialized extends BaseState {\n  status: \"uninitialized\";\n}\n\ninterface Ready extends BaseState {\n  status: \"ready\";\n  context: PeerJSContext;\n}\n\ntype PeerJSStatus = Uninitialized | Ready;\n\nconst PeerJSStatusContext = createContext<PeerJSStatus>({\n  status: \"uninitialized\",\n});\n\nexport const usePeerJSStatus = () => useContext(PeerJSStatusContext);\n\ninterface PeerJSStatusProviderProps {\n  children: ReactNode;\n}\n\nexport function PeerJSStatusProvider({ children }: PeerJSStatusProviderProps) {\n  const peer = useRef<PeerJS>();\n  const [id, setId] = useState<string | null>(null);\n\n  // functions for managing connections\n  const connections = useMemo(\n    () => new Map<string, PeerJS.DataConnection>(),\n    []\n  );\n\n  // memoized sets of all the callbacks that have been registered\n  const openCbs = useMemo(() => new Set<OnOpenCallback>(), []);\n  const dataCbs = useMemo(() => new Set<OnDataCallback>(), []);\n  const errorCbs = useMemo(() => new Set<OnErrorCallback>(), []);\n  const connectCbs = useMemo(() => new Set<OnConnectCallback>(), []);\n\n  // functions to add to our callback arrays\n  const registerOnOpen = useMemo(\n    () => (cb: OnOpenCallback) => openCbs.add(cb),\n    [openCbs]\n  );\n  const registerOnData = useMemo(\n    () => (cb: OnDataCallback) => dataCbs.add(cb),\n    [dataCbs]\n  );\n  const registerOnConnect = useMemo(\n    () => (cb: OnConnectCallback) => connectCbs.add(cb),\n    [connectCbs]\n  );\n  const registerOnError = useMemo(\n    () => (cb: OnErrorCallback) => errorCbs.add(cb),\n    [errorCbs]\n  );\n\n  const messageById = useMemo(\n    () => (id: string, data: any) => {\n      const conn = connections.get(id);\n      if (conn) {\n        conn.send(data);\n      }\n    },\n    [connections]\n  );\n  const messageAll = useMemo(\n    () => (data: any) => {\n      const conns = Array.from(connections.values());\n      conns.forEach((conn) => {\n        conn.send(data);\n      });\n    },\n    [connections]\n  );\n\n  const isConnected = useMemo(\n    () => (id: string) => {\n      return connections.has(id);\n    },\n    [connections]\n  );\n\n  const connect = useMemo(\n    () => async (id: string) => {\n      if (!peer.current) {\n        throw Error(\"PeerJS must be initialized!!!\");\n      }\n      const conn = peer.current.connect(id);\n      return new Promise<DataConnection>((resolve, reject) => {\n        conn.on(\"open\", () => {\n          if (!isConnected(conn.peer)) {\n            connections.set(conn.peer, conn);\n            conn.on(\"data\", (data: any) => {\n              console.log(\"that's a data...\");\n              dataCbs.forEach((onData) => {\n                onData(data);\n              });\n            });\n            // connectCbs.forEach((onConnect) => {\n            //   console.log(\"connected, bitch\");\n            //   onConnect(conn);\n            // });\n            resolve(conn);\n          }\n        });\n        conn.on(\"error\", (err) => {\n          reject(err);\n        });\n      });\n    },\n    [dataCbs, isConnected, connections]\n  );\n\n  // here we establish a peerjs connection. Our goal here\n  // is to \"flatten\" some of the complexities so we can\n  // construct APIs on top of it.\n  useEffect(() => {\n    const p = new PeerJS();\n    p.on(\"open\", (id) => {\n      setId(id);\n      openCbs.forEach((onOpen) => {\n        onOpen(id);\n      });\n    });\n    p.on(\"connection\", (c) => {\n      console.log(\"someone wants to connect to me ❤️\");\n      if (!isConnected(c.peer)) {\n        connections.set(c.peer, c);\n        c.on(\"data\", (data: any) => {\n          console.log(\"that's a data...\");\n          dataCbs.forEach((onData) => {\n            onData(data);\n          });\n        });\n        connectCbs.forEach((cb) => {\n          cb(c);\n        });\n      }\n    });\n    p.on(\"error\", (err) => {\n      errorCbs.forEach((onError) => {\n        onError(err);\n      });\n    });\n    peer.current = p;\n  }, [openCbs, connectCbs, errorCbs, dataCbs, connections, isConnected]);\n\n  // set the value depending on whether PeerJS has been\n  // properly initialized\n  let value: PeerJSStatus = { status: \"uninitialized\" };\n  if (peer.current && id) {\n    value = {\n      status: \"ready\",\n      context: {\n        registerOnConnect,\n        registerOnData,\n        registerOnError,\n        registerOnOpen,\n        connect,\n        isConnected,\n        messageAll,\n        messageById,\n        id,\n      },\n    };\n  }\n\n  return (\n    <PeerJSStatusContext.Provider value={value}>\n      {children}\n    </PeerJSStatusContext.Provider>\n  );\n}\n","/**\n * Shamelessly stolen from this gist:\n *\n * https://gist.github.com/sw-yx/f18fe6dd4c43fddb3a4971e80114a052#file-createctx-nonullcheck-tsx\n */\n\nimport { useContext, createContext } from \"react\";\n\nexport function createCtx<A>() {\n  const ctx = createContext<A | undefined>(undefined);\n  function useCtx() {\n    const c = useContext(ctx);\n    if (!c) throw new Error(\"useCtx must be inside a Provider with a value\");\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const;\n}\n","/**\n * I just want to use objects for Select values. Is that so\n * much to ask for???\n *\n * @METEORCITY_CANDIDATE\n * - Need to make this entirely hook-based, so it isn't dependent on\n *   any particular UI theme\n * - Probably need to figure out that change event type\n */\n\nimport { Select, FormControl, InputLabel, MenuItem } from \"@material-ui/core\";\n\ninterface Props<DataType> {\n  // these are all things that will be passed to the UI elements\n  id: string;\n  label: string;\n  fullWidth?: boolean;\n\n  // these are all things for interacting with complex data\n  data: DataType[];\n  getDisplayValue: (data: DataType) => string;\n  getKeyValue: (data: DataType) => string | number;\n  getValue: (data: DataType) => string | number;\n  onChange: (data: DataType) => void;\n  value: DataType;\n}\n\nexport function BetterSelect<DataType extends object>(props: Props<DataType>) {\n  const stuffLookup = new Map<string | number, DataType>();\n  props.data.forEach((d) => {\n    stuffLookup.set(props.getValue(d), d);\n  });\n\n  /**\n   * @NOTE - this is bleh but the type for the Select component's\n   * onChange function is stupid and I don't want to replicate it.\n   * There'll be a value, so who cares\n   *\n   * ~reccanti 6/20/2021\n   */\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    const trueValue = stuffLookup.get(value) as DataType;\n    props.onChange(trueValue);\n  };\n\n  return (\n    <FormControl fullWidth={props.fullWidth ?? false}>\n      <InputLabel htmlFor={props.id}>{props.label}</InputLabel>\n      <Select\n        id={props.id}\n        value={props.getValue(props.value)}\n        onChange={handleChange}\n      >\n        {props.data.map((d) => (\n          <MenuItem key={props.getKeyValue(d)} value={props.getValue(d)}>\n            {props.getDisplayValue(d)}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n\nconst useBoardContainerStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100vh\",\n    overflow: \"scroll\",\n  },\n});\n\ninterface BoardContainerProps {\n  children: ReactNode;\n}\n\nexport function BoardContainer({ children }: BoardContainerProps) {\n  const styles = useBoardContainerStyles();\n  return <ScrollContainer className={styles.root}>{children}</ScrollContainer>;\n}\n","import { useState, useContext, ChangeEvent, FormEvent } from \"react\";\nimport {\n  makeStyles,\n  Container,\n  Paper,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\n\n/**\n * This is a sub-page of the landing page. Here, we ask the user to\n * select a username before either creating their board or joining\n * someone at a particular instance.\n *\n * @TODO - right now, we only allow the user to create a new board.\n * Users will be able to join directly using a URL provided by the\n * other player once their board is created.\n *\n * ~reccanti 6/20/2021\n */\nconst useCreateStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    margin: \"1rem\",\n    \"& *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\ninterface FormState {\n  name: string;\n}\n\ninterface CreateUserProps {\n  onNameChange?: (name: string) => void;\n  onSubmit?: (data: { name: string }) => void;\n}\n\nexport function CreateUser(props: CreateUserProps) {\n  const styles = useCreateStyles();\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const [state, setState] = useState<FormState>({ name: \"\" });\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (props.onNameChange) {\n      props.onNameChange(event.target.value);\n    }\n    setState({\n      ...state,\n      name: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (props.onSubmit) {\n      props.onSubmit({ name: state.name });\n    }\n    dispatch({ type: \"setUser\", payload: { name: state.name } });\n    dispatch({\n      type: \"setBoardName\",\n      payload: { name: `${state.name}'s board` },\n    });\n  };\n\n  return (\n    <Container fixed maxWidth=\"sm\">\n      <Paper className={styles.root}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Display Name\"\n            onChange={handleNameChange}\n            value={state.name}\n            fullWidth\n          />\n          <Button type=\"submit\" fullWidth>\n            Get Started\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n","/**\n * This is the landing page for the application. This is where the\n * user sets their username and launches their instance. I'm modeling\n * it basically on the landing screen for https://skribbl.io/ since\n * I think it does a really good job!\n */\n\nimport {\n  Paper,\n  TextField,\n  Button,\n  makeStyles,\n  FormControl,\n  Input,\n  InputLabel,\n  Grid,\n} from \"@material-ui/core\";\nimport { useContext, useState, ChangeEvent, FormEvent, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { usePeerJS } from \"./PeerJSContext\";\nimport { PokeGetterContext } from \"./PokeGetterContext\";\nimport { Game, Pokedex, Pokemon } from \"./utils/pokeGetter\";\nimport { BetterSelect } from \"./utils/BetterSelect\";\nimport { BoardContainer, Board, Cell } from \"./Board\";\nimport { CreateUser } from \"./CreateUserPage\";\n\n/**\n * This is where we'll set up the board for an upcoming game.\n *\n * @TODO - This thing is doing so much. It's really bad. A good\n * first step would be moving this to it's own page. Later,\n * it might be a good idea to break out some of the state\n * management into hooks\n *\n * ~reccanti 6/28/2021\n */\n\nconst useBoardStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    maxWidth: \"350px\",\n    margin: \"1rem\",\n    \"& form > *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n  image: {\n    pointerEvents: \"none\",\n  },\n});\n\n// container component for managing board state. Makes sure\n// PeerJS is initialized and manages state for the Board\nfunction BoardSetupManager() {\n  // hooks\n\n  const [games, setGames] = useState<Game[]>([]);\n  const [dexes, setDexes] = useState<Pokedex[]>([]);\n  const { state, dispatch } = useContext(AllTheFuckingStateCtx);\n  const getter = useContext(PokeGetterContext);\n  const history = useHistory();\n\n  const peerContext = usePeerJS();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const games = await getter.getAllGames();\n      setGames(games);\n    };\n    fetch();\n  }, [getter]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const dexes = await getter.getPokedexByGame(state.board.game);\n      setDexes(dexes);\n    };\n    fetch();\n  }, [getter, dispatch, state.board.game]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const pokemon = await getter.getPokemonByPokedex(state.board.pokedex);\n      dispatch({ type: \"setBoardPokemon\", payload: pokemon });\n    };\n    fetch();\n  }, [getter, dispatch, state.board.pokedex]);\n\n  // If PeerJS is ready, initialize all the handler functions,\n  // setup state management, and render the board\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.value;\n    dispatch({ type: \"setBoardName\", payload: { name } });\n  };\n\n  const handleColumnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const columns = Number(event.target.value);\n    dispatch({ type: \"setBoardColumns\", payload: { columns } });\n  };\n\n  const handleGameChange = (game: Game) => {\n    dispatch({ type: \"setBoardGame\", payload: game });\n  };\n\n  const handlePokedexChange = (dex: Pokedex) => {\n    dispatch({ type: \"setBoardPokedex\", payload: dex });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (peerContext.id) {\n      history.push(`/${peerContext.id}`);\n    }\n  };\n\n  // fetch state\n  return (\n    <BoardSetup\n      curName={state.board.name}\n      curColumn={state.board.columns}\n      curGame={state.board.game}\n      curPokedex={state.board.pokedex}\n      curPokemon={state.board.pokemon}\n      games={games}\n      pokedex={dexes}\n      onNameChange={handleNameChange}\n      onColumnChange={handleColumnChange}\n      onGameChange={handleGameChange}\n      onPokedexChange={handlePokedexChange}\n      onSubmit={handleSubmit}\n    />\n  );\n}\n\n/**\n * @TODO - After writing this type definition, I realized that it would\n * probably be better to break these up into individual \"presentation\"\n * components that could better handle the abstracting-away the DOM\n * events and would make it so that we don't have to create a million\n * \"onTypeChange\" props. I think it still makes sense to handle  state\n * and composition in a single component, since that would allow us to\n * better coordinate asynchronous data\n *\n * ~reccanti 7/3/2021\n */\ninterface BoardSetupProps {\n  curName: string;\n  curColumn: number;\n  curGame: Game;\n  curPokedex: Pokedex;\n  games: Game[];\n  pokedex: Pokedex[];\n  curPokemon: Pokemon[];\n  onNameChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onColumnChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onGameChange: (game: Game) => void;\n  onPokedexChange: (dex: Pokedex) => void;\n  onSubmit: (event: FormEvent<HTMLFormElement>) => void;\n}\nfunction BoardSetup(props: BoardSetupProps) {\n  const styles = useBoardStyles();\n\n  // render\n\n  return (\n    <Grid container>\n      <Grid container item xs={2}>\n        <Paper className={styles.root}>\n          <form onSubmit={props.onSubmit}>\n            <TextField\n              fullWidth\n              label=\"Board Name\"\n              onChange={props.onNameChange}\n              value={props.curName}\n            />\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"column-input\">Columns</InputLabel>\n              <Input\n                id=\"column-input\"\n                type=\"number\"\n                onChange={props.onColumnChange}\n                value={props.curColumn}\n              />\n            </FormControl>\n            <BetterSelect\n              id=\"game-select\"\n              label=\"Game\"\n              fullWidth\n              data={props.games}\n              value={props.curGame}\n              getDisplayValue={(d) => d.name}\n              getKeyValue={(d) => d.id}\n              getValue={(d) => d.id}\n              onChange={props.onGameChange}\n            />\n            <BetterSelect\n              id=\"pokedex-select\"\n              label=\"Pokedex\"\n              fullWidth\n              data={props.pokedex}\n              value={props.curPokedex}\n              getDisplayValue={(d) => d.name}\n              getKeyValue={(d) => d.id}\n              getValue={(d) => d.id}\n              onChange={props.onPokedexChange}\n            />\n            <Button type=\"submit\" fullWidth>\n              Get Started!\n            </Button>\n          </form>\n        </Paper>\n      </Grid>\n      <Grid container item xs={10}>\n        <BoardContainer>\n          <Board\n            columns={props.curColumn}\n            items={props.curPokemon}\n            renderCell={(item) => (\n              <Cell key={item.name} variant=\"unknown\">\n                <img\n                  className={styles.image}\n                  src={item.artworkUrl}\n                  alt={item.name}\n                />\n              </Cell>\n            )}\n          />\n        </BoardContainer>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport function LandingPage() {\n  const { state } = useContext(AllTheFuckingStateCtx);\n  if (state.user) {\n    return <BoardSetupManager />;\n  }\n  return <CreateUser />;\n}\n","import {\n  Box,\n  Container,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  makeStyles,\n  Grid,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useContext, useEffect, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { CreateUser } from \"./CreateUserPage\";\nimport { usePeerJS } from \"./PeerJSContext\";\n\n/**\n * @TODO - It might make sense to move this to a separate file.\n * This will probably be important for pages other than the\n * JoinPage\n *\n * ~reccanti 7/1/2021\n */\ninterface BaseMessage {\n  type: string;\n  id: string;\n}\n\ninterface RequestJoin extends BaseMessage {\n  type: \"requestJoin\";\n  id: string;\n  payload: {\n    name: string;\n  };\n}\n\ninterface JoinReceived extends BaseMessage {\n  type: \"joinReceived\";\n  id: string;\n  payload: {\n    name: string;\n  };\n}\n\ntype Action = RequestJoin | JoinReceived;\n\ntype ActionCallback = (action: Action) => void;\n\nfunction parseData(data: any): Action | null {\n  if (data && data.type) {\n    switch (data.type) {\n      case \"requestJoin\":\n      case \"joinReceived\":\n        return data as Action;\n    }\n  }\n  return null;\n}\n\ninterface ActionListenerHook {\n  registerActionListener: (listener: ActionCallback) => void;\n  sendAction: (id: string, action: Action) => void;\n}\n\nfunction useActionListener(): ActionListenerHook {\n  const actionCallbacks = useMemo(() => new Set<ActionCallback>(), []);\n  const { registerOnError, registerOnData, messageById } = usePeerJS();\n\n  const sendAction = useMemo(\n    () => (id: string, action: Action) => messageById(id, action),\n    [messageById]\n  );\n\n  const registerActionListener = useMemo(\n    () => (listener: ActionCallback) => {\n      console.log(actionCallbacks.size);\n      actionCallbacks.add(listener);\n    },\n    [actionCallbacks]\n  );\n\n  useEffect(() => {\n    registerOnError((err) => {\n      console.log(err);\n    });\n\n    registerOnData((d) => {\n      const action = parseData(d);\n      console.log(\"that's an action!!!\");\n      if (action) {\n        actionCallbacks.forEach((cb) => {\n          cb(action);\n        });\n      }\n    });\n  }, [actionCallbacks, registerOnData, registerOnError]);\n\n  return {\n    registerActionListener,\n    sendAction,\n  };\n}\n\n/**\n * The lobby page where the user can join a page\n */\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    \"& > *:not(:first-child)\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginLeft: theme.spacing(4),\n  },\n  cardGrid: {\n    marginTop: theme.spacing(2),\n  },\n  card: {\n    width: \"100%\",\n  },\n}));\n\ninterface JoinPageProps {\n  waitingUsers: string[];\n}\n\nfunction JoinPage(props: JoinPageProps) {\n  const styles = useStyles();\n\n  return (\n    <Container className={styles.root}>\n      {/* Section for adding Players */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Players\n          </Typography>\n          <Button\n            className={styles.button}\n            color=\"primary\"\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n          >\n            Join\n          </Button>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          <Grid container item xs={2}>\n            <Card className={styles.card}>\n              <CardContent>Testing...</CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      {/*\n       * Section for people hanging out. This is to ensure we're\n       * connecting through PeerJS\n       */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Hanging Out\n          </Typography>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          {props.waitingUsers.map((user, index) => (\n            // This is a bad key. Store better info in the User\n            <Grid key={`${user}_${index}`} container item xs={2}>\n              <Card className={styles.card}>\n                <CardContent>{user}</CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n      {/* Ready Button */}\n      <Box>\n        <Button fullWidth variant=\"contained\" color=\"primary\">\n          Start Game\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport function LobbyPage() {\n  const [waitingUsers, setWaitingUsers] = useState<string[]>([]);\n\n  const addWatingUser = useMemo(\n    () => (user: string) => {\n      setWaitingUsers((w) => [...w, user]);\n    },\n    []\n  );\n\n  const { id, connect, isConnected } = usePeerJS();\n  const { peer_id } = useParams<{ peer_id: string }>();\n  const { state } = useContext(AllTheFuckingStateCtx);\n  const { sendAction, registerActionListener } = useActionListener();\n\n  const handleSubmit = ({ name }: { name: string }) => {\n    sendAction(peer_id, {\n      type: \"requestJoin\",\n      id,\n      payload: {\n        name,\n      },\n    });\n  };\n\n  // here, we listen for PeerJS actions\n  useEffect(() => {\n    registerActionListener((action: Action) => {\n      switch (action.type) {\n        case \"joinReceived\": {\n          addWatingUser(action.payload.name);\n          break;\n        }\n        case \"requestJoin\": {\n          addWatingUser(action.payload.name);\n          if (state.user) {\n            sendAction(action.id, {\n              type: \"joinReceived\",\n              id,\n              payload: { name: state.user.name },\n            });\n          }\n          break;\n        }\n      }\n    });\n  }, [registerActionListener, addWatingUser, id, sendAction, state.user]);\n\n  useEffect(() => {\n    const listen = async () => {\n      try {\n        if (state.user && peer_id !== id) {\n          if (!isConnected(peer_id)) {\n            const conn = await connect(peer_id);\n            console.log(\"sending the action...\");\n            sendAction(conn.peer, {\n              type: \"requestJoin\",\n              id,\n              payload: { name: state.user.name },\n            });\n          }\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    listen();\n  }, [sendAction, connect, id, isConnected, peer_id, state.user]);\n\n  if (!state.user) {\n    return <CreateUser onSubmit={handleSubmit} />;\n  }\n  return <JoinPage waitingUsers={waitingUsers} />;\n}\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport {\n  Toolbar,\n  AppBar,\n  IconButton,\n  Box,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\n\nimport {\n  AllTheFuckingStateProvider,\n  AllTheFuckingStateCtx,\n} from \"./AllTheFuckingState\";\nimport { PokeGetterProvider } from \"./PokeGetterContext\";\nimport { LandingPage } from \"./LandingPage\";\nimport { LobbyPage } from \"./LobbyPage\";\nimport {\n  PeerJSProvider,\n  PeerJSStatusProvider,\n  usePeerJSStatus,\n} from \"./PeerJSContext\";\nimport { useContext } from \"react\";\n\nfunction Debug() {\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const history = useHistory();\n\n  const handleClear = () => {\n    dispatch({ type: \"clear\" });\n    history.push(\"/\");\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton onClick={handleClear}>\n          <Home />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction App() {\n  const status = usePeerJSStatus();\n  if (status.status === \"uninitialized\") {\n    return <CircularProgress />;\n  }\n  return (\n    <PeerJSProvider context={status.context}>\n      <AllTheFuckingStateProvider>\n        <PokeGetterProvider lang=\"en\">\n          <Box>\n            {/**\n             * @TODO - instead of hard-coding this, it might be better\n             * to do some fancy logic to determine what the base-url\n             * actually is. This way, localhost:3000/ and reccanti.github.io/ss-anne\n             * would both work\n             *\n             * ~reccanti 6/22/2021\n             */}\n            <Router basename=\"/ss-anne\">\n              <Debug />\n              <Switch>\n                <Route exact path=\"/\">\n                  <LandingPage />\n                </Route>\n                <Route exact path=\"/:peer_id\">\n                  <LobbyPage />\n                </Route>\n              </Switch>\n            </Router>\n          </Box>\n        </PokeGetterProvider>\n      </AllTheFuckingStateProvider>\n    </PeerJSProvider>\n  );\n}\n\nfunction AppInitialization() {\n  return (\n    <PeerJSStatusProvider>\n      <App />\n    </PeerJSStatusProvider>\n  );\n}\n\nexport default AppInitialization;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}