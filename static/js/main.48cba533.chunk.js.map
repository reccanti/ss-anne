{"version":3,"sources":["../node_modules/peerjs/dist sync","AllTheFuckingState.tsx","utils/PromiseAllChunk.ts","utils/CoolCache.ts","utils/pokeGetter.ts","PokeGetterContext.tsx","PeerJSContext.tsx","utils/BetterSelect.tsx","Board.tsx","CreateUserPage.tsx","utils/WebRTCDatabase.ts","SharedData.tsx","LandingPage.tsx","LobbyPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","user","board","name","columns","game","generation","pokedex","pokemon","peerjs","reducer","state","action","type","payload","initialContext","dispatch","AllTheFuckingStateCtx","createContext","AllTheFuckingStateProvider","children","useReducer","value","Provider","PromiseAllSettledChunk","ps","a","chunkSize","pchunks","cur","length","chunk","slice","push","allRes","Promise","allSettled","res","concat","CoolCache","key","handler","this","lookupVal","mkKey","localVal","localStorage","getItem","parsed","JSON","parse","setItem","stringify","PokemonCache","PokeAPI","PokemonSpecies","species","defaultForm","varieties","find","variety","is_default","Pokemon","nationalDexNumber","artworkUrl","sprites","front_default","names","reduce","acc","language","GameCache","title","Version","VerionGroup","version_group","group","pokedexes","map","dex","makeNationalDex","memo","gen","Generaition","groupPromises","version_groups","all","groups","dexPromises","flatMap","PokedexCache","get","dexes","pokemonSet","Set","forEach","poke","add","lookup","Map","pokePromises","Array","from","pokeResults","fulfilled","filter","r","status","set","nationalDex","sort","b","aNum","bNum","includes","split","cache","Pokedex","pokemonEntries","pokemon_entries","entry","pokemon_species","num","entry_number","getPokemonByPokedex","lang","dexName","pokemonPromises","pokemonCacheResults","pokemonAccepted","pokemonCached","getAllGames","listAll","gameResources","gamePromises","results","cachedGames","filtered","Object","getPokedexByGame","gameName","dexNames","cachedDexes","basePokedexes","nationalDexCache","PokeGetter","initialGetter","PokeGetterContext","PokeGetterProvider","props","useState","getter","setGetter","useEffect","PeerJSContext","usePeerJS","peer","useContext","PeerJSProvider","initializePeerJS","reject","PeerJS","on","err","BetterSelect","stuffLookup","data","d","getValue","FormControl","fullWidth","InputLabel","htmlFor","label","Select","onChange","event","target","trueValue","MenuItem","getDisplayValue","getKeyValue","useCellStyles","makeStyles","root","display","background","variant","teal","red","blueGrey","image","Cell","onClick","styles","className","useBoardStyles","gridTemplateColumns","listStyle","padding","Board","items","renderCell","item","useBoardContainerStyles","width","height","overflow","BoardContainer","useCreateStyles","margin","marginTop","CreateUser","setState","Container","fixed","maxWidth","Paper","onSubmit","preventDefault","TextField","onNameChange","Button","sortDiffLeastToGreatest","timestamp","WebRTCDatabase","connections","diffStack","diffLookup","onConnectCallbacks","onDisconnectCallbacks","onChangeCallbacks","conn","setupConnection","cb","setupMessageListener","console","log","fullConn","delete","lastUpdated","connection","message","diffs","updates","diff","has","applyDiffs","connectionIDs","connectPromises","connect","connPromises","head","rest","diffsToApply","shift","prevState","getDiffsToApplyEmpty","getDiffsToApplyMany","getState","unshift","getAllDiffsSince","reverse","Date","getTime","send","allConns","author","base64","encode","syncConnections","waiting","player","w","initializeSharedData","players","SharedDataContext","useSharedData","db","useBaseSharedData","handleChange","registerOnChange","removeOnChange","join","useCallback","update","leave","ready","notReady","clone","handleDisconnect","registerOnDisconnect","removeOnDisconnect","SharedDataProvider","pointerEvents","BoardSetupManager","games","setGames","setDexes","history","useHistory","fetch","BoardSetup","curName","curColumn","curGame","curPokedex","curPokemon","onColumnChange","Number","onGameChange","onPokedexChange","Grid","container","xs","Input","src","alt","LandingPage","useStyles","theme","spacing","button","marginLeft","cardGrid","card","JoinPage","Box","component","Typography","color","startIcon","Card","CardContent","LobbyPage","isReady","setIsReady","peer_id","useParams","listen","CircularProgress","Debug","AppBar","position","Toolbar","IconButton","Home","App","setPeer","sharedData","setSharedData","setErr","p","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.48cba533.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 128;","/**\n * @TODO - Here it is, all the fucking state! I can't think\n * of a better way to structure this right now, so I\n * won't. In time, it will probably be better to start\n * breaking this out into separate state managers, for\n * organization as much as performance\n *\n * ~reccanti 6/19/2021\n */\nimport { createContext, ReactNode, useReducer } from \"react\";\nimport { Pokemon, PokeGeneration, Game, Pokedex } from \"./utils/pokeGetter\";\nimport PeerJS from \"peerjs\";\n\n// various types for interacting with state\n\ninterface User {\n  name: string;\n}\n\ninterface BoardConfig {\n  name: string;\n  columns: number;\n  generation: PokeGeneration;\n  game: Game;\n  pokemon: Pokemon[];\n  pokedex: Pokedex;\n}\n\n// compose all our types into a state blob. Create the reducer\n// and action for managing this\n\ninterface FuckingState {\n  // users: {\n  //   player: User | null;\n  //   opponent: User | null;\n  // };\n  user: User | null;\n  board: BoardConfig;\n  peerjs: PeerJS | null;\n}\n\nconst initialState: FuckingState = {\n  user: null,\n  /**\n   * @TODO - It might make more sense to make this\n   * local state in the BoardSetup page, only updating\n   * the full state once we're ready to submit it. This\n   * would allow us to more easily make a BoardConfig | null\n   * type, since we'd only have to make the board when we have\n   * all the information\n   *\n   * ~reccanti 6/28/2021\n   */\n  board: {\n    name: \"\",\n    columns: 15,\n    game: {\n      id: \"red\",\n      name: \"Red\",\n      generation: \"generation-i\",\n      pokedex: [],\n    },\n    generation: {\n      id: 1,\n      name: \"Generation I\",\n    },\n    pokedex: {\n      id: \"kanto\",\n      name: \"Kanto\",\n      pokemon: [],\n    },\n    pokemon: [],\n  },\n  peerjs: null,\n};\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetUser extends BaseAction {\n  type: \"setUser\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardName extends BaseAction {\n  type: \"setBoardName\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface SetBoardColumns extends BaseAction {\n  type: \"setBoardColumns\";\n  payload: {\n    columns: number;\n  };\n}\n\ninterface SetBoardGeneration extends BaseAction {\n  type: \"setBoardGeneration\";\n  payload: PokeGeneration;\n}\n\ninterface SetBoardPokemon extends BaseAction {\n  type: \"setBoardPokemon\";\n  payload: Pokemon[];\n}\n\ninterface SetBoardGame extends BaseAction {\n  type: \"setBoardGame\";\n  payload: Game;\n}\n\ninterface SetBoardPokedex extends BaseAction {\n  type: \"setBoardPokedex\";\n  payload: Pokedex;\n}\n\ninterface SetPeerJS extends BaseAction {\n  type: \"setPeerJS\";\n  payload: PeerJS;\n}\n\ninterface Clear extends BaseAction {\n  type: \"clear\";\n}\n\ntype Action =\n  | SetUser\n  | SetBoardName\n  | SetBoardColumns\n  | SetBoardGeneration\n  | SetBoardPokemon\n  | SetBoardGame\n  | SetBoardPokedex\n  | SetPeerJS\n  | Clear;\n\nfunction reducer(state: FuckingState, action: Action): FuckingState {\n  switch (action.type) {\n    case \"setUser\": {\n      return {\n        ...state,\n        user: {\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardColumns\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          columns: action.payload.columns,\n        },\n      };\n    }\n    case \"setBoardName\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"setBoardGeneration\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          generation: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardGame\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          game: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setBoardPokemon\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokemon: [...action.payload],\n        },\n      };\n    }\n    case \"setBoardPokedex\": {\n      return {\n        ...state,\n        board: {\n          ...state.board,\n          pokedex: {\n            ...action.payload,\n          },\n        },\n      };\n    }\n    case \"setPeerJS\": {\n      return {\n        ...state,\n        peerjs: action.payload,\n      };\n    }\n    case \"clear\": {\n      return initialState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// combine the state blob with a dispatch function and actions\n// to create the context and Provider\n\ninterface FuckingContext {\n  state: FuckingState;\n  dispatch: (action: Action) => void;\n}\n\nconst initialContext: FuckingContext = {\n  state: initialState,\n  dispatch() {},\n};\n\nexport const AllTheFuckingStateCtx =\n  createContext<FuckingContext>(initialContext);\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport function AllTheFuckingStateProvider({ children }: Props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const value: FuckingContext = {\n    state,\n    dispatch,\n  };\n  return (\n    <AllTheFuckingStateCtx.Provider value={value}>\n      {children}\n    </AllTheFuckingStateCtx.Provider>\n  );\n}\n","/**\n * A drop-in replacement for Promise.all, except you can specify a chunk size.\n * This way, you can chunk your requests so that you don't overwhelm the API.\n *\n * @METEORCITY_CANDIDATE\n * - maybe make \"options\" instead of passing the chunksize as a full parameter\n */\nexport async function PromiseAllSettledChunk<T>(\n  ps: Promise<T>[],\n  chunkSize: number = 25\n): Promise<PromiseSettledResult<T>[]> {\n  // split the array into chunks\n  const pchunks: Promise<T>[][] = [];\n  let cur = 0;\n  while (cur < ps.length) {\n    const chunk = ps.slice(cur, cur + chunkSize);\n    pchunks.push(chunk);\n    cur += chunkSize;\n  }\n\n  // asynchronously iterate through each chunk and add the results\n  let allRes: PromiseSettledResult<T>[] = [];\n  for (const chunk of pchunks) {\n    const res = await Promise.allSettled(chunk);\n    allRes = allRes.concat(res);\n  }\n\n  return allRes;\n}\n","/**\n * A cool cache for cool people 😎. This cache\n * wraps around API calls and caches the results\n * in localStorage\n *\n * @METEORCITY_CANDIDATE\n * - I don't really like the Promise<T | void> signature.\n *   Maybe come up with some sort of CacheResponse type?\n * - better error handling\n */\n\n/**\n * A function that will be used to fetch a value if it isn't\n * stored in the cache already\n */\ntype LookerUpper<T> = (lookupVal: string) => T | Promise<T | void>;\n\nexport class CoolCache<T> {\n  /**\n   * This key will be used to identify the resource in localStorage\n   */\n  private key: string;\n\n  /**\n   * This will be used to look up the value if it isn't available\n   * in localStorage\n   */\n  private handler: LookerUpper<T>;\n\n  constructor(key: string, handler: LookerUpper<T>) {\n    this.key = key;\n    this.handler = handler;\n  }\n\n  private mkKey(key: string): string {\n    return `${this.key}.${key}`;\n  }\n\n  async get(lookupVal: string): Promise<T | void> {\n    const key = this.mkKey(lookupVal);\n    const localVal = localStorage.getItem(key);\n    if (localVal) {\n      const parsed = JSON.parse(localVal) as T;\n      return parsed;\n    }\n    const res = await this.handler(lookupVal);\n    if (res) {\n      localStorage.setItem(key, JSON.stringify(res));\n      return res;\n    }\n  }\n}\n","/**\n * This is kind of an extension of what I started with pokeFuncs.\n * The goal here is to create an wrapper around the PokeAPI that can\n * be used to simplify the process of fetching pokemon and formatting\n * it in the way I'd like.\n *\n * @TODO - Even though pokeapi-typescript caches our API requests,\n * we might want to pull all this down and host all the data locally.\n * By having this Getter, we can preserve the API our app uses while\n * swapping out the data source\n */\nimport PokeAPI, { IPokemonSpeciesVariety } from \"pokeapi-typescript\";\nimport memo from \"micro-memoize\";\nimport { PromiseAllSettledChunk } from \"./PromiseAllChunk\";\nimport { CoolCache } from \"./CoolCache\";\n\n/**\n * All the languages that information could be\n * displayed in\n */\nexport type Language =\n  | \"ja-Hrkt\"\n  | \"roomaji\"\n  | \"ko\"\n  | \"zh-Hant\"\n  | \"fr\"\n  | \"de\"\n  | \"es\"\n  | \"it\"\n  | \"en\"\n  | \"cs\"\n  | \"ja\"\n  | \"zh-Hans\"\n  | \"pt-BR\";\n\n/**\n * The Pokemon Cache contains all the information needed to display\n * and work with Pokemon data. When needed, objects are used instead\n * of arrays in order to decrease the time needed\n */\ninterface IPokemonCache {\n  id: string;\n  nationalDexNumber: number;\n  artworkUrl: string;\n  names: {\n    [lang in Language]: string;\n  };\n}\n\nconst PokemonCache = new CoolCache<IPokemonCache>(\n  \"pokemon\",\n  async (name: string) => {\n    // first, look up the Pokemon species and fetch the\n    // resource for its default variety\n    const species = await PokeAPI.PokemonSpecies.resolve(name);\n    const defaultForm = species.varieties.find(\n      (variety) => variety.is_default\n    ) as IPokemonSpeciesVariety;\n    const pokemon = await PokeAPI.Pokemon.resolve(defaultForm.pokemon.name);\n\n    // extract the ID, name, and artwork for the pokemon. Put it in a format\n    // that's faster to search than an array\n    const nationalDexNumber = pokemon.id;\n    const artworkUrl = pokemon.sprites.front_default;\n    const names = species.names.reduce((acc, cur) => {\n      acc[cur.language.name as Language] = cur.name;\n      return acc;\n    }, {} as { [lang in Language]: string });\n\n    return {\n      id: name,\n      nationalDexNumber,\n      artworkUrl,\n      names,\n    };\n  }\n);\n\n/**\n * The Game Cache contains all the information needed to get game-related\n * information\n */\ninterface IGameCache {\n  id: string;\n  generation: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokedex: string[];\n}\n\nconst GameCache = new CoolCache<IGameCache>(\"games\", async (title: string) => {\n  // get the game and the version group that game belongs to\n  const game = await PokeAPI.Version.resolve(title);\n  const group = await PokeAPI.VerionGroup.resolve(game.version_group.name);\n\n  // extract the ID, names, and pokedex and put it in a format\n  // that's faster to search than an array\n  const id = game.name;\n  const names = game.names.reduce((acc, cur) => {\n    acc[cur.language.name as Language] = cur.name;\n    return acc;\n  }, {} as { [lang in Language]: string });\n  const pokedex = group.pokedexes.map((dex) => dex.name);\n  const generation = group.generation.name;\n\n  return {\n    id,\n    names,\n    pokedex,\n    generation,\n  };\n});\n\n/**\n * The Pokedex cache is where we keep all pokedex info\n */\nconst makeNationalDex = memo(async (gen: string): Promise<IPokedexCache> => {\n  // first get all the pokedex in each generation\n  const generation = await PokeAPI.Generaition.resolve(gen);\n  const groupPromises = generation.version_groups.map((group) =>\n    PokeAPI.VerionGroup.resolve(group.name)\n  );\n  const groups = await Promise.all(groupPromises);\n  const dexPromises = groups.flatMap((group) =>\n    group.pokedexes.map((dex) => PokedexCache.get(dex.name))\n  );\n  const dexes = (await Promise.all(dexPromises)) as IPokedexCache[];\n\n  // create a set containing the names of each unique pokemon across\n  // all the dexes. This should cover scenarios like Sword and Shield,\n  // where not all pokemon are present.\n  const pokemonSet = new Set<string>();\n  dexes.forEach((dex) => {\n    dex.pokemon.forEach((poke) => {\n      pokemonSet.add(poke);\n    });\n  });\n\n  // we need to determine the order the pokemon should appear in, so\n  // let's get all of their data, put them in a lookup map, and sort\n  // them\n  const lookup = new Map<string, number>();\n  const pokePromises = Array.from(pokemonSet).map((poke) =>\n    PokemonCache.get(poke)\n  );\n  const pokeResults = await PromiseAllSettledChunk(pokePromises, 100);\n  const fulfilled = pokeResults.filter(\n    (r) => r.status === \"fulfilled\"\n  ) as PromiseFulfilledResult<IPokemonCache>[];\n  const pokes = fulfilled.map((r) => r.value);\n  pokes.forEach((poke) => {\n    lookup.set(poke.id, poke.nationalDexNumber);\n  });\n\n  // get the name of the National dex for the game\n  const nationalDex = (await PokedexCache.get(\"national\")) as IPokedexCache;\n\n  const names = nationalDex.names;\n  const pokemon = Array.from(pokemonSet).sort((a, b) => {\n    const aNum = lookup.get(a) as number;\n    const bNum = lookup.get(b) as number;\n    if (aNum > bNum) {\n      return 1;\n    } else if (aNum < bNum) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  const id = `national/${gen}`;\n\n  return {\n    names,\n    pokemon,\n    id,\n  };\n});\n\ninterface IPokedexCache {\n  id: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokemon: string[];\n}\n\nconst PokedexCache = new CoolCache<IPokedexCache>(\n  \"pokedex\",\n  async (name: string) => {\n    if (name.includes(\"national/\")) {\n      const [, gen] = name.split(\"/\");\n      const cache = makeNationalDex(gen);\n      return cache;\n    } else {\n      // get the pokedex\n      const dex = await PokeAPI.Pokedex.resolve(name);\n\n      // extract the ID, names, and pokemon and put it in a\n      // format  that's faster to search than an array\n      const id = dex.name;\n      const names = dex.names.reduce((acc, cur) => {\n        acc[cur.language.name as Language] = cur.name;\n        return acc;\n      }, {} as { [lang in Language]: string });\n      /**\n       * @NOTE this is a little complicated. What we're doing here\n       * is creating list of pokemon sorted by the pokedex order,\n       * which involves several steps\n       */\n      const pokemonEntries = dex.pokemon_entries.map((entry) => ({\n        name: entry.pokemon_species.name,\n        num: entry.entry_number,\n      }));\n      pokemonEntries.sort((a, b) => {\n        if (a.num > b.num) {\n          return 1;\n        } else if (a.num < b.num) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      const pokemon = pokemonEntries.map((entry) => entry.name);\n\n      return {\n        id,\n        names,\n        pokemon,\n      };\n    }\n  }\n);\n\nexport interface PokeGeneration {\n  name: string;\n  id: number;\n}\n\n/**\n * Get info on all the pokemon\n */\n\nexport interface Pokemon {\n  id: string;\n  nationalDexNumber: number;\n  name: string;\n  artworkUrl: string;\n}\n\nconst getPokemonByPokedex = memo(\n  async (lang: Language, dexName: string): Promise<Pokemon[]> => {\n    const dex = (await PokedexCache.get(dexName)) as IPokedexCache;\n    const pokemonPromises = dex.pokemon.map((poke) => PokemonCache.get(poke));\n    const pokemonCacheResults = await PromiseAllSettledChunk(\n      pokemonPromises,\n      50\n    );\n    const pokemonAccepted = pokemonCacheResults.filter(\n      (r) => r.status === \"fulfilled\" && !!r.value\n    ) as PromiseFulfilledResult<IPokemonCache>[];\n    const pokemonCached = pokemonAccepted.map((r) => r.value);\n    return pokemonCached.map((poke) => ({\n      id: poke.id,\n      name: poke.names[lang],\n      artworkUrl: poke.artworkUrl,\n      nationalDexNumber: poke.nationalDexNumber,\n    }));\n  }\n);\n\n/**\n * This is used to get a list of all the mainline Pokemon games\n */\nexport interface Game {\n  id: string;\n  name: string;\n  generation: string;\n  pokedex: string[];\n}\n\nconst getAllGames = memo(async (lang: Language): Promise<Game[]> => {\n  const gameResources = await PokeAPI.Version.listAll();\n  const gamePromises = gameResources.results.map((res) =>\n    GameCache.get(res.name)\n  );\n  const cachedGames = await Promise.all(gamePromises);\n  const filtered = cachedGames.filter((game) => !!game) as IGameCache[];\n  return (\n    filtered\n      // just filter out games without pokedexes because this won't work otherwise.\n      // seems to be a problem for XD and Colosseum\n      .filter((game) => game.pokedex.length > 0)\n      // filtering out games without a name array because this won't work otherwise.\n      // seems to be a problem for Let's Go and Sword & Shield\n      .filter((game) => Object.keys(game.names).length > 0)\n      .map((cache) => ({\n        id: cache.id,\n        name: cache.names[lang],\n        generation: cache.generation,\n        pokedex: cache.pokedex,\n      }))\n  );\n});\n\n/**\n * This is used to get a list of Pokedexes for each game.\n */\nexport interface Pokedex {\n  id: string;\n  name: string;\n  pokemon: string[];\n}\n\nconst getPokedexByGame = memo(async (lang: Language, gameName: string): Promise<\n  Pokedex[]\n> => {\n  const game = (await GameCache.get(gameName)) as IGameCache;\n  const dexNames = game.pokedex;\n  const dexPromises = dexNames.map((name) => PokedexCache.get(name));\n  const cachedDexes = await Promise.all(dexPromises);\n  const filtered = cachedDexes.filter((dex) => !!dex) as IPokedexCache[];\n  const basePokedexes = filtered.map((cache) => ({\n    id: cache.id,\n    name: cache.names[lang],\n    pokemon: cache.pokemon,\n  }));\n\n  const nationalDexCache = await makeNationalDex(game.generation);\n  const nationalDex = {\n    name: nationalDexCache.names[lang],\n    id: nationalDexCache.id,\n    pokemon: nationalDexCache.pokemon,\n  };\n\n  return [nationalDex, ...basePokedexes];\n});\n\n/**\n * A wrapper around all of these functions which automatically sets\n * the correct language. Maybe other things in the future\n */\ninterface Options {\n  lang: Language;\n}\n\nexport class PokeGetter {\n  private language: Language;\n\n  constructor({ lang = \"en\" }: Options) {\n    this.language = lang;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await getAllGames(this.language);\n  }\n\n  async getPokedexByGame(game: Game): Promise<Pokedex[]> {\n    return await getPokedexByGame(this.language, game.id);\n  }\n\n  async getPokemonByPokedex(dex: Pokedex): Promise<Pokemon[]> {\n    return await getPokemonByPokedex(this.language, dex.id);\n  }\n}\n","/**\n * A context that provides a wrapper aound the PokeGetter\n * so that we don't have to reinitialize it everywhere\n */\n\nimport { createContext, useState, useEffect, ReactNode } from \"react\";\nimport { PokeGetter, Language } from \"./utils/pokeGetter\";\n\nconst initialGetter = new PokeGetter({ lang: \"en\" });\n\nexport const PokeGetterContext = createContext<PokeGetter>(initialGetter);\n\ninterface Props {\n  children: ReactNode;\n  lang: Language;\n}\n\nexport function PokeGetterProvider(props: Props) {\n  const [getter, setGetter] = useState(new PokeGetter({ lang: props.lang }));\n\n  useEffect(() => {\n    setGetter(new PokeGetter({ lang: props.lang }));\n  }, [props.lang]);\n\n  return (\n    <PokeGetterContext.Provider value={getter}>\n      {props.children}\n    </PokeGetterContext.Provider>\n  );\n}\n","/**\n * This file is responsible for creating a PeerJS client\n */\nimport { createContext, useContext, ReactNode } from \"react\";\nimport PeerJS from \"peerjs\";\n\n// This is the base Provider. It assumes you have a PeerJS instance\n// already initialized\n\nconst PeerJSContext = createContext<null | PeerJS>(null);\n\nexport function usePeerJS(): PeerJS {\n  const peer = useContext(PeerJSContext);\n  if (!peer) {\n    throw new Error(\"usePeerJS must be used within a PeerJSProvider\");\n  }\n  return peer;\n}\n\ninterface Props {\n  children: ReactNode;\n  peer: PeerJS;\n}\n\nexport function PeerJSProvider({ children, peer }: Props) {\n  return (\n    <PeerJSContext.Provider value={peer}>{children}</PeerJSContext.Provider>\n  );\n}\n\n// This is an async used to initialize PeerJS\n\nexport async function initializePeerJS(): Promise<PeerJS> {\n  return new Promise((resolve, reject) => {\n    const peer = new PeerJS();\n    peer.on(\"open\", () => {\n      resolve(peer);\n    });\n    peer.on(\"error\", (err) => {\n      reject(err);\n    });\n  });\n}\n","/**\n * I just want to use objects for Select values. Is that so\n * much to ask for???\n *\n * @METEORCITY_CANDIDATE\n * - Need to make this entirely hook-based, so it isn't dependent on\n *   any particular UI theme\n * - Probably need to figure out that change event type\n */\n\nimport { Select, FormControl, InputLabel, MenuItem } from \"@material-ui/core\";\n\ninterface Props<DataType> {\n  // these are all things that will be passed to the UI elements\n  id: string;\n  label: string;\n  fullWidth?: boolean;\n\n  // these are all things for interacting with complex data\n  data: DataType[];\n  getDisplayValue: (data: DataType) => string;\n  getKeyValue: (data: DataType) => string | number;\n  getValue: (data: DataType) => string | number;\n  onChange: (data: DataType) => void;\n  value: DataType;\n}\n\nexport function BetterSelect<DataType extends object>(props: Props<DataType>) {\n  const stuffLookup = new Map<string | number, DataType>();\n  props.data.forEach((d) => {\n    stuffLookup.set(props.getValue(d), d);\n  });\n\n  /**\n   * @NOTE - this is bleh but the type for the Select component's\n   * onChange function is stupid and I don't want to replicate it.\n   * There'll be a value, so who cares\n   *\n   * ~reccanti 6/20/2021\n   */\n  const handleChange = (event: any) => {\n    const value = event.target.value;\n    const trueValue = stuffLookup.get(value) as DataType;\n    props.onChange(trueValue);\n  };\n\n  return (\n    <FormControl fullWidth={props.fullWidth ?? false}>\n      <InputLabel htmlFor={props.id}>{props.label}</InputLabel>\n      <Select\n        id={props.id}\n        value={props.getValue(props.value)}\n        onChange={handleChange}\n      >\n        {props.data.map((d) => (\n          <MenuItem key={props.getKeyValue(d)} value={props.getValue(d)}>\n            {props.getDisplayValue(d)}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n\nconst useBoardContainerStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100vh\",\n    overflow: \"scroll\",\n  },\n});\n\ninterface BoardContainerProps {\n  children: ReactNode;\n}\n\nexport function BoardContainer({ children }: BoardContainerProps) {\n  const styles = useBoardContainerStyles();\n  return <ScrollContainer className={styles.root}>{children}</ScrollContainer>;\n}\n","import { useState, useContext, ChangeEvent, FormEvent } from \"react\";\nimport {\n  makeStyles,\n  Container,\n  Paper,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\n\n/**\n * This is a sub-page of the landing page. Here, we ask the user to\n * select a username before either creating their board or joining\n * someone at a particular instance.\n *\n * @TODO - right now, we only allow the user to create a new board.\n * Users will be able to join directly using a URL provided by the\n * other player once their board is created.\n *\n * ~reccanti 6/20/2021\n */\nconst useCreateStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    margin: \"1rem\",\n    \"& *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\ninterface FormState {\n  name: string;\n}\n\ninterface CreateUserProps {\n  onNameChange?: (name: string) => void;\n  onSubmit?: (data: { name: string }) => void;\n}\n\nexport function CreateUser(props: CreateUserProps) {\n  const styles = useCreateStyles();\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const [state, setState] = useState<FormState>({ name: \"\" });\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (props.onNameChange) {\n      props.onNameChange(event.target.value);\n    }\n    setState({\n      ...state,\n      name: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (props.onSubmit) {\n      props.onSubmit({ name: state.name });\n    }\n    dispatch({ type: \"setUser\", payload: { name: state.name } });\n    dispatch({\n      type: \"setBoardName\",\n      payload: { name: `${state.name}'s board` },\n    });\n  };\n\n  return (\n    <Container fixed maxWidth=\"sm\">\n      <Paper className={styles.root}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Display Name\"\n            onChange={handleNameChange}\n            value={state.name}\n            fullWidth\n          />\n          <Button type=\"submit\" fullWidth>\n            Get Started\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n","/**\n * This is a cool WebRTC Database. Basically, if you have\n * a state you want to maintain across multiple clients, you\n * can use this to handle updates\n *\n * @METEORCITY_CANDIDATE\n */\nimport PeerJS, { DataConnection } from \"peerjs\";\nimport base64 from \"base-64\";\n\ninterface Conn {\n  // this should be calculated using new Date().getTime()\n  lastUpdated: null | number;\n  connection: DataConnection;\n}\n\n// Diff stuff\n\ninterface Diff<Data extends object, Action extends object> {\n  id: string; // base64-encoded string identifying this particular diff\n  timestamp: number; // when was this update applied\n  author: string; // PeerID of the user who made this update\n  action: Action; // the action to apply\n  prevState: Data; // what was the state when this action was requested\n}\n\nfunction sortDiffLeastToGreatest<\n  Data extends object,\n  Action extends object,\n  D extends Diff<Data, Action> = Diff<Data, Action>\n>(a: D, b: D) {\n  if (a.timestamp < b.timestamp) {\n    return -1;\n  } else if (a.timestamp > b.timestamp) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\n// function sortDiffGreatestToLeast<\n//   Data extends object,\n//   Action extends object,\n//   D extends Diff<Data, Action> = Diff<Data, Action>\n// >(a: D, b: D) {\n//   if (a.timestamp < b.timestamp) {\n//     return 1;\n//   } else if (a.timestamp > b.timestamp) {\n//     return -1;\n//   } else {\n//     return 0;\n//   }\n// }\n\ninterface BaseDBMessage {\n  type: string;\n}\n\ninterface SendUpdate<Data extends object, Action extends object>\n  extends BaseDBMessage {\n  type: \"sendUpdate\";\n  updates: Diff<Data, Action>[];\n}\n\ninterface SendInternals<Data extends object, Action extends object> {\n  type: \"sendInternals\";\n  connectionIDs: string[];\n  diffStack: Diff<Data, Action>[];\n}\n\ninterface RequestInternals {\n  type: \"requestInternals\";\n}\n\ninterface SendConnections {\n  type: \"sendConnections\";\n  connections: string[];\n}\n\ntype Message<Data extends object, Action extends object> =\n  | SendUpdate<Data, Action>\n  | SendInternals<Data, Action>\n  | RequestInternals\n  | SendConnections;\n\ntype OnConnectCB = (conn: Conn) => void;\ntype OnDisconnectCB = (conn: Conn) => void;\ntype OnChangeCB<Data extends object> = (data: Data) => void;\n\nexport class WebRTCDatabase<Data extends object, Action extends object> {\n  private peer: PeerJS;\n  private state: Data = {} as Data;\n  private connections: Map<string, Conn> = new Map();\n  private diffStack: Diff<Data, Action>[] = [];\n  private diffLookup: Set<string> = new Set();\n  private reducer: (data: Data, action: Action) => Data;\n\n  private onConnectCallbacks: Set<OnConnectCB> = new Set();\n  private onDisconnectCallbacks: Set<OnDisconnectCB> = new Set();\n  private onChangeCallbacks: Set<OnChangeCB<Data>> = new Set();\n\n  public get id(): string {\n    return this.peer.id;\n  }\n\n  constructor(\n    initialState: Data,\n    reducer: (data: Data, action: Action) => Data,\n    peer: PeerJS = new PeerJS()\n  ) {\n    this.peer = peer;\n    this.peer.on(\"connection\", (conn) => {\n      this.setupConnection(conn);\n    });\n    this.reducer = reducer;\n    this.setState(initialState);\n  }\n\n  /**\n   * A function for managing state updates, so we can make sure\n   * we're grouping all necessary procedures\n   */\n  private setState(state: Data) {\n    this.state = state;\n    this.onChangeCallbacks.forEach((cb) => {\n      cb(state);\n    });\n  }\n\n  /**\n   * this is a utility function so that we can share logic for\n   * setting up connections\n   */\n  private async setupConnection(conn: DataConnection): Promise<Conn> {\n    return new Promise<Conn>((resolve, reject) => {\n      // setup listeners\n      conn.on(\"data\", async (data) => {\n        await this.setupMessageListener(\n          conn.peer,\n          data as Message<Data, Action>\n        );\n      });\n      conn.on(\"error\", (err) => {\n        reject(err);\n      });\n      conn.on(\"close\", () => {\n        console.log(`See ya ${conn.peer}`);\n        const fullConn = this.connections.get(conn.peer) as Conn;\n        this.onDisconnectCallbacks.forEach((cb) => {\n          cb(fullConn);\n        });\n        this.connections.delete(conn.peer);\n      });\n\n      // add this to our list of connections\n      const fullConn = {\n        lastUpdated: null,\n        connection: conn,\n      };\n      this.connections.set(conn.peer, fullConn);\n      this.onConnectCallbacks.forEach((cb) => {\n        cb(fullConn);\n      });\n      resolve(fullConn);\n    });\n  }\n\n  private async setupMessageListener(\n    id: string,\n    message: Message<Data, Action>\n  ) {\n    switch (message.type) {\n      case \"sendUpdate\": {\n        // this should be an array of diffs in chronological order\n        const diffs = message.updates;\n\n        // filter out diffs that already exist\n        const filtered = diffs.filter((diff) => !this.diffLookup.has(diff.id));\n\n        if (filtered.length > 0) {\n          // add these new diffs to the lookup\n          filtered.forEach((diff) => {\n            this.diffLookup.add(diff.id);\n          });\n\n          // apply only the \"new\" diffs\n          this.applyDiffs(filtered);\n        }\n        break;\n      }\n      case \"requestInternals\": {\n        if (this.connections.has(id)) {\n          const conn = this.connections.get(id) as Conn;\n          const connectionIDs = Array.from(this.connections.keys());\n          const diffStack = this.diffStack;\n          this.message(conn, {\n            type: \"sendInternals\",\n            connectionIDs,\n            diffStack,\n          });\n        }\n        break;\n      }\n      case \"sendInternals\": {\n        // connect to all the ids passed\n        const connectPromises = message.connectionIDs\n          .filter((id) => id !== this.id)\n          .map((id) => this.connect(id));\n        await Promise.all(connectPromises);\n\n        // update the state\n        this.applyDiffs(message.diffStack);\n        message.diffStack.forEach((diff) => {\n          this.diffLookup.add(diff.id);\n        });\n        break;\n      }\n      case \"sendConnections\": {\n        const connPromises = message.connections\n          .filter((id) => !this.connections.has(id))\n          .map((id) => this.connect(id));\n        await Promise.all(connPromises);\n      }\n    }\n  }\n\n  /**\n   * Utility function for getting the diffs to apply if\n   * there are no diffs in the diff stack. Used as part of\n   * `applyDiffs`\n   */\n  private getDiffsToApplyEmpty(\n    diffs: Diff<Data, Action>[]\n  ): Diff<Data, Action>[] {\n    return diffs.sort(sortDiffLeastToGreatest);\n  }\n\n  /**\n   * Utility function for getting diffs if there is at least\n   * one diff in the diff stack. Used as part of `applyDiffs`\n   */\n  private getDiffsToApplyMany(\n    diffs: Diff<Data, Action>[]\n  ): Diff<Data, Action>[] {\n    // first sort the diffs we want to apply in order of\n    // least-recent-to-most-recent. This way, when we start\n    // reconstructing the diffStack, we only have to rewind\n    // the state in one big update method, rather than for\n    // each diff\n    diffs.sort(sortDiffLeastToGreatest);\n\n    // here we construct a list of diffs to apply. We take the head\n    // of the sorted diffs and pop off diffs in the stack until we\n    // find an entry with a timestamp that's less than the head.\n    // Once we have that base list, we can add the rest of our\n    // timestamps and sort them from least to greatest\n    const [head, ...rest] = diffs;\n    const diffsToApply: Diff<Data, Action>[] = [];\n    while (\n      this.diffStack.length > 0 &&\n      this.diffStack[0].timestamp > head.timestamp\n    ) {\n      const entry = this.diffStack.shift() as Diff<Data, Action>;\n      /**\n       * @TODO - Maybe find a safer way to do this that doesn't involve\n       * mutating state within this function? A better solution may be\n       * to create a \"getRewoundState\" method that finds the state\n       * before a given timestamp\n       *\n       * ~reccanti 7/5/2021\n       */\n      this.state = entry.prevState;\n      diffsToApply.push(entry);\n    }\n    diffsToApply.push(head);\n\n    const sortedDiffsToApply = diffsToApply\n      .concat(...rest)\n      .sort(sortDiffLeastToGreatest);\n\n    return sortedDiffsToApply;\n  }\n\n  /**\n   * In the event that we get a batch of diffs that occurred\n   * out-of-order, this function figures out how to reverse\n   * the state and apply diffs sequentially\n   */\n  private applyDiffs(diffs: Diff<Data, Action>[]) {\n    // const filtered = diffs.filter((diff) => !this.diffLookup.has(diff.id));\n\n    // get the number of diffs we need to apply to the diff stack\n    let diffsToApply: Diff<Data, Action>[] = [];\n    if (this.diffStack.length === 0) {\n      diffsToApply = this.getDiffsToApplyEmpty(diffs);\n    } else {\n      diffsToApply = this.getDiffsToApplyMany(diffs);\n    }\n\n    // now that we have a list of diffs to apply:\n    // 1. cycle through them and apply the action to the reducer\n    // 2. add the diff back to the diffStack\n    let prevState = this.getState();\n\n    diffsToApply.forEach((diff) => {\n      diff.prevState = prevState;\n      prevState = this.reducer(prevState, diff.action);\n      this.diffStack.unshift(diff);\n    });\n\n    this.setState(prevState);\n  }\n\n  /**\n   * Utility function to get all the diffs since\n   * a specific timestamp\n   */\n  private getAllDiffsSince(timestamp: number): Diff<Data, Action>[] {\n    if (this.diffStack.length === 0) {\n      return [];\n    }\n    const diffs: Diff<Data, Action>[] = [];\n    let [cur, ...rest] = this.diffStack;\n    while (cur.timestamp > timestamp) {\n      diffs.push(cur);\n      [cur, ...rest] = rest;\n    }\n    return diffs;\n  }\n\n  /**\n   * Figure out what diffs need to be applied to all\n   * the connections\n   */\n  private syncConnections() {\n    this.connections.forEach((conn) => {\n      let diffs: Diff<Data, Action>[] = [];\n      if (conn.lastUpdated) {\n        diffs = this.getAllDiffsSince(conn.lastUpdated);\n      } else {\n        diffs = [...this.diffStack].reverse();\n      }\n      this.message(conn, { type: \"sendUpdate\", updates: diffs });\n    });\n  }\n\n  /**\n   * Just a utility function to handle messaging connections\n   */\n  private message(conn: Conn, message: Message<Data, Action>) {\n    conn.lastUpdated = new Date().getTime();\n    conn.connection.send(message);\n  }\n\n  /**\n   * Connect to a database with a given Peer ID\n   */\n  async connect(id: string): Promise<Conn> {\n    return new Promise<Conn>((resolve, reject) => {\n      const conn = this.peer.connect(id);\n      conn.on(\"open\", async () => {\n        const fullConn = await this.setupConnection(conn);\n        // let all the other connections know that there's a new\n        // connection that's been added\n        const allConns = Array.from(this.connections.keys());\n        this.connections.forEach((conn) => {\n          this.message(conn, {\n            type: \"sendConnections\",\n            connections: allConns,\n          });\n        });\n        resolve(fullConn);\n      });\n      conn.on(\"error\", (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Given a database with a simlar configuration, this will\n   * fetch the state from an external database and copy it to\n   * this database\n   */\n  async clone(id: string) {\n    const conn = await this.connect(id);\n    this.message(conn, { type: \"requestInternals\" });\n  }\n\n  /**\n   * Update the state with an action, store the diff,\n   * and update connected databases\n   */\n  update(action: Action) {\n    // construct the necessary fields\n    const timestamp = new Date().getTime();\n    const author = this.peer.id;\n    const prevState = this.getState();\n    const id = base64.encode(\n      JSON.stringify({\n        timestamp,\n        author,\n        action,\n      })\n    );\n\n    // construct the diff\n    const diff: Diff<Data, Action> = {\n      id,\n      timestamp,\n      author,\n      action,\n      prevState,\n    };\n\n    // add constructed diff to IDs\n    this.diffLookup.add(id);\n\n    // apply the diff to the state\n    this.applyDiffs([diff]);\n\n    // sync states of other databases\n    this.syncConnections();\n  }\n\n  /**\n   * Get the state of the database\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Functions for managing calbacks\n   */\n  registerOnConnect(cb: OnConnectCB) {\n    this.onConnectCallbacks.add(cb);\n  }\n  removeOnConnect(cb: OnConnectCB) {\n    this.onConnectCallbacks.delete(cb);\n  }\n  registerOnDisconnect(cb: OnDisconnectCB) {\n    this.onDisconnectCallbacks.add(cb);\n  }\n  removeOnDisconnect(cb: OnDisconnectCB) {\n    this.onDisconnectCallbacks.delete(cb);\n  }\n  registerOnChange(cb: OnChangeCB<Data>) {\n    this.onChangeCallbacks.add(cb);\n  }\n  removeOnChange(cb: OnChangeCB<Data>) {\n    this.onChangeCallbacks.delete(cb);\n  }\n}\n","import PeerJS from \"peerjs\";\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { WebRTCDatabase } from \"./utils/WebRTCDatabase\";\nimport { useContext } from \"react\";\n\ninterface Player {\n  id: string;\n  name: string;\n}\n\n// state\n\ninterface State {\n  players: [] | [Player] | [Player, Player];\n  waiting: Player[];\n}\n\n// actions\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface Join extends BaseAction {\n  type: \"join\";\n  player: Player;\n}\n\ninterface Leave extends BaseAction {\n  type: \"leave\";\n  id: string;\n}\n\ninterface Ready extends BaseAction {\n  type: \"ready\";\n  player: Player;\n}\n\ninterface NotReady extends BaseAction {\n  type: \"notReady\";\n  player: Player;\n}\n\ntype Action = Join | Leave | Ready | NotReady;\n\n// DB Type\n\nexport type SharedData = WebRTCDatabase<State, Action>;\n\n// reducer\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"join\": {\n      return {\n        ...state,\n        waiting: [...state.waiting, action.player],\n      };\n    }\n    case \"leave\": {\n      return {\n        ...state,\n        waiting: state.waiting.filter((w) => w.id !== action.id),\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// function to create the database\n\nexport function initializeSharedData(peer: PeerJS): SharedData {\n  const initialState: State = {\n    players: [],\n    waiting: [],\n  };\n  const db = new WebRTCDatabase(initialState, reducer, peer);\n  return db;\n}\n\n// Base SharedDataContext\n\nconst SharedDataContext = createContext<null | SharedData>(null);\n\ninterface SharedDataInterface {\n  // methods for interacting with data\n  join: (player: Player) => void;\n  leave: (id: string) => void;\n  ready: (player: Player) => void;\n  notReady: (player: Player) => void;\n\n  // state\n  state: State;\n\n  // connection\n  clone: (id: string) => Promise<void>;\n}\n\nfunction useBaseSharedData(): SharedData {\n  const db = useContext(SharedDataContext);\n  if (!db) {\n    throw new Error(\"useSharedData must be used within a SharedDataProvider\");\n  }\n  return db;\n}\n\nexport function useSharedData(): SharedDataInterface {\n  const db = useBaseSharedData();\n\n  // handle state changes\n  const [state, setState] = useState<State>(db.getState());\n  useEffect(() => {\n    function handleChange(state: State) {\n      setState(state);\n    }\n    db.registerOnChange(handleChange);\n    return () => db.removeOnChange(handleChange);\n  }, [db]);\n\n  // helpful callbacks\n  const join = useCallback(\n    (player: Player) => {\n      db.update({ type: \"join\", player });\n    },\n    [db]\n  );\n\n  const leave = useCallback(\n    (id: string) => {\n      db.update({ type: \"leave\", id });\n    },\n    [db]\n  );\n\n  const ready = useCallback(\n    (player: Player) => {\n      db.update({ type: \"ready\", player });\n    },\n    [db]\n  );\n\n  const notReady = useCallback(\n    (player: Player) => {\n      db.update({ type: \"notReady\", player });\n    },\n    [db]\n  );\n\n  const clone = useCallback(\n    async (id: string) => {\n      await db.clone(id);\n    },\n    [db]\n  );\n\n  // automatically leave on Disconnect\n  useEffect(() => {\n    const handleDisconnect: Parameters<typeof db.registerOnDisconnect>[0] = (\n      conn\n    ) => {\n      leave(conn.connection.peer);\n    };\n    db.registerOnDisconnect(handleDisconnect);\n    return () => db.removeOnDisconnect(handleDisconnect);\n  }, [db, leave]);\n\n  return {\n    state,\n    join,\n    leave,\n    ready,\n    notReady,\n    clone,\n  };\n}\n\ninterface Props {\n  children: ReactNode;\n  db: SharedData;\n}\n\nexport function SharedDataProvider({ children, db }: Props) {\n  return (\n    <SharedDataContext.Provider value={db}>\n      {children}\n    </SharedDataContext.Provider>\n  );\n}\n","/**\n * This is the landing page for the application. This is where the\n * user sets their username and launches their instance. I'm modeling\n * it basically on the landing screen for https://skribbl.io/ since\n * I think it does a really good job!\n */\n\nimport {\n  Paper,\n  TextField,\n  Button,\n  makeStyles,\n  FormControl,\n  Input,\n  InputLabel,\n  Grid,\n} from \"@material-ui/core\";\nimport { useContext, useState, ChangeEvent, FormEvent, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { usePeerJS } from \"./PeerJSContext\";\nimport { PokeGetterContext } from \"./PokeGetterContext\";\nimport { Game, Pokedex, Pokemon } from \"./utils/pokeGetter\";\nimport { BetterSelect } from \"./utils/BetterSelect\";\nimport { BoardContainer, Board, Cell } from \"./Board\";\nimport { CreateUser } from \"./CreateUserPage\";\nimport { useSharedData } from \"./SharedData\";\n\n/**\n * This is where we'll set up the board for an upcoming game.\n *\n * @TODO - This thing is doing so much. It's really bad. A good\n * first step would be moving this to it's own page. Later,\n * it might be a good idea to break out some of the state\n * management into hooks\n *\n * ~reccanti 6/28/2021\n */\n\nconst useBoardStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    maxWidth: \"350px\",\n    margin: \"1rem\",\n    \"& form > *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n  image: {\n    pointerEvents: \"none\",\n  },\n});\n\n// container component for managing board state. Makes sure\n// PeerJS is initialized and manages state for the Board\nfunction BoardSetupManager() {\n  // hooks\n\n  const [games, setGames] = useState<Game[]>([]);\n  const [dexes, setDexes] = useState<Pokedex[]>([]);\n  const { state, dispatch } = useContext(AllTheFuckingStateCtx);\n  const getter = useContext(PokeGetterContext);\n\n  const history = useHistory();\n\n  const peer = usePeerJS();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const games = await getter.getAllGames();\n      setGames(games);\n    };\n    fetch();\n  }, [getter]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const dexes = await getter.getPokedexByGame(state.board.game);\n      setDexes(dexes);\n    };\n    fetch();\n  }, [getter, dispatch, state.board.game]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const pokemon = await getter.getPokemonByPokedex(state.board.pokedex);\n      dispatch({ type: \"setBoardPokemon\", payload: pokemon });\n    };\n    fetch();\n  }, [getter, dispatch, state.board.pokedex]);\n\n  // If PeerJS is ready, initialize all the handler functions,\n  // setup state management, and render the board\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const name = event.target.value;\n    dispatch({ type: \"setBoardName\", payload: { name } });\n  };\n\n  const handleColumnChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const columns = Number(event.target.value);\n    dispatch({ type: \"setBoardColumns\", payload: { columns } });\n  };\n\n  const handleGameChange = (game: Game) => {\n    dispatch({ type: \"setBoardGame\", payload: game });\n  };\n\n  const handlePokedexChange = (dex: Pokedex) => {\n    dispatch({ type: \"setBoardPokedex\", payload: dex });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (peer.id) {\n      history.push(`/${peer.id}`);\n    }\n  };\n\n  // fetch state\n  return (\n    <BoardSetup\n      curName={state.board.name}\n      curColumn={state.board.columns}\n      curGame={state.board.game}\n      curPokedex={state.board.pokedex}\n      curPokemon={state.board.pokemon}\n      games={games}\n      pokedex={dexes}\n      onNameChange={handleNameChange}\n      onColumnChange={handleColumnChange}\n      onGameChange={handleGameChange}\n      onPokedexChange={handlePokedexChange}\n      onSubmit={handleSubmit}\n    />\n  );\n}\n\n/**\n * @TODO - After writing this type definition, I realized that it would\n * probably be better to break these up into individual \"presentation\"\n * components that could better handle the abstracting-away the DOM\n * events and would make it so that we don't have to create a million\n * \"onTypeChange\" props. I think it still makes sense to handle  state\n * and composition in a single component, since that would allow us to\n * better coordinate asynchronous data\n *\n * ~reccanti 7/3/2021\n */\ninterface BoardSetupProps {\n  curName: string;\n  curColumn: number;\n  curGame: Game;\n  curPokedex: Pokedex;\n  games: Game[];\n  pokedex: Pokedex[];\n  curPokemon: Pokemon[];\n  onNameChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onColumnChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onGameChange: (game: Game) => void;\n  onPokedexChange: (dex: Pokedex) => void;\n  onSubmit: (event: FormEvent<HTMLFormElement>) => void;\n}\nfunction BoardSetup(props: BoardSetupProps) {\n  const styles = useBoardStyles();\n\n  // render\n\n  return (\n    <Grid container>\n      <Grid container item xs={2}>\n        <Paper className={styles.root}>\n          <form onSubmit={props.onSubmit}>\n            <TextField\n              fullWidth\n              label=\"Board Name\"\n              onChange={props.onNameChange}\n              value={props.curName}\n            />\n            <FormControl fullWidth>\n              <InputLabel htmlFor=\"column-input\">Columns</InputLabel>\n              <Input\n                id=\"column-input\"\n                type=\"number\"\n                onChange={props.onColumnChange}\n                value={props.curColumn}\n              />\n            </FormControl>\n            <BetterSelect\n              id=\"game-select\"\n              label=\"Game\"\n              fullWidth\n              data={props.games}\n              value={props.curGame}\n              getDisplayValue={(d) => d.name}\n              getKeyValue={(d) => d.id}\n              getValue={(d) => d.id}\n              onChange={props.onGameChange}\n            />\n            <BetterSelect\n              id=\"pokedex-select\"\n              label=\"Pokedex\"\n              fullWidth\n              data={props.pokedex}\n              value={props.curPokedex}\n              getDisplayValue={(d) => d.name}\n              getKeyValue={(d) => d.id}\n              getValue={(d) => d.id}\n              onChange={props.onPokedexChange}\n            />\n            <Button type=\"submit\" fullWidth>\n              Get Started!\n            </Button>\n          </form>\n        </Paper>\n      </Grid>\n      <Grid container item xs={10}>\n        <BoardContainer>\n          <Board\n            columns={props.curColumn}\n            items={props.curPokemon}\n            renderCell={(item) => (\n              <Cell key={item.name} variant=\"unknown\">\n                <img\n                  className={styles.image}\n                  src={item.artworkUrl}\n                  alt={item.name}\n                />\n              </Cell>\n            )}\n          />\n        </BoardContainer>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport function LandingPage() {\n  const { state } = useContext(AllTheFuckingStateCtx);\n  const peer = usePeerJS();\n  const { join } = useSharedData();\n\n  const handleSubmit = ({ name }: { name: string }) => {\n    const player = {\n      name,\n      id: peer.id,\n    };\n    join(player);\n  };\n\n  if (state.user) {\n    return <BoardSetupManager />;\n  }\n  return <CreateUser onSubmit={handleSubmit} />;\n}\n","import {\n  Box,\n  Container,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  makeStyles,\n  Grid,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { AllTheFuckingStateCtx } from \"./AllTheFuckingState\";\nimport { CreateUser } from \"./CreateUserPage\";\nimport { usePeerJS } from \"./PeerJSContext\";\nimport { useSharedData } from \"./SharedData\";\n\n/**\n * The lobby page where the user can join a page\n */\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    \"& > *:not(:first-child)\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginLeft: theme.spacing(4),\n  },\n  cardGrid: {\n    marginTop: theme.spacing(2),\n  },\n  card: {\n    width: \"100%\",\n  },\n}));\n\nfunction JoinPage() {\n  const styles = useStyles();\n  const { state } = useSharedData();\n\n  return (\n    <Container className={styles.root}>\n      {/* Section for adding Players */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Players\n          </Typography>\n          <Button\n            className={styles.button}\n            color=\"primary\"\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n          >\n            Join\n          </Button>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          <Grid container item xs={2}>\n            <Card className={styles.card}>\n              <CardContent>Testing...</CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      {/*\n       * Section for people hanging out. This is to ensure we're\n       * connecting through PeerJS\n       */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Hanging Out\n          </Typography>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          {state.waiting.map((player) => (\n            // This is a bad key. Store better info in the User\n            <Grid key={player.id} container item xs={2}>\n              <Card className={styles.card}>\n                <CardContent>{player.name}</CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n      {/* Ready Button */}\n      <Box>\n        <Button fullWidth variant=\"contained\" color=\"primary\">\n          Start Game\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport function LobbyPage() {\n  const [isReady, setIsReady] = useState<boolean>(false);\n\n  const peer = usePeerJS();\n  const { join, clone } = useSharedData();\n  const { state } = useContext(AllTheFuckingStateCtx);\n  const { peer_id } = useParams<{ peer_id: string }>();\n\n  useEffect(() => {\n    async function listen() {\n      if (peer.id !== peer_id) {\n        await clone(peer_id);\n      }\n      setIsReady(true);\n    }\n    listen();\n    return () => setIsReady(false);\n  }, [peer_id, peer.id, clone]);\n\n  const handleSubmit = ({ name }: { name: string }) => {\n    const player = {\n      name,\n      id: peer.id,\n    };\n    join(player);\n  };\n\n  if (!isReady) {\n    return <CircularProgress />;\n  } else if (!state.user) {\n    return <CreateUser onSubmit={handleSubmit} />;\n  }\n  return <JoinPage />;\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport {\n  Toolbar,\n  AppBar,\n  IconButton,\n  Box,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport {\n  AllTheFuckingStateProvider,\n  AllTheFuckingStateCtx,\n} from \"./AllTheFuckingState\";\nimport { PokeGetterProvider } from \"./PokeGetterContext\";\nimport { LandingPage } from \"./LandingPage\";\nimport { LobbyPage } from \"./LobbyPage\";\nimport { PeerJSProvider, initializePeerJS } from \"./PeerJSContext\";\nimport { useContext, useState, useEffect } from \"react\";\nimport PeerJS from \"peerjs\";\nimport {\n  SharedData,\n  initializeSharedData,\n  SharedDataProvider,\n} from \"./SharedData\";\n\nfunction Debug() {\n  const { dispatch } = useContext(AllTheFuckingStateCtx);\n  const history = useHistory();\n\n  const handleClear = () => {\n    dispatch({ type: \"clear\" });\n    history.push(\"/\");\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton onClick={handleClear}>\n          <Home />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction App() {\n  const [peer, setPeer] = useState<PeerJS | null>(null);\n  const [sharedData, setSharedData] = useState<SharedData | null>(null);\n  const [err, setErr] = useState<Error | null>(null);\n\n  // initialize PeerJS\n  useEffect(() => {\n    const listen = async () => {\n      try {\n        const p = await initializePeerJS();\n        setPeer(p);\n      } catch (e) {\n        setErr(e);\n      }\n    };\n    listen();\n  }, []);\n\n  // initialize shared data\n  useEffect(() => {\n    if (!peer) {\n      return;\n    }\n    const listen = async () => {\n      try {\n        const db = initializeSharedData(peer);\n        setSharedData(db);\n      } catch (e) {\n        setErr(e);\n      }\n    };\n    listen();\n  }, [peer]);\n\n  if (peer && sharedData) {\n    return (\n      <PeerJSProvider peer={peer}>\n        <SharedDataProvider db={sharedData}>\n          <AllTheFuckingStateProvider>\n            <PokeGetterProvider lang=\"en\">\n              <Box>\n                {/**\n                 * @TODO - instead of hard-coding this, it might be better\n                 * to do some fancy logic to determine what the base-url\n                 * actually is. This way, localhost:3000/ and reccanti.github.io/ss-anne\n                 * would both work\n                 *\n                 * ~reccanti 6/22/2021\n                 */}\n                <Router basename=\"/ss-anne/\">\n                  <Debug />\n                  <Switch>\n                    <Route exact path=\"/\">\n                      <LandingPage />\n                    </Route>\n                    <Route exact path=\"/:peer_id\">\n                      <LobbyPage />\n                    </Route>\n                  </Switch>\n                </Router>\n              </Box>\n            </PokeGetterProvider>\n          </AllTheFuckingStateProvider>\n        </SharedDataProvider>\n      </PeerJSProvider>\n    );\n  } else if (err) {\n    return <>{err.message}</>;\n  } else {\n    return <CircularProgress />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\n// interface State {\n//   [name: string]: number;\n// }\n\n// interface BaseAction {\n//   type: string;\n// }\n\n// interface AddPerson extends BaseAction {\n//   type: \"addPerson\";\n//   payload: {\n//     name: string;\n//     age: number;\n//   };\n// }\n\n// interface RemovePerson extends BaseAction {\n//   type: \"removePerson\";\n//   payload: {\n//     name: string;\n//   };\n// }\n\n// interface EditAge extends BaseAction {\n//   type: \"editAge\";\n//   payload: {\n//     name: string;\n//     age: number;\n//   };\n// }\n\n// type Action = AddPerson | RemovePerson | EditAge;\n\n// function reducer(state: State, action: Action): State {\n//   switch (action.type) {\n//     case \"addPerson\": {\n//       return {\n//         ...state,\n//         [action.payload.name]: action.payload.age,\n//       };\n//     }\n//     case \"removePerson\": {\n//       const newState = { ...state };\n//       delete newState[action.payload.name];\n//       return newState;\n//     }\n//     case \"editAge\": {\n//       return {\n//         ...state,\n//         [action.payload.name]: action.payload.age,\n//       };\n//     }\n//   }\n//   return state;\n// }\n\n// // @ts-ignore\n// window.coolDB = new WebRTCDatabase<State, Action>({}, reducer);\n// // @ts-ignore\n// window.coolDB.registerOnChange((state) => {\n//   console.log(\"state changed\");\n//   console.log(state);\n// });\n\n// // @ts-ignore\n// window.addPerson = (name: string, age: number) => {\n//   // @ts-ignore\n//   window.coolDB.update({\n//     type: \"addPerson\",\n//     payload: {\n//       name,\n//       age,\n//     },\n//   });\n// };\n\n// // @ts-ignore\n// window.setupDB = () => {\n//   // @ts-ignore\n//   window.addPerson(\"Melissa\", 90);\n//   // @ts-ignore\n//   window.addPerson(\"Hasan\", 32);\n//   // @ts-ignore\n//   window.addPerson(\"Kartik\", 80);\n//   // @ts-ignore\n//   console.log(coolDB.id);\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}