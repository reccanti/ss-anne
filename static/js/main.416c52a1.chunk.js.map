{"version":3,"sources":["Board.tsx","utils/createCtx.tsx","utils/pokeFuncs.ts","SetupManager.tsx","WebRTCContext.tsx","App.tsx","reportWebVitals.ts","index.tsx","../node_modules/peerjs/dist sync"],"names":["useCellStyles","makeStyles","root","display","background","props","variant","teal","red","blueGrey","image","Cell","onClick","children","styles","className","useBoardStyles","gridTemplateColumns","columns","listStyle","padding","Board","items","renderCell","map","item","createCtx","ctx","createContext","undefined","c","useContext","Error","Provider","fetchPokemonByGeneration","gen","a","pokemonToFetch","cur","PokeAPI","Generaition","resolve","pokemon_species","forEach","pokemon","push","name","pokePromises","Pokemon","Promise","all","useCtx","useSetupContext","SetupProvider","useState","setupState","setSetupState","pokedex","setPokedex","generation","setGeneration","setPokemon","useEffect","genPromise","dexPromise","Pokedex","pokeOrderMap","Map","pokemon_entries","entry","set","entry_number","pokees","sort","b","aIndex","get","bIndex","fetchAllData","value","data","useWebRTCCtx","WebRTCProvider","peer","useRef","dataConn","openCbs","useMemo","Set","dataCbs","errorCbs","connectCbs","id","setId","p","PeerJS","on","onOpen","dataConnection","onConnect","onData","current","err","onError","addOnOpen","cb","add","addOnData","addOnConnect","addOnError","connect","send","StatefulCell","clicks","setClicks","console","log","Loader","pokee","src","sprites","front_default","alt","CircularProgress","Connector","setPeer","connection","Box","TextField","onChange","e","target","label","Button","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById","webpackEmptyContext","req","code","keys","module","exports"],"mappings":"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","file":"static/js/main.416c52a1.chunk.js","sourcesContent":["/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n","/**\n * Shamelessly stolen from this gist:\n *\n * https://gist.github.com/sw-yx/f18fe6dd4c43fddb3a4971e80114a052#file-createctx-nonullcheck-tsx\n */\n\nimport { useContext, createContext } from \"react\";\n\nexport function createCtx<A>() {\n  const ctx = createContext<A | undefined>(undefined);\n  function useCtx() {\n    const c = useContext(ctx);\n    if (!c) throw new Error(\"useCtx must be inside a Provider with a value\");\n    return c;\n  }\n  return [useCtx, ctx.Provider] as const;\n}\n","/**\n * Instead of making complicated pokeapi calls in React components,\n * let's group all that logic in this file so we have a cleaner API\n */\nimport PokeAPI, { IPokemon } from \"pokeapi-typescript\";\n\nexport async function fetchPokemonByGeneration(\n  gen: number\n  // options: {} = {}\n): Promise<IPokemon[]> {\n  const pokemonToFetch: string[] = [];\n  let cur = gen;\n  while (cur > 0) {\n    const generation = await PokeAPI.Generaition.resolve(cur);\n    generation.pokemon_species.forEach((pokemon) => {\n      pokemonToFetch.push(pokemon.name);\n    });\n    cur -= 1;\n  }\n  const pokePromises = pokemonToFetch.map((pokemon) =>\n    PokeAPI.Pokemon.resolve(pokemon)\n  );\n\n  const pokemon = await Promise.all(pokePromises);\n  return pokemon;\n}\n","import { useState, ReactNode, useEffect } from \"react\";\nimport PokeAPI, { IPokedex, IGeneration, IPokemon } from \"pokeapi-typescript\";\nimport { createCtx } from \"./utils/createCtx\";\nimport { fetchPokemonByGeneration } from \"./utils/pokeFuncs\";\n\ntype SetupState = \"loading\" | \"ready\";\n\ninterface State {\n  pokedex: IPokedex;\n  generation: IGeneration;\n  pokemon: IPokemon[];\n}\n\ninterface SetupContext {\n  setupState: SetupState;\n  data: State | null;\n}\n\nconst [useCtx, Provider] = createCtx<SetupContext>();\n\nexport const useSetupContext = useCtx;\n\ninterface Props {\n  children: ReactNode;\n}\n\n/**\n * Let's talk about the Board State! The Board State describes\n * the configuration of the \"board\" that battleship will be\n * played on (i.e. the arrangment of pokemon in a grid). Once the\n * board is setup, it gets passed along to be used in the Game State\n * (i.e. Where the ships are, what have been hit, and what's been guessed)\n */\n\n// interface LoadingState {\n//   state: \"loading\";\n// }\n\n// interface ReadyState {\n//   state: \"ready\";\n//   data: {\n//     pokedex: IPokedex;\n//     generation: IGeneration;\n//   };\n// }\n\n// type BoardState = LoadingState | ReadyState;\n\nexport function SetupProvider({ children }: Props) {\n  const [setupState, setSetupState] = useState<SetupState>(\"loading\");\n  const [pokedex, setPokedex] = useState<IPokedex | null>(null);\n  const [generation, setGeneration] = useState<IGeneration | null>(null);\n  const [pokemon, setPokemon] = useState<IPokemon[]>([]);\n\n  useEffect(() => {\n    const fetchAllData = async () => {\n      // fetch all the meta information\n      const genPromise = PokeAPI.Generaition.resolve(2);\n      const dexPromise = PokeAPI.Pokedex.resolve(\"national\");\n      const [generation, pokedex] = await Promise.all([genPromise, dexPromise]);\n      setPokedex(pokedex);\n      setGeneration(generation);\n\n      // fetch the pokemon and sort it according to the pokedex\n      const pokeOrderMap = new Map<string, number>();\n      pokedex.pokemon_entries.forEach((entry) => {\n        pokeOrderMap.set(entry.pokemon_species.name, entry.entry_number);\n      });\n\n      const pokees = await fetchPokemonByGeneration(2);\n\n      // const pokePromises = generation.pokemon_species.map((poke) =>\n      //   PokeAPI.Pokemon.resolve(poke.name)\n      // );\n      // const pokees = await Promise.all(pokePromises);\n      pokees.sort((a, b) => {\n        const aIndex = pokeOrderMap.get(a.name);\n        const bIndex = pokeOrderMap.get(b.name);\n        if (aIndex && bIndex) {\n          if (aIndex > bIndex) {\n            return 1;\n          } else if (aIndex < bIndex) {\n            return -1;\n          }\n        }\n        return 0;\n      });\n\n      setPokemon(pokees);\n      setSetupState(\"ready\");\n    };\n    fetchAllData();\n  }, []);\n\n  const value: SetupContext = {\n    setupState,\n    data: null,\n  };\n\n  if (pokedex && generation && pokemon) {\n    value.data = {\n      pokedex,\n      generation,\n      pokemon,\n    };\n  }\n\n  return <Provider value={value}>{children}</Provider>;\n}\n","/**\n * In this file, we'll handle all the things for connecting\n * and sending data using webrtc\n */\nimport { ReactNode, useEffect, useRef, useState, useMemo } from \"react\";\nimport PeerJS from \"peerjs\";\nimport { createCtx } from \"./utils/createCtx\";\n\ntype OnOpenCallback = (id: string) => void;\ntype OnConnectCallback = (dataConnection: PeerJS.DataConnection) => void;\ntype OnErrorCallback = (err: Error) => void;\ntype OnDataCallback = (data: any) => void;\n\ninterface WebRTCContext {\n  addOnOpen: (cb: OnOpenCallback) => void;\n  addOnConnect: (cb: OnConnectCallback) => void;\n  addOnError: (cb: OnErrorCallback) => void;\n  addOnData: (cb: OnDataCallback) => void;\n  connect: (id: string) => void;\n  send: (data: any) => void;\n  id: null | string;\n}\n\nconst [useCtx, Provider] = createCtx<WebRTCContext>();\n\nexport const useWebRTCCtx = useCtx;\n\ninterface Props {\n  children: ReactNode;\n}\nexport function WebRTCProvider({ children }: Props) {\n  const peer = useRef<null | PeerJS>(null);\n  const dataConn = useRef<null | PeerJS.DataConnection>(null);\n\n  const openCbs = useMemo(() => new Set<OnOpenCallback>(), []);\n  const dataCbs = useMemo(() => new Set<OnDataCallback>(), []);\n  const errorCbs = useMemo(() => new Set<OnErrorCallback>(), []);\n  const connectCbs = useMemo(() => new Set<OnConnectCallback>(), []);\n\n  // functions to add to our callback arrays\n  const addOnOpen = (cb: OnOpenCallback) => openCbs.add(cb);\n  const addOnData = (cb: OnDataCallback) => dataCbs.add(cb);\n  const addOnConnect = (cb: OnConnectCallback) => connectCbs.add(cb);\n  const addOnError = (cb: OnErrorCallback) => errorCbs.add(cb);\n\n  // keep track of the ID\n  const [id, setId] = useState<null | string>(null);\n\n  // here we establish a peerjs connection. Our goal here\n  // is to \"flatten\" some of the complexities so we can\n  // construct APIs on top of it.\n  useEffect(() => {\n    const p = new PeerJS();\n    p.on(\"open\", (id) => {\n      setId(id);\n      openCbs.forEach((onOpen) => {\n        onOpen(id);\n      });\n    });\n    p.on(\"connection\", (dataConnection) => {\n      connectCbs.forEach((onConnect) => {\n        onConnect(dataConnection);\n      });\n      dataConnection.on(\"data\", (data) => {\n        dataCbs.forEach((onData) => {\n          onData(data);\n        });\n      });\n      dataConn.current = dataConnection;\n    });\n    p.on(\"error\", (err) => {\n      errorCbs.forEach((onError) => {\n        onError(err);\n      });\n    });\n    peer.current = p;\n  }, [openCbs, connectCbs, errorCbs, dataCbs]);\n\n  // connect to another peer using PeerJS\n  const connect = (id: string) => {\n    if (peer.current) {\n      peer.current.connect(id);\n    }\n  };\n\n  // send data to a peerjs connection\n  const send = (data: any) => {\n    if (dataConn.current) {\n      dataConn.current.send(data);\n    }\n  };\n\n  const value = {\n    addOnOpen,\n    addOnData,\n    addOnConnect,\n    addOnError,\n    connect,\n    id,\n    send,\n  };\n\n  return <Provider value={value}>{children}</Provider>;\n}\n","import { ReactNode, useEffect, useState } from \"react\";\nimport { CircularProgress, TextField, Box, Button } from \"@material-ui/core\";\nimport { Board, Cell, CellVariant } from \"./Board\";\nimport { useSetupContext, SetupProvider } from \"./SetupManager\";\nimport { WebRTCProvider, useWebRTCCtx } from \"./WebRTCContext\";\n\nimport \"./App.css\";\n\ninterface CellProps {\n  children: ReactNode;\n}\n\nfunction StatefulCell({ children }: CellProps) {\n  const [clicks, setClicks] = useState<number>(0);\n  const handleClick = () => {\n    console.log(clicks);\n    const next = (clicks + 1) % 4;\n    setClicks(next);\n  };\n  const variants: CellVariant[] = [\"unknown\", \"miss\", \"ship-unhit\", \"ship-hit\"];\n  return (\n    <Cell onClick={handleClick} variant={variants[clicks]}>\n      {children}\n    </Cell>\n  );\n}\n\nfunction Loader() {\n  const { setupState, data } = useSetupContext();\n  // const style = useStyles();\n\n  if (\n    setupState === \"ready\" &&\n    data &&\n    \"pokedex\" in data &&\n    \"generation\" in data &&\n    \"pokemon\" in data\n  ) {\n    return (\n      <>\n        <pre>{data.generation.name}</pre>\n        <pre>{data.pokedex.name}</pre>\n        <Board\n          columns={14}\n          items={data.pokemon}\n          renderCell={(pokee) => (\n            <StatefulCell key={pokee.name}>\n              <img src={pokee.sprites.front_default} alt={pokee.name} />\n            </StatefulCell>\n          )}\n        />\n      </>\n    );\n  } else {\n    return <CircularProgress />;\n  }\n}\n\nfunction Connector() {\n  const { connect, addOnConnect, id } = useWebRTCCtx();\n  const [peer, setPeer] = useState<string>(\"\");\n\n  useEffect(() => {\n    addOnConnect((connection) => {\n      console.log(connection);\n    });\n  }, [addOnConnect]);\n\n  const handleChange = (e: any) => {\n    setPeer(e.target.value);\n  };\n\n  const handleClick = () => {\n    connect(peer);\n  };\n\n  return (\n    <>\n      <Box>{id}</Box>\n      <TextField onChange={handleChange} label=\"Set Other ID\" />\n      <Button onClick={handleClick}>Connect!!!</Button>\n    </>\n  );\n}\n\n/**\n * Let's start thinking about the \"App State\". These will be the various\n * different phases of using this application. Each phase could probably\n * be considered a mini-application\n *\n * 1. Setup - This is where you set up the board, establishing the shape\n * of the board and the order the pokemon appear in\n *\n * 2. Connection - Once the board is configured, we'll try to connect to\n * another instance that we can pass that data along to. Maybe this could\n * happen in the background of other phases?\n *\n * 3. Game - This probably consists of several sub-phases, such as ship\n * placement and actual play\n *\n * 4. PostGame - After a player wins, what happens? Do we just return to\n * the main phase or give people a chance to do another round?\n */\nfunction App() {\n  return (\n    <WebRTCProvider>\n      <SetupProvider>\n        <Connector />\n        <Loader />\n      </SetupProvider>\n    </WebRTCProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 97;"],"sourceRoot":""}