{"version":3,"sources":["../node_modules/peerjs/dist sync","LocalState.tsx","utils/PromiseAllChunk.ts","utils/CoolCache.ts","utils/pokeGetter.ts","PokeGetterContext.tsx","PeerJSContext.tsx","CreateUserPage.tsx","utils/WebRTCDatabase.ts","sharedData/users.ts","sharedData/boardConfig.ts","sharedData/index.tsx","Board.tsx","BoardSetupPage.tsx","LandingPage.tsx","LobbyPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","user","reducer","state","action","type","name","payload","initialContext","dispatch","LocalStateContext","createContext","useLocalState","useContext","LocalStateProvider","children","useReducer","value","Provider","PromiseAllSettledChunk","ps","a","chunkSize","pchunks","cur","length","chunk","slice","push","allRes","Promise","allSettled","res","concat","CoolCache","key","handler","this","lookupVal","mkKey","localVal","localStorage","getItem","parsed","JSON","parse","setItem","stringify","PokemonCache","PokeAPI","PokemonSpecies","species","defaultForm","varieties","find","variety","is_default","Pokemon","pokemon","nationalDexNumber","artworkUrl","sprites","front_default","names","reduce","acc","language","GameCache","title","Version","game","VerionGroup","version_group","group","pokedex","pokedexes","map","dex","generation","makeNationalDex","memo","gen","Generaition","groupPromises","version_groups","all","groups","dexPromises","flatMap","PokedexCache","get","dexes","pokemonSet","Set","forEach","poke","add","lookup","Map","pokePromises","Array","from","pokeResults","fulfilled","filter","r","status","set","nationalDex","sort","b","aNum","bNum","includes","split","cache","Pokedex","pokemonEntries","pokemon_entries","entry","pokemon_species","num","entry_number","getPokemonByPokedex","lang","dexName","pokemonPromises","pokemonCacheResults","pokemonAccepted","pokemonCached","getAllGames","listAll","gameResources","gamePromises","results","cachedGames","filtered","Object","getPokedexByGame","gameName","dexNames","cachedDexes","basePokedexes","nationalDexCache","PokeGetter","initialGetter","PokeGetterContext","usePokeGetter","PokeGetterProvider","props","useState","getter","setGetter","useEffect","PeerJSContext","usePeerJS","peer","PeerJSProvider","initializePeerJS","reject","PeerJS","on","err","useCreateStyles","makeStyles","root","padding","margin","marginTop","CreateUser","styles","setState","Container","fixed","maxWidth","Paper","className","onSubmit","event","preventDefault","TextField","label","onChange","onNameChange","target","fullWidth","Button","sortDiffLeastToGreatest","timestamp","WebRTCDatabase","connections","diffStack","diffLookup","onConnectCallbacks","onDisconnectCallbacks","onChangeCallbacks","conn","setupConnection","cb","data","setupMessageListener","console","log","fullConn","delete","lastUpdated","connection","message","diffs","updates","diff","has","applyDiffs","connectionIDs","connectPromises","connect","connPromises","head","rest","diffsToApply","shift","prevState","getDiffsToApplyEmpty","getDiffsToApplyMany","getState","unshift","getAllDiffsSince","reverse","Date","getTime","send","allConns","author","base64","encode","syncConnections","players","waiting","player","w","newPlayers","p","columns","tiles","ships","creators","joinWaiting","leaveWaiting","joinPlaying","leavePlaying","setBoardName","setBoardColumns","setBoardGame","setBoardPokedex","setBoardTiles","users","userReducer","board","boardReducer","initializeSharedData","initialUserState","initialBoardState","SharedDataContext","useSharedData","db","useBaseSharedData","handleChange","registerOnChange","removeOnChange","clone","useCallback","update","handleDisconnect","registerOnDisconnect","removeOnDisconnect","SharedDataProvider","useCellStyles","display","background","variant","teal","red","blueGrey","image","Cell","onClick","useBoardStyles","gridTemplateColumns","listStyle","Board","items","renderCell","item","useBoardContainerStyles","width","height","overflow","BoardContainer","NameField","setName","val","ColumnsField","cols","setCols","Number","isNaN","GameSelect","getValue","getDisplayValue","useMemo","games","setGames","listen","clear","setGame","curValue","select","disabled","MenuItem","lookupValue","PokedexSelect","forGame","setDexes","setDex","BoardPreview","forPokedex","setPokemon","isLoading","setIsLoading","CircularProgress","style","pointerEvents","src","alt","useStyles","BoardSetupPage","localState","sharedState","defaultName","canSubmit","Grid","container","xs","LandingPage","history","useHistory","theme","spacing","button","marginLeft","cardGrid","card","JoinPage","Box","component","Typography","color","startIcon","Card","CardContent","LobbyPage","isReady","setIsReady","peer_id","useParams","Debug","AppBar","position","Toolbar","IconButton","Home","App","setPeer","sharedData","setSharedData","setErr","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StylesProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ed4e8a4f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 122;","/**\n * @TODO - Here it is, all the fucking state! I can't think\n * of a better way to structure this right now, so I\n * won't. In time, it will probably be better to start\n * breaking this out into separate state managers, for\n * organization as much as performance\n *\n * ~reccanti 6/19/2021\n */\nimport { createContext, ReactNode, useReducer, useContext } from \"react\";\n\n// various types for interacting with state\n\ninterface User {\n  name: string;\n}\n\n// compose all our types into a state blob. Create the reducer\n// and action for managing this\n\ninterface LocalState {\n  user: User | null;\n}\n\nconst initialState: LocalState = {\n  user: null,\n};\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetUser extends BaseAction {\n  type: \"setUser\";\n  payload: {\n    name: string;\n  };\n}\n\ninterface Clear extends BaseAction {\n  type: \"clear\";\n}\n\ntype Action = SetUser | Clear;\n\nfunction reducer(state: LocalState, action: Action): LocalState {\n  switch (action.type) {\n    case \"setUser\": {\n      return {\n        ...state,\n        user: {\n          name: action.payload.name,\n        },\n      };\n    }\n    case \"clear\": {\n      return initialState;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n// combine the state blob with a dispatch function and actions\n// to create the context and Provider\n\ninterface LocalContext {\n  state: LocalState;\n  dispatch: (action: Action) => void;\n}\n\nconst initialContext: LocalContext = {\n  state: initialState,\n  dispatch() {},\n};\n\nexport const LocalStateContext = createContext<LocalContext>(initialContext);\n\nexport const useLocalState = () => useContext(LocalStateContext);\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport function LocalStateProvider({ children }: Props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const value: LocalContext = {\n    state,\n    dispatch,\n  };\n\n  return (\n    <LocalStateContext.Provider value={value}>\n      {children}\n    </LocalStateContext.Provider>\n  );\n}\n","/**\n * A drop-in replacement for Promise.all, except you can specify a chunk size.\n * This way, you can chunk your requests so that you don't overwhelm the API.\n *\n * @METEORCITY_CANDIDATE\n * - maybe make \"options\" instead of passing the chunksize as a full parameter\n */\nexport async function PromiseAllSettledChunk<T>(\n  ps: Promise<T>[],\n  chunkSize: number = 25\n): Promise<PromiseSettledResult<T>[]> {\n  // split the array into chunks\n  const pchunks: Promise<T>[][] = [];\n  let cur = 0;\n  while (cur < ps.length) {\n    const chunk = ps.slice(cur, cur + chunkSize);\n    pchunks.push(chunk);\n    cur += chunkSize;\n  }\n\n  // asynchronously iterate through each chunk and add the results\n  let allRes: PromiseSettledResult<T>[] = [];\n  for (const chunk of pchunks) {\n    const res = await Promise.allSettled(chunk);\n    allRes = allRes.concat(res);\n  }\n\n  return allRes;\n}\n","/**\n * A cool cache for cool people 😎. This cache\n * wraps around API calls and caches the results\n * in localStorage\n *\n * @METEORCITY_CANDIDATE\n * - I don't really like the Promise<T | void> signature.\n *   Maybe come up with some sort of CacheResponse type?\n * - better error handling\n */\n\n/**\n * A function that will be used to fetch a value if it isn't\n * stored in the cache already\n */\ntype LookerUpper<T> = (lookupVal: string) => T | Promise<T | void>;\n\nexport class CoolCache<T> {\n  /**\n   * This key will be used to identify the resource in localStorage\n   */\n  private key: string;\n\n  /**\n   * This will be used to look up the value if it isn't available\n   * in localStorage\n   */\n  private handler: LookerUpper<T>;\n\n  constructor(key: string, handler: LookerUpper<T>) {\n    this.key = key;\n    this.handler = handler;\n  }\n\n  private mkKey(key: string): string {\n    return `${this.key}.${key}`;\n  }\n\n  async get(lookupVal: string): Promise<T | void> {\n    const key = this.mkKey(lookupVal);\n    const localVal = localStorage.getItem(key);\n    if (localVal) {\n      const parsed = JSON.parse(localVal) as T;\n      return parsed;\n    }\n    const res = await this.handler(lookupVal);\n    if (res) {\n      localStorage.setItem(key, JSON.stringify(res));\n      return res;\n    }\n  }\n}\n","/**\n * This is kind of an extension of what I started with pokeFuncs.\n * The goal here is to create an wrapper around the PokeAPI that can\n * be used to simplify the process of fetching pokemon and formatting\n * it in the way I'd like.\n *\n * @TODO - Even though pokeapi-typescript caches our API requests,\n * we might want to pull all this down and host all the data locally.\n * By having this Getter, we can preserve the API our app uses while\n * swapping out the data source\n */\nimport PokeAPI, { IPokemonSpeciesVariety } from \"pokeapi-typescript\";\nimport memo from \"micro-memoize\";\nimport { PromiseAllSettledChunk } from \"./PromiseAllChunk\";\nimport { CoolCache } from \"./CoolCache\";\n\n/**\n * All the languages that information could be\n * displayed in\n */\nexport type Language =\n  | \"ja-Hrkt\"\n  | \"roomaji\"\n  | \"ko\"\n  | \"zh-Hant\"\n  | \"fr\"\n  | \"de\"\n  | \"es\"\n  | \"it\"\n  | \"en\"\n  | \"cs\"\n  | \"ja\"\n  | \"zh-Hans\"\n  | \"pt-BR\";\n\n/**\n * The Pokemon Cache contains all the information needed to display\n * and work with Pokemon data. When needed, objects are used instead\n * of arrays in order to decrease the time needed\n */\ninterface IPokemonCache {\n  id: string;\n  nationalDexNumber: number;\n  artworkUrl: string;\n  names: {\n    [lang in Language]: string;\n  };\n}\n\nconst PokemonCache = new CoolCache<IPokemonCache>(\n  \"pokemon\",\n  async (name: string) => {\n    // first, look up the Pokemon species and fetch the\n    // resource for its default variety\n    const species = await PokeAPI.PokemonSpecies.resolve(name);\n    const defaultForm = species.varieties.find(\n      (variety) => variety.is_default\n    ) as IPokemonSpeciesVariety;\n    const pokemon = await PokeAPI.Pokemon.resolve(defaultForm.pokemon.name);\n\n    // extract the ID, name, and artwork for the pokemon. Put it in a format\n    // that's faster to search than an array\n    const nationalDexNumber = pokemon.id;\n    const artworkUrl = pokemon.sprites.front_default;\n    const names = species.names.reduce((acc, cur) => {\n      acc[cur.language.name as Language] = cur.name;\n      return acc;\n    }, {} as { [lang in Language]: string });\n\n    return {\n      id: name,\n      nationalDexNumber,\n      artworkUrl,\n      names,\n    };\n  }\n);\n\n/**\n * The Game Cache contains all the information needed to get game-related\n * information\n */\ninterface IGameCache {\n  id: string;\n  generation: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokedex: string[];\n}\n\nconst GameCache = new CoolCache<IGameCache>(\"games\", async (title: string) => {\n  // get the game and the version group that game belongs to\n  const game = await PokeAPI.Version.resolve(title);\n  const group = await PokeAPI.VerionGroup.resolve(game.version_group.name);\n\n  // extract the ID, names, and pokedex and put it in a format\n  // that's faster to search than an array\n  const id = game.name;\n  const names = game.names.reduce((acc, cur) => {\n    acc[cur.language.name as Language] = cur.name;\n    return acc;\n  }, {} as { [lang in Language]: string });\n  const pokedex = group.pokedexes.map((dex) => dex.name);\n  const generation = group.generation.name;\n\n  return {\n    id,\n    names,\n    pokedex,\n    generation,\n  };\n});\n\n/**\n * The Pokedex cache is where we keep all pokedex info\n */\nconst makeNationalDex = memo(async (gen: string): Promise<IPokedexCache> => {\n  // first get all the pokedex in each generation\n  const generation = await PokeAPI.Generaition.resolve(gen);\n  const groupPromises = generation.version_groups.map((group) =>\n    PokeAPI.VerionGroup.resolve(group.name)\n  );\n  const groups = await Promise.all(groupPromises);\n  const dexPromises = groups.flatMap((group) =>\n    group.pokedexes.map((dex) => PokedexCache.get(dex.name))\n  );\n  const dexes = (await Promise.all(dexPromises)) as IPokedexCache[];\n\n  // create a set containing the names of each unique pokemon across\n  // all the dexes. This should cover scenarios like Sword and Shield,\n  // where not all pokemon are present.\n  const pokemonSet = new Set<string>();\n  dexes.forEach((dex) => {\n    dex.pokemon.forEach((poke) => {\n      pokemonSet.add(poke);\n    });\n  });\n\n  // we need to determine the order the pokemon should appear in, so\n  // let's get all of their data, put them in a lookup map, and sort\n  // them\n  const lookup = new Map<string, number>();\n  const pokePromises = Array.from(pokemonSet).map((poke) =>\n    PokemonCache.get(poke)\n  );\n  const pokeResults = await PromiseAllSettledChunk(pokePromises, 100);\n  const fulfilled = pokeResults.filter(\n    (r) => r.status === \"fulfilled\"\n  ) as PromiseFulfilledResult<IPokemonCache>[];\n  const pokes = fulfilled.map((r) => r.value);\n  pokes.forEach((poke) => {\n    lookup.set(poke.id, poke.nationalDexNumber);\n  });\n\n  // get the name of the National dex for the game\n  const nationalDex = (await PokedexCache.get(\"national\")) as IPokedexCache;\n\n  const names = nationalDex.names;\n  const pokemon = Array.from(pokemonSet).sort((a, b) => {\n    const aNum = lookup.get(a) as number;\n    const bNum = lookup.get(b) as number;\n    if (aNum > bNum) {\n      return 1;\n    } else if (aNum < bNum) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  const id = `national/${gen}`;\n\n  return {\n    names,\n    pokemon,\n    id,\n  };\n});\n\ninterface IPokedexCache {\n  id: string;\n  names: {\n    [lang in Language]: string;\n  };\n  pokemon: string[];\n}\n\nconst PokedexCache = new CoolCache<IPokedexCache>(\n  \"pokedex\",\n  async (name: string) => {\n    if (name.includes(\"national/\")) {\n      const [, gen] = name.split(\"/\");\n      const cache = makeNationalDex(gen);\n      return cache;\n    } else {\n      // get the pokedex\n      const dex = await PokeAPI.Pokedex.resolve(name);\n\n      // extract the ID, names, and pokemon and put it in a\n      // format  that's faster to search than an array\n      const id = dex.name;\n      const names = dex.names.reduce((acc, cur) => {\n        acc[cur.language.name as Language] = cur.name;\n        return acc;\n      }, {} as { [lang in Language]: string });\n      /**\n       * @NOTE this is a little complicated. What we're doing here\n       * is creating list of pokemon sorted by the pokedex order,\n       * which involves several steps\n       */\n      const pokemonEntries = dex.pokemon_entries.map((entry) => ({\n        name: entry.pokemon_species.name,\n        num: entry.entry_number,\n      }));\n      pokemonEntries.sort((a, b) => {\n        if (a.num > b.num) {\n          return 1;\n        } else if (a.num < b.num) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      const pokemon = pokemonEntries.map((entry) => entry.name);\n\n      return {\n        id,\n        names,\n        pokemon,\n      };\n    }\n  }\n);\n\nexport interface PokeGeneration {\n  name: string;\n  id: number;\n}\n\n/**\n * Get info on all the pokemon\n */\n\nexport interface Pokemon {\n  id: string;\n  nationalDexNumber: number;\n  name: string;\n  artworkUrl: string;\n}\n\nconst getPokemonByPokedex = memo(\n  async (lang: Language, dexName: string): Promise<Pokemon[]> => {\n    const dex = (await PokedexCache.get(dexName)) as IPokedexCache;\n    const pokemonPromises = dex.pokemon.map((poke) => PokemonCache.get(poke));\n    const pokemonCacheResults = await PromiseAllSettledChunk(\n      pokemonPromises,\n      50\n    );\n    const pokemonAccepted = pokemonCacheResults.filter(\n      (r) => r.status === \"fulfilled\" && !!r.value\n    ) as PromiseFulfilledResult<IPokemonCache>[];\n    const pokemonCached = pokemonAccepted.map((r) => r.value);\n    return pokemonCached.map((poke) => ({\n      id: poke.id,\n      name: poke.names[lang],\n      artworkUrl: poke.artworkUrl,\n      nationalDexNumber: poke.nationalDexNumber,\n    }));\n  }\n);\n\n/**\n * This is used to get a list of all the mainline Pokemon games\n */\nexport interface Game {\n  id: string;\n  name: string;\n  generation: string;\n  pokedex: string[];\n}\n\nconst getAllGames = memo(async (lang: Language): Promise<Game[]> => {\n  const gameResources = await PokeAPI.Version.listAll();\n  const gamePromises = gameResources.results.map((res) =>\n    GameCache.get(res.name)\n  );\n  const cachedGames = await Promise.all(gamePromises);\n  const filtered = cachedGames.filter((game) => !!game) as IGameCache[];\n  return (\n    filtered\n      // just filter out games without pokedexes because this won't work otherwise.\n      // seems to be a problem for XD and Colosseum\n      .filter((game) => game.pokedex.length > 0)\n      // filtering out games without a name array because this won't work otherwise.\n      // seems to be a problem for Let's Go and Sword & Shield\n      .filter((game) => Object.keys(game.names).length > 0)\n      .map((cache) => ({\n        id: cache.id,\n        name: cache.names[lang],\n        generation: cache.generation,\n        pokedex: cache.pokedex,\n      }))\n  );\n});\n\n/**\n * This is used to get a list of Pokedexes for each game.\n */\nexport interface Pokedex {\n  id: string;\n  name: string;\n  pokemon: string[];\n}\n\nconst getPokedexByGame = memo(async (lang: Language, gameName: string): Promise<\n  Pokedex[]\n> => {\n  const game = (await GameCache.get(gameName)) as IGameCache;\n  const dexNames = game.pokedex;\n  const dexPromises = dexNames.map((name) => PokedexCache.get(name));\n  const cachedDexes = await Promise.all(dexPromises);\n  const filtered = cachedDexes.filter((dex) => !!dex) as IPokedexCache[];\n  const basePokedexes = filtered.map((cache) => ({\n    id: cache.id,\n    name: cache.names[lang],\n    pokemon: cache.pokemon,\n  }));\n\n  const nationalDexCache = await makeNationalDex(game.generation);\n  const nationalDex = {\n    name: nationalDexCache.names[lang],\n    id: nationalDexCache.id,\n    pokemon: nationalDexCache.pokemon,\n  };\n\n  return [nationalDex, ...basePokedexes];\n});\n\n/**\n * A wrapper around all of these functions which automatically sets\n * the correct language. Maybe other things in the future\n */\ninterface Options {\n  lang: Language;\n}\n\nexport class PokeGetter {\n  private language: Language;\n\n  constructor({ lang = \"en\" }: Options) {\n    this.language = lang;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await getAllGames(this.language);\n  }\n\n  async getPokedexByGame(game: Game): Promise<Pokedex[]> {\n    return await getPokedexByGame(this.language, game.id);\n  }\n\n  async getPokemonByPokedex(dex: Pokedex): Promise<Pokemon[]> {\n    return await getPokemonByPokedex(this.language, dex.id);\n  }\n}\n","/**\n * A context that provides a wrapper aound the PokeGetter\n * so that we don't have to reinitialize it everywhere\n */\n\nimport {\n  createContext,\n  useState,\n  useEffect,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { PokeGetter, Language } from \"./utils/pokeGetter\";\n\nconst initialGetter = new PokeGetter({ lang: \"en\" });\n\nexport const PokeGetterContext = createContext<PokeGetter>(initialGetter);\n\nexport const usePokeGetter = () => useContext(PokeGetterContext);\n\ninterface Props {\n  children: ReactNode;\n  lang: Language;\n}\n\nexport function PokeGetterProvider(props: Props) {\n  const [getter, setGetter] = useState(new PokeGetter({ lang: props.lang }));\n\n  useEffect(() => {\n    setGetter(new PokeGetter({ lang: props.lang }));\n  }, [props.lang]);\n\n  return (\n    <PokeGetterContext.Provider value={getter}>\n      {props.children}\n    </PokeGetterContext.Provider>\n  );\n}\n","/**\n * This file is responsible for creating a PeerJS client\n */\nimport { createContext, useContext, ReactNode } from \"react\";\nimport PeerJS from \"peerjs\";\n\n// This is the base Provider. It assumes you have a PeerJS instance\n// already initialized\n\nconst PeerJSContext = createContext<null | PeerJS>(null);\n\nexport function usePeerJS(): PeerJS {\n  const peer = useContext(PeerJSContext);\n  if (!peer) {\n    throw new Error(\"usePeerJS must be used within a PeerJSProvider\");\n  }\n  return peer;\n}\n\ninterface Props {\n  children: ReactNode;\n  peer: PeerJS;\n}\n\nexport function PeerJSProvider({ children, peer }: Props) {\n  return (\n    <PeerJSContext.Provider value={peer}>{children}</PeerJSContext.Provider>\n  );\n}\n\n// This is an async used to initialize PeerJS\n\nexport async function initializePeerJS(): Promise<PeerJS> {\n  return new Promise((resolve, reject) => {\n    const peer = new PeerJS();\n    peer.on(\"open\", () => {\n      resolve(peer);\n    });\n    peer.on(\"error\", (err) => {\n      reject(err);\n    });\n  });\n}\n","import { useState, useContext, ChangeEvent, FormEvent } from \"react\";\nimport {\n  makeStyles,\n  Container,\n  Paper,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { LocalStateContext } from \"./LocalState\";\n\n/**\n * This is a sub-page of the landing page. Here, we ask the user to\n * select a username before either creating their board or joining\n * someone at a particular instance.\n *\n * @TODO - right now, we only allow the user to create a new board.\n * Users will be able to join directly using a URL provided by the\n * other player once their board is created.\n *\n * ~reccanti 6/20/2021\n */\nconst useCreateStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    margin: \"1rem\",\n    \"& *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n});\n\ninterface FormState {\n  name: string;\n}\n\ninterface CreateUserProps {\n  onNameChange?: (name: string) => void;\n  onSubmit?: (data: { name: string }) => void;\n}\n\nexport function CreateUser(props: CreateUserProps) {\n  const styles = useCreateStyles();\n  const { dispatch } = useContext(LocalStateContext);\n  const [state, setState] = useState<FormState>({ name: \"\" });\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (props.onNameChange) {\n      props.onNameChange(event.target.value);\n    }\n    setState({\n      ...state,\n      name: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (props.onSubmit) {\n      props.onSubmit({ name: state.name });\n    }\n    dispatch({ type: \"setUser\", payload: { name: state.name } });\n  };\n\n  return (\n    <Container fixed maxWidth=\"sm\">\n      <Paper className={styles.root}>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Display Name\"\n            onChange={handleNameChange}\n            value={state.name}\n            fullWidth\n          />\n          <Button type=\"submit\" fullWidth>\n            Get Started\n          </Button>\n        </form>\n      </Paper>\n    </Container>\n  );\n}\n","/**\n * This is a cool WebRTC Database. Basically, if you have\n * a state you want to maintain across multiple clients, you\n * can use this to handle updates\n *\n * @METEORCITY_CANDIDATE\n */\nimport PeerJS, { DataConnection } from \"peerjs\";\nimport base64 from \"base-64\";\n\ninterface Conn {\n  // this should be calculated using new Date().getTime()\n  lastUpdated: null | number;\n  connection: DataConnection;\n}\n\n// Diff stuff\n\ninterface Diff<Data extends object, Action extends object> {\n  id: string; // base64-encoded string identifying this particular diff\n  timestamp: number; // when was this update applied\n  author: string; // PeerID of the user who made this update\n  action: Action; // the action to apply\n  prevState: Data; // what was the state when this action was requested\n}\n\nfunction sortDiffLeastToGreatest<\n  Data extends object,\n  Action extends object,\n  D extends Diff<Data, Action> = Diff<Data, Action>\n>(a: D, b: D) {\n  if (a.timestamp < b.timestamp) {\n    return -1;\n  } else if (a.timestamp > b.timestamp) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\n// function sortDiffGreatestToLeast<\n//   Data extends object,\n//   Action extends object,\n//   D extends Diff<Data, Action> = Diff<Data, Action>\n// >(a: D, b: D) {\n//   if (a.timestamp < b.timestamp) {\n//     return 1;\n//   } else if (a.timestamp > b.timestamp) {\n//     return -1;\n//   } else {\n//     return 0;\n//   }\n// }\n\ninterface BaseDBMessage {\n  type: string;\n}\n\ninterface SendUpdate<Data extends object, Action extends object>\n  extends BaseDBMessage {\n  type: \"sendUpdate\";\n  updates: Diff<Data, Action>[];\n}\n\ninterface SendInternals<Data extends object, Action extends object> {\n  type: \"sendInternals\";\n  connectionIDs: string[];\n  diffStack: Diff<Data, Action>[];\n}\n\ninterface RequestInternals {\n  type: \"requestInternals\";\n}\n\ninterface SendConnections {\n  type: \"sendConnections\";\n  connections: string[];\n}\n\ntype Message<Data extends object, Action extends object> =\n  | SendUpdate<Data, Action>\n  | SendInternals<Data, Action>\n  | RequestInternals\n  | SendConnections;\n\ntype OnConnectCB = (conn: Conn) => void;\ntype OnDisconnectCB = (conn: Conn) => void;\ntype OnChangeCB<Data extends object> = (data: Data) => void;\n\nexport class WebRTCDatabase<Data extends object, Action extends object> {\n  private peer: PeerJS;\n  private state: Data = {} as Data;\n  private connections: Map<string, Conn> = new Map();\n  private diffStack: Diff<Data, Action>[] = [];\n  private diffLookup: Set<string> = new Set();\n  private reducer: (data: Data, action: Action) => Data;\n\n  private onConnectCallbacks: Set<OnConnectCB> = new Set();\n  private onDisconnectCallbacks: Set<OnDisconnectCB> = new Set();\n  private onChangeCallbacks: Set<OnChangeCB<Data>> = new Set();\n\n  public get id(): string {\n    return this.peer.id;\n  }\n\n  constructor(\n    initialState: Data,\n    reducer: (data: Data, action: Action) => Data,\n    peer: PeerJS = new PeerJS()\n  ) {\n    this.peer = peer;\n    this.peer.on(\"connection\", (conn) => {\n      this.setupConnection(conn);\n    });\n    this.reducer = reducer;\n    this.setState(initialState);\n  }\n\n  /**\n   * A function for managing state updates, so we can make sure\n   * we're grouping all necessary procedures\n   */\n  private setState(state: Data) {\n    this.state = state;\n    this.onChangeCallbacks.forEach((cb) => {\n      cb(state);\n    });\n  }\n\n  /**\n   * this is a utility function so that we can share logic for\n   * setting up connections\n   */\n  private async setupConnection(conn: DataConnection): Promise<Conn> {\n    return new Promise<Conn>((resolve, reject) => {\n      // setup listeners\n      conn.on(\"data\", async (data) => {\n        await this.setupMessageListener(\n          conn.peer,\n          data as Message<Data, Action>\n        );\n      });\n      conn.on(\"error\", (err) => {\n        reject(err);\n      });\n      conn.on(\"close\", () => {\n        console.log(`See ya ${conn.peer}`);\n        const fullConn = this.connections.get(conn.peer) as Conn;\n        this.onDisconnectCallbacks.forEach((cb) => {\n          cb(fullConn);\n        });\n        this.connections.delete(conn.peer);\n      });\n\n      // add this to our list of connections\n      const fullConn = {\n        lastUpdated: null,\n        connection: conn,\n      };\n      this.connections.set(conn.peer, fullConn);\n      this.onConnectCallbacks.forEach((cb) => {\n        cb(fullConn);\n      });\n      resolve(fullConn);\n    });\n  }\n\n  private async setupMessageListener(\n    id: string,\n    message: Message<Data, Action>\n  ) {\n    switch (message.type) {\n      case \"sendUpdate\": {\n        // this should be an array of diffs in chronological order\n        const diffs = message.updates;\n\n        // filter out diffs that already exist\n        const filtered = diffs.filter((diff) => !this.diffLookup.has(diff.id));\n\n        if (filtered.length > 0) {\n          // add these new diffs to the lookup\n          filtered.forEach((diff) => {\n            this.diffLookup.add(diff.id);\n          });\n\n          // apply only the \"new\" diffs\n          this.applyDiffs(filtered);\n        }\n        break;\n      }\n      case \"requestInternals\": {\n        if (this.connections.has(id)) {\n          const conn = this.connections.get(id) as Conn;\n          const connectionIDs = Array.from(this.connections.keys());\n          const diffStack = this.diffStack;\n          this.message(conn, {\n            type: \"sendInternals\",\n            connectionIDs,\n            diffStack,\n          });\n        }\n        break;\n      }\n      case \"sendInternals\": {\n        // connect to all the ids passed\n        const connectPromises = message.connectionIDs\n          .filter((id) => id !== this.id)\n          .map((id) => this.connect(id));\n        await Promise.all(connectPromises);\n\n        // update the state\n        this.applyDiffs(message.diffStack);\n        message.diffStack.forEach((diff) => {\n          this.diffLookup.add(diff.id);\n        });\n        break;\n      }\n      case \"sendConnections\": {\n        const connPromises = message.connections\n          .filter((id) => !this.connections.has(id))\n          .map((id) => this.connect(id));\n        await Promise.all(connPromises);\n      }\n    }\n  }\n\n  /**\n   * Utility function for getting the diffs to apply if\n   * there are no diffs in the diff stack. Used as part of\n   * `applyDiffs`\n   */\n  private getDiffsToApplyEmpty(\n    diffs: Diff<Data, Action>[]\n  ): Diff<Data, Action>[] {\n    return diffs.sort(sortDiffLeastToGreatest);\n  }\n\n  /**\n   * Utility function for getting diffs if there is at least\n   * one diff in the diff stack. Used as part of `applyDiffs`\n   */\n  private getDiffsToApplyMany(\n    diffs: Diff<Data, Action>[]\n  ): Diff<Data, Action>[] {\n    // first sort the diffs we want to apply in order of\n    // least-recent-to-most-recent. This way, when we start\n    // reconstructing the diffStack, we only have to rewind\n    // the state in one big update method, rather than for\n    // each diff\n    diffs.sort(sortDiffLeastToGreatest);\n\n    // here we construct a list of diffs to apply. We take the head\n    // of the sorted diffs and pop off diffs in the stack until we\n    // find an entry with a timestamp that's less than the head.\n    // Once we have that base list, we can add the rest of our\n    // timestamps and sort them from least to greatest\n    const [head, ...rest] = diffs;\n    const diffsToApply: Diff<Data, Action>[] = [];\n    while (\n      this.diffStack.length > 0 &&\n      this.diffStack[0].timestamp > head.timestamp\n    ) {\n      const entry = this.diffStack.shift() as Diff<Data, Action>;\n      /**\n       * @TODO - Maybe find a safer way to do this that doesn't involve\n       * mutating state within this function? A better solution may be\n       * to create a \"getRewoundState\" method that finds the state\n       * before a given timestamp\n       *\n       * ~reccanti 7/5/2021\n       */\n      this.state = entry.prevState;\n      diffsToApply.push(entry);\n    }\n    diffsToApply.push(head);\n\n    const sortedDiffsToApply = diffsToApply\n      .concat(...rest)\n      .sort(sortDiffLeastToGreatest);\n\n    return sortedDiffsToApply;\n  }\n\n  /**\n   * In the event that we get a batch of diffs that occurred\n   * out-of-order, this function figures out how to reverse\n   * the state and apply diffs sequentially\n   */\n  private applyDiffs(diffs: Diff<Data, Action>[]) {\n    // const filtered = diffs.filter((diff) => !this.diffLookup.has(diff.id));\n\n    // get the number of diffs we need to apply to the diff stack\n    let diffsToApply: Diff<Data, Action>[] = [];\n    if (this.diffStack.length === 0) {\n      diffsToApply = this.getDiffsToApplyEmpty(diffs);\n    } else {\n      diffsToApply = this.getDiffsToApplyMany(diffs);\n    }\n\n    // now that we have a list of diffs to apply:\n    // 1. cycle through them and apply the action to the reducer\n    // 2. add the diff back to the diffStack\n    let prevState = this.getState();\n\n    diffsToApply.forEach((diff) => {\n      diff.prevState = prevState;\n      prevState = this.reducer(prevState, diff.action);\n      this.diffStack.unshift(diff);\n    });\n\n    this.setState(prevState);\n  }\n\n  /**\n   * Utility function to get all the diffs since\n   * a specific timestamp\n   */\n  private getAllDiffsSince(timestamp: number): Diff<Data, Action>[] {\n    if (this.diffStack.length === 0) {\n      return [];\n    }\n    const diffs: Diff<Data, Action>[] = [];\n    let [cur, ...rest] = this.diffStack;\n    while (cur.timestamp > timestamp) {\n      diffs.push(cur);\n      [cur, ...rest] = rest;\n    }\n    return diffs;\n  }\n\n  /**\n   * Figure out what diffs need to be applied to all\n   * the connections\n   */\n  private syncConnections() {\n    this.connections.forEach((conn) => {\n      let diffs: Diff<Data, Action>[] = [];\n      if (conn.lastUpdated) {\n        diffs = this.getAllDiffsSince(conn.lastUpdated);\n      } else {\n        diffs = [...this.diffStack].reverse();\n      }\n      this.message(conn, { type: \"sendUpdate\", updates: diffs });\n    });\n  }\n\n  /**\n   * Just a utility function to handle messaging connections\n   */\n  private message(conn: Conn, message: Message<Data, Action>) {\n    conn.lastUpdated = new Date().getTime();\n    conn.connection.send(message);\n  }\n\n  /**\n   * Connect to a database with a given Peer ID\n   */\n  async connect(id: string): Promise<Conn> {\n    return new Promise<Conn>((resolve, reject) => {\n      const conn = this.peer.connect(id);\n      conn.on(\"open\", async () => {\n        const fullConn = await this.setupConnection(conn);\n        // let all the other connections know that there's a new\n        // connection that's been added\n        const allConns = Array.from(this.connections.keys());\n        this.connections.forEach((conn) => {\n          this.message(conn, {\n            type: \"sendConnections\",\n            connections: allConns,\n          });\n        });\n        resolve(fullConn);\n      });\n      conn.on(\"error\", (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Given a database with a simlar configuration, this will\n   * fetch the state from an external database and copy it to\n   * this database\n   */\n  async clone(id: string) {\n    const conn = await this.connect(id);\n    this.message(conn, { type: \"requestInternals\" });\n  }\n\n  /**\n   * Update the state with an action, store the diff,\n   * and update connected databases\n   */\n  update(action: Action) {\n    // construct the necessary fields\n    const timestamp = new Date().getTime();\n    const author = this.peer.id;\n    const prevState = this.getState();\n    const id = base64.encode(\n      JSON.stringify({\n        timestamp,\n        author,\n        action,\n      })\n    );\n\n    // construct the diff\n    const diff: Diff<Data, Action> = {\n      id,\n      timestamp,\n      author,\n      action,\n      prevState,\n    };\n\n    // add constructed diff to IDs\n    this.diffLookup.add(id);\n\n    // apply the diff to the state\n    this.applyDiffs([diff]);\n\n    // sync states of other databases\n    this.syncConnections();\n  }\n\n  /**\n   * Get the state of the database\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Functions for managing calbacks\n   */\n  registerOnConnect(cb: OnConnectCB) {\n    this.onConnectCallbacks.add(cb);\n  }\n  removeOnConnect(cb: OnConnectCB) {\n    this.onConnectCallbacks.delete(cb);\n  }\n  registerOnDisconnect(cb: OnDisconnectCB) {\n    this.onDisconnectCallbacks.add(cb);\n  }\n  removeOnDisconnect(cb: OnDisconnectCB) {\n    this.onDisconnectCallbacks.delete(cb);\n  }\n  registerOnChange(cb: OnChangeCB<Data>) {\n    this.onChangeCallbacks.add(cb);\n  }\n  removeOnChange(cb: OnChangeCB<Data>) {\n    this.onChangeCallbacks.delete(cb);\n  }\n}\n","// internal types\n\ninterface Player {\n  id: string;\n  name: string;\n}\n\n// state\n\nexport interface State {\n  players: [] | [Player] | [Player, Player];\n  waiting: Player[];\n}\n\n// initial state\n\nexport const initialState: State = {\n  players: [],\n  waiting: [],\n};\n\n// actions\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface JoinWaiting extends BaseAction {\n  type: \"joinWaiting\";\n  player: Player;\n}\n\ninterface LeaveWaiting extends BaseAction {\n  type: \"leaveWaiting\";\n  id: string;\n}\n\ninterface JoinPlaying extends BaseAction {\n  type: \"joinPlaying\";\n  player: Player;\n}\n\ninterface LeavePlaying extends BaseAction {\n  type: \"leavePlaying\";\n  id: string;\n}\n\nexport type Action = JoinWaiting | LeaveWaiting | JoinPlaying | LeavePlaying;\n\n// action creators\n\nconst joinWaiting = (player: Player): JoinWaiting => ({\n  type: \"joinWaiting\",\n  player,\n});\n\nconst leaveWaiting = (id: string): LeaveWaiting => ({\n  type: \"leaveWaiting\",\n  id,\n});\n\nconst joinPlaying = (player: Player): JoinPlaying => ({\n  type: \"joinPlaying\",\n  player,\n});\n\nconst leavePlaying = (id: string): LeavePlaying => ({\n  type: \"leavePlaying\",\n  id,\n});\n\nexport const creators = {\n  joinWaiting,\n  leaveWaiting,\n  joinPlaying,\n  leavePlaying,\n};\n\n// reducer\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"joinWaiting\": {\n      return {\n        ...state,\n        waiting: [...state.waiting, action.player],\n      };\n    }\n    case \"leaveWaiting\": {\n      return {\n        ...state,\n        waiting: state.waiting.filter((w) => w.id !== action.id),\n      };\n    }\n    case \"joinPlaying\": {\n      let newPlayers: [] | [Player] | [Player, Player] = [];\n      switch (state.players.length) {\n        case 0: {\n          newPlayers = [action.player];\n          break;\n        }\n        case 1: {\n          newPlayers = [...state.players, action.player];\n          break;\n        }\n        default: {\n          throw Error(\"There can only be 2 players in a game\");\n        }\n      }\n      return {\n        ...state,\n        waiting: state.waiting.filter((w) => w.id !== action.player.id),\n        players: newPlayers,\n      };\n    }\n    case \"leavePlaying\": {\n      const player = state.players.find((p) => p.id === action.id);\n      if (player) {\n        return {\n          ...state,\n          waiting: [...state.waiting, player],\n          players: state.players.filter((player) => player.id !== action.id) as\n            | []\n            | [Player],\n        };\n      }\n      return state;\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { Pokemon, Pokedex, Game } from \"../utils/pokeGetter\";\n\n// internal types\n\ninterface Ship {\n  width: number;\n  height: number;\n}\n\n// state\n\nexport interface State {\n  name: string;\n  game: Game | null;\n  pokedex: Pokedex | null;\n  columns: number;\n  ships: Ship[];\n  tiles: Pokemon[];\n}\n\n// initial state\n\nexport const initialState: State = {\n  name: \"\",\n  columns: 15,\n  game: null,\n  pokedex: null,\n  tiles: [],\n  ships: [],\n};\n\n// actions\n\ninterface BaseAction {\n  type: string;\n}\n\ninterface SetBoardName extends BaseAction {\n  type: \"setBoardName\";\n  name: string;\n}\n\ninterface SetBoardColumns extends BaseAction {\n  type: \"setBoardColumns\";\n  columns: number;\n}\n\ninterface SetBoardGame extends BaseAction {\n  type: \"setBoardGame\";\n  game: Game;\n}\n\ninterface SetBoardPokedex extends BaseAction {\n  type: \"setBoardPokedex\";\n  pokedex: Pokedex;\n}\n\ninterface SetBoardTiles extends BaseAction {\n  type: \"setBoardTiles\";\n  tiles: Pokemon[];\n}\n\nexport type Action =\n  | SetBoardName\n  | SetBoardColumns\n  | SetBoardGame\n  | SetBoardPokedex\n  | SetBoardTiles;\n\n// action creators\n\nconst setBoardName = (name: string): SetBoardName => ({\n  type: \"setBoardName\",\n  name,\n});\n\nconst setBoardColumns = (columns: number): SetBoardColumns => ({\n  type: \"setBoardColumns\",\n  columns,\n});\n\nconst setBoardGame = (game: Game): SetBoardGame => ({\n  type: \"setBoardGame\",\n  game,\n});\n\nconst setBoardPokedex = (pokedex: Pokedex): SetBoardPokedex => ({\n  type: \"setBoardPokedex\",\n  pokedex,\n});\n\nconst setBoardTiles = (tiles: Pokemon[]): SetBoardTiles => ({\n  type: \"setBoardTiles\",\n  tiles,\n});\n\nexport const creators = {\n  setBoardName,\n  setBoardColumns,\n  setBoardGame,\n  setBoardPokedex,\n  setBoardTiles,\n};\n\n// reducer\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"setBoardName\": {\n      return {\n        ...state,\n        name: action.name,\n      };\n    }\n    case \"setBoardColumns\": {\n      return {\n        ...state,\n        columns: action.columns,\n      };\n    }\n    case \"setBoardGame\": {\n      return {\n        ...state,\n        game: action.game,\n      };\n    }\n    case \"setBoardPokedex\": {\n      return {\n        ...state,\n        pokedex: action.pokedex,\n      };\n    }\n    case \"setBoardTiles\": {\n      return {\n        ...state,\n        tiles: action.tiles,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import PeerJS from \"peerjs\";\nimport {\n  createContext,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useContext } from \"react\";\n\nimport { WebRTCDatabase } from \"../utils/WebRTCDatabase\";\nimport {\n  reducer as userReducer,\n  Action as UserAction,\n  State as UserState,\n  initialState as initialUserState,\n  creators as userActionCreators,\n} from \"./users\";\nimport {\n  reducer as boardReducer,\n  Action as BoardAction,\n  State as BoardState,\n  initialState as initialBoardState,\n  creators as boardActionCreators,\n} from \"./boardConfig\";\n\n// combined state\n\ninterface State {\n  users: UserState;\n  board: BoardState;\n}\n\n// combined actions\n\ntype Action = UserAction | BoardAction;\n\n// combined action creators\n\nexport const creators = {\n  users: userActionCreators,\n  board: boardActionCreators,\n};\n\n// combined reducer\n\nfunction reducer(state: State, action: Action) {\n  return {\n    users: { ...userReducer(state.users, action as UserAction) },\n    board: { ...boardReducer(state.board, action as BoardAction) },\n  };\n}\n\n// function to create the database\n\nexport function initializeSharedData(peer: PeerJS): SharedData {\n  const initialState: State = {\n    users: initialUserState,\n    board: initialBoardState,\n  };\n  const db = new WebRTCDatabase(initialState, reducer, peer);\n  return db;\n}\n\n// DB Type\n\nexport type SharedData = WebRTCDatabase<State, Action>;\n\n// Base SharedDataContext\n\nconst SharedDataContext = createContext<null | SharedData>(null);\n\ninterface SharedDataInterface {\n  state: State;\n  clone: (id: string) => Promise<void>;\n  update: (action: Action) => void;\n}\n\nfunction useBaseSharedData(): SharedData {\n  const db = useContext(SharedDataContext);\n  if (!db) {\n    throw new Error(\"useSharedData must be used within a SharedDataProvider\");\n  }\n  return db;\n}\n\nexport function useSharedData(): SharedDataInterface {\n  const db = useBaseSharedData();\n\n  // handle state changes\n  const [state, setState] = useState<State>(db.getState());\n  useEffect(() => {\n    function handleChange(state: State) {\n      setState(state);\n    }\n    db.registerOnChange(handleChange);\n    return () => db.removeOnChange(handleChange);\n  }, [db]);\n\n  // wrapper around db.clone\n  const clone = useCallback(\n    async (id: string) => {\n      await db.clone(id);\n    },\n    [db]\n  );\n\n  // wrapper around db.update\n  const update = useCallback((action: Action) => db.update(action), [db]);\n\n  /**\n   * automatically leave on Disconnect\n   *\n   * @TODO - Not sure if this makes sense here. Maybe move it into the\n   * \"initializeSharedDb\" function?\n   *\n   * ~reccanti 7/8/2021\n   */\n  useEffect(() => {\n    const handleDisconnect: Parameters<typeof db.registerOnDisconnect>[0] = (\n      conn\n    ) => {\n      update(creators.users.leaveWaiting(conn.connection.peer));\n    };\n    db.registerOnDisconnect(handleDisconnect);\n    return () => db.removeOnDisconnect(handleDisconnect);\n  }, [db, update]);\n\n  return {\n    state,\n    clone,\n    update,\n  };\n}\n\ninterface Props {\n  children: ReactNode;\n  db: SharedData;\n}\n\nexport function SharedDataProvider({ children, db }: Props) {\n  return (\n    <SharedDataContext.Provider value={db}>\n      {children}\n    </SharedDataContext.Provider>\n  );\n}\n","/**\n * This contains the presentation components for the Board and the\n * tiles on the board.\n *\n * Tiles can exist in the following states:\n * - not yet guessed\n * - missed\n * - an \"unhit\" ship\n * - a \"hit\" ship\n *\n * There should be no game-logic in these components. How you manage that\n * is up to you.\n */\nimport { ReactNode, SyntheticEvent } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { blueGrey, red, teal } from \"@material-ui/core/colors\";\nimport ScrollContainer from \"react-indiana-drag-scroll\";\n\nexport type CellVariant = \"ship-hit\" | \"ship-unhit\" | \"miss\" | \"unknown\";\n\ninterface CellStyleProps {\n  variant: CellVariant;\n}\n\nconst useCellStyles = makeStyles({\n  root: {\n    display: \"block\",\n    // padding: \"0.5rem\",\n    background: (props: CellStyleProps) => {\n      switch (props.variant) {\n        case \"ship-unhit\": {\n          return teal[\"500\"];\n        }\n        case \"ship-hit\": {\n          return red[\"500\"];\n        }\n        case \"miss\": {\n          return blueGrey[\"50\"];\n        }\n        default: {\n          return \"transparent\";\n        }\n      }\n    },\n  },\n  image: {\n    display: \"block\",\n  },\n});\n\ninterface CellProps {\n  variant: CellVariant;\n  onClick?: (e: SyntheticEvent<HTMLLIElement>) => void;\n  children: ReactNode;\n}\n\nexport function Cell({ variant, onClick, children }: CellProps) {\n  const styles = useCellStyles({ variant });\n  return (\n    <li className={styles.root} onClick={onClick}>\n      {children}\n    </li>\n  );\n}\n\ninterface BoardStyleProps {\n  columns: number;\n}\n\nconst useBoardStyles = makeStyles({\n  root: {\n    display: \"grid\",\n    gridTemplateColumns: (props: BoardStyleProps) =>\n      `repeat(${props.columns}, max-content)`,\n    // gridGap: \"0.5rem\",\n    listStyle: \"none\",\n    padding: 0,\n  },\n});\n\ninterface BoardProps<DataType> {\n  columns: number;\n  items: DataType[];\n  renderCell: (data: DataType) => ReactNode;\n}\n\nexport function Board<DataType extends object>({\n  columns,\n  items,\n  renderCell,\n}: BoardProps<DataType>) {\n  const styles = useBoardStyles({ columns });\n  return (\n    <ol className={styles.root}>{items.map((item) => renderCell(item))}</ol>\n  );\n}\n\nconst useBoardContainerStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height: \"100vh\",\n    overflow: \"scroll\",\n  },\n});\n\ninterface BoardContainerProps {\n  children: ReactNode;\n}\n\nexport function BoardContainer({ children }: BoardContainerProps) {\n  const styles = useBoardContainerStyles();\n  return <ScrollContainer className={styles.root}>{children}</ScrollContainer>;\n}\n","import {\n  Paper,\n  TextField,\n  TextFieldProps,\n  Button,\n  makeStyles,\n  Grid,\n  MenuItem,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { useState, useEffect, useMemo, FormEvent } from \"react\";\nimport { useLocalState } from \"./LocalState\";\nimport { usePokeGetter } from \"./PokeGetterContext\";\nimport { Game, Pokedex, Pokemon } from \"./utils/pokeGetter\";\nimport { BoardContainer, Board, Cell } from \"./Board\";\nimport { useSharedData } from \"./sharedData\";\n\n// wrapper around the name field. Gives us a better interface\n\ntype NameFieldProps = Omit<TextFieldProps, \"onChange\" | \"value\"> & {\n  value?: string;\n  onChange?: (name: string) => void;\n};\n\nfunction NameField({ value, onChange, ...props }: NameFieldProps) {\n  const [name, setName] = useState<string>(value ?? \"\");\n\n  const handleChange: TextFieldProps[\"onChange\"] = (e) => {\n    const val = e.target.value;\n    setName(val);\n  };\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(name);\n    }\n  }, [name, onChange]);\n\n  return <TextField {...props} value={name} onChange={handleChange} />;\n}\n\n// wrapper around the columns field. Gives us a better interface\n\ntype ColumnsFieldProps = Omit<TextFieldProps, \"onChange\" | \"value\"> & {\n  value?: number;\n  onChange?: (columns: number) => void;\n};\n\nfunction ColumnsField({ value, onChange, ...props }: ColumnsFieldProps) {\n  const [cols, setCols] = useState<number>(value ?? 15);\n\n  const handleChange: TextFieldProps[\"onChange\"] = (e) => {\n    const val = e.target.value;\n    const num = Number(val);\n    if (isNaN(num)) {\n      throw Error(\"The value given is not a number\");\n    } else {\n      setCols(num);\n    }\n  };\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(cols);\n    }\n  }, [cols, onChange]);\n\n  return (\n    <TextField {...props} type=\"number\" value={cols} onChange={handleChange} />\n  );\n}\n\n// wrapper around the Game Select field. Gives us a better interface\n\ntype GameSelectProps = Omit<TextFieldProps, \"onChange\" | \"value\"> & {\n  getValue: (game: Game) => string; // this needs to return a unique value so it can be used as a lookup\n  getDisplayValue?: (game: Game) => string;\n  value?: Game | null;\n  onChange?: (game: Game | null) => void;\n};\n\nfunction GameSelect({\n  getValue,\n  getDisplayValue = getValue,\n  value = null,\n  onChange,\n  ...props\n}: GameSelectProps) {\n  const lookup = useMemo(() => new Map<string, Game>(), []);\n  const getter = usePokeGetter();\n\n  // construct the list of games\n  const [games, setGames] = useState<Game[]>([]);\n  useEffect(() => {\n    const listen = async () => {\n      const games = await getter.getAllGames();\n      setGames(games);\n    };\n    listen();\n  }, [getter]);\n\n  // when the game list changes, update the lookup table\n  useEffect(() => {\n    lookup.clear();\n    games.forEach((game) => {\n      lookup.set(getValue(game), game);\n    });\n  }, [games, lookup, getValue]);\n\n  // handle changes to the given value\n  const [game, setGame] = useState<Game | null>(value);\n  useEffect(() => {\n    if (onChange) {\n      onChange(game);\n    }\n  }, [game, onChange]);\n\n  const handleChange: TextFieldProps[\"onChange\"] = (e) => {\n    const lookupValue = e.target.value;\n    const value = lookup.get(lookupValue);\n    if (!value) {\n      throw Error(\"The given value is not in the lookup table\");\n    }\n    setGame(value);\n  };\n\n  const curValue = useMemo(\n    () => (game ? getValue(game) : \"\"),\n    [game, getValue]\n  );\n\n  // disable the select field until we have items to populate\n  // it with\n  if (games.length <= 0) {\n    return (\n      <TextField {...props} value=\"\" select disabled>\n        <MenuItem value=\"\">Select a Game...</MenuItem>\n      </TextField>\n    );\n  }\n\n  return (\n    <TextField {...props} value={curValue} onChange={handleChange} select>\n      {games.map((game) => (\n        <MenuItem key={getValue(game)} value={getValue(game)}>\n          {getDisplayValue(game)}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\ntype PokedexSelectProps = Omit<TextFieldProps, \"onChange\" | \"value\"> & {\n  forGame: Game | null;\n  getValue: (dex: Pokedex) => string; // this needs to return a unique value so it can be used as a lookup\n  getDisplayValue?: (dex: Pokedex) => string;\n  value?: Pokedex | null;\n  onChange?: (dex: Pokedex | null) => void;\n};\n\nfunction PokedexSelect({\n  forGame,\n  getValue,\n  getDisplayValue = getValue,\n  value = null,\n  onChange,\n  ...props\n}: PokedexSelectProps) {\n  const lookup = useMemo(() => new Map<string, Pokedex>(), []);\n  const getter = usePokeGetter();\n\n  // construct the list of pokedexes\n  const [dexes, setDexes] = useState<Pokedex[]>([]);\n  const [dex, setDex] = useState<Pokedex | null>(value);\n\n  useEffect(() => {\n    const listen = async () => {\n      setDexes([]);\n      setDex(null);\n      if (forGame) {\n        const dexes = await getter.getPokedexByGame(forGame);\n        setDexes(dexes);\n      }\n    };\n    listen();\n  }, [getter, forGame]);\n\n  // when the dex list changes, update the lookup table\n  useEffect(() => {\n    lookup.clear();\n    dexes.forEach((dex) => {\n      lookup.set(getValue(dex), dex);\n    });\n  }, [dexes, lookup, getValue]);\n\n  // handle changes to the given value\n  useEffect(() => {\n    if (onChange) {\n      onChange(dex);\n    }\n  }, [dex, onChange]);\n\n  const handleChange: TextFieldProps[\"onChange\"] = (e) => {\n    const lookupValue = e.target.value;\n    const value = lookup.get(lookupValue);\n    if (!value) {\n      throw Error(\"The given value is not in the lookup table\");\n    }\n    setDex(value);\n  };\n\n  const curValue = useMemo(() => (dex ? getValue(dex) : \"\"), [dex, getValue]);\n\n  // disable the select field until we have items to populate\n  // it with\n  if (dexes.length <= 0 || forGame === null) {\n    return (\n      <TextField {...props} value=\"\" select disabled>\n        <MenuItem value=\"\">Select a Game...</MenuItem>\n      </TextField>\n    );\n  }\n\n  return (\n    <TextField {...props} value={curValue} onChange={handleChange} select>\n      {dexes.map((dex) => (\n        <MenuItem key={getValue(dex)} value={getValue(dex)}>\n          {getDisplayValue(dex)}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n}\n\n// wrapper around the Board Preview\n\ninterface BoardPreviewProps {\n  forPokedex: Pokedex | null;\n  columns: number;\n}\nfunction BoardPreview({ forPokedex, columns }: BoardPreviewProps) {\n  const [pokemon, setPokemon] = useState<Pokemon[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const getter = usePokeGetter();\n\n  useEffect(() => {\n    const listen = async () => {\n      setPokemon([]);\n      if (forPokedex) {\n        setIsLoading(true);\n        const pokemon = await getter.getPokemonByPokedex(forPokedex);\n        setPokemon(pokemon);\n        setIsLoading(false);\n      }\n    };\n    listen();\n  }, [getter, forPokedex]);\n\n  if (isLoading) {\n    <CircularProgress />;\n  }\n\n  return (\n    <BoardContainer>\n      <Board\n        columns={columns}\n        items={pokemon}\n        renderCell={(item) => (\n          <Cell key={item.name} variant=\"unknown\">\n            <img\n              // className={styles.image}\n              style={{\n                pointerEvents: \"none\",\n              }}\n              src={item.artworkUrl}\n              alt={item.name}\n            />\n          </Cell>\n        )}\n      />\n    </BoardContainer>\n  );\n}\n\n/**\n * This is where we'll set up the board for an upcoming game.\n */\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"1rem\",\n    maxWidth: \"350px\",\n    margin: \"1rem\",\n    \"& form > *:not(:first-child)\": {\n      marginTop: \"1rem\",\n    },\n  },\n  image: {\n    pointerEvents: \"none\",\n  },\n});\n\n// container component for managing board state. Makes sure\n// PeerJS is initialized and manages state for the Board\n\ninterface BoardConfig {\n  name: string;\n  columns: number;\n  game: Game;\n  pokedex: Pokedex;\n}\n\ninterface BoardSetupProps {\n  onSubmit?: (config: BoardConfig) => void;\n}\n\nexport function BoardSetupPage({ onSubmit }: BoardSetupProps) {\n  const styles = useStyles();\n\n  const { state: localState } = useLocalState();\n  const { state: sharedState } = useSharedData();\n\n  const defaultName = localState.user ? `${localState.user.name}'s board` : \"\";\n  const [name, setName] = useState<string>(defaultName);\n  const [cols, setCols] = useState<number>(sharedState.board.columns);\n  const [game, setGame] = useState<Game | null>(sharedState.board.game);\n  const [dex, setDex] = useState<Pokedex | null>(sharedState.board.pokedex);\n\n  const handleNameChange = (name: string) => {\n    setName(name);\n  };\n\n  const handleColumnChange = (cols: number) => {\n    setCols(cols);\n  };\n\n  const handleGameChange = (game: Game | null) => {\n    setGame(game);\n  };\n\n  const handlePokedexChange = (dex: Pokedex | null) => {\n    setDex(dex);\n  };\n\n  const canSubmit = useMemo(\n    () => name && cols && game && dex,\n    [name, cols, game, dex]\n  );\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (name && cols && game && dex && onSubmit) {\n      const config: BoardConfig = {\n        name,\n        columns: cols,\n        game,\n        pokedex: dex,\n      };\n      onSubmit(config);\n    }\n  };\n\n  // fetch state\n  return (\n    <Grid container>\n      <Grid container item xs={2}>\n        <Paper className={styles.root}>\n          <form onSubmit={handleSubmit}>\n            <NameField\n              fullWidth\n              label=\"Board Name\"\n              onChange={handleNameChange}\n              value={name}\n            />\n            <ColumnsField\n              fullWidth\n              label=\"Columns\"\n              value={cols}\n              onChange={handleColumnChange}\n            />\n            <GameSelect\n              fullWidth\n              label=\"Game\"\n              getValue={(game) => game.id}\n              getDisplayValue={(game) => game.name}\n              value={game}\n              onChange={handleGameChange}\n            />\n            <PokedexSelect\n              fullWidth\n              label=\"PokeDex\"\n              forGame={game}\n              getValue={(dex) => dex.id}\n              getDisplayValue={(dex) => dex.name}\n              value={dex}\n              onChange={handlePokedexChange}\n            />\n            <Button type=\"submit\" fullWidth disabled={!canSubmit}>\n              Get Started!\n            </Button>\n          </form>\n        </Paper>\n      </Grid>\n      <Grid container item xs={10}>\n        <BoardPreview columns={cols} forPokedex={dex} />\n      </Grid>\n    </Grid>\n  );\n}\n","/**\n * This is the landing page for the application. This is where the\n * user sets their username and launches their instance. I'm modeling\n * it basically on the landing screen for https://skribbl.io/ since\n * I think it does a really good job!\n */\n\nimport { ComponentProps } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useLocalState } from \"./LocalState\";\nimport { usePeerJS } from \"./PeerJSContext\";\nimport { CreateUser } from \"./CreateUserPage\";\nimport { useSharedData, creators } from \"./sharedData\";\nimport { BoardSetupPage } from \"./BoardSetupPage\";\n\nexport function LandingPage() {\n  const { state } = useLocalState();\n  const peer = usePeerJS();\n  const { update } = useSharedData();\n  const history = useHistory();\n\n  const handleCreateUserSubmit = ({ name }: { name: string }) => {\n    const player = {\n      name,\n      id: peer.id,\n    };\n    update(creators.users.joinWaiting(player));\n  };\n\n  const handleBoardSetupSubmit: ComponentProps<\n    typeof BoardSetupPage\n  >[\"onSubmit\"] = ({ name, columns, game, pokedex }) => {\n    update(creators.board.setBoardName(name));\n    update(creators.board.setBoardColumns(columns));\n    update(creators.board.setBoardGame(game));\n    update(creators.board.setBoardPokedex(pokedex));\n    history.push(`/${peer.id}`);\n  };\n\n  if (state.user) {\n    return <BoardSetupPage onSubmit={handleBoardSetupSubmit} />;\n  }\n  return <CreateUser onSubmit={handleCreateUserSubmit} />;\n}\n","import {\n  Box,\n  Container,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  makeStyles,\n  Grid,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useLocalState } from \"./LocalState\";\nimport { CreateUser } from \"./CreateUserPage\";\nimport { usePeerJS } from \"./PeerJSContext\";\nimport { useSharedData, creators } from \"./sharedData\";\n\n/**\n * The lobby page where the user can join a page\n */\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(4),\n    \"& > *:not(:first-child)\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginLeft: theme.spacing(4),\n  },\n  cardGrid: {\n    marginTop: theme.spacing(2),\n  },\n  card: {\n    width: \"100%\",\n  },\n}));\n\nfunction JoinPage() {\n  const styles = useStyles();\n  const { state } = useSharedData();\n\n  return (\n    <Container className={styles.root}>\n      {/* Section for adding Players */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Players\n          </Typography>\n          <Button\n            className={styles.button}\n            color=\"primary\"\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n          >\n            Join\n          </Button>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          <Grid container item xs={2}>\n            <Card className={styles.card}>\n              <CardContent>Testing...</CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n      {/*\n       * Section for people hanging out. This is to ensure we're\n       * connecting through PeerJS\n       */}\n      <Box component=\"section\">\n        <Box display=\"flex\">\n          <Typography variant=\"h3\" component=\"h1\">\n            Hanging Out\n          </Typography>\n        </Box>\n        <Grid className={styles.cardGrid} container>\n          {state.users.waiting.map((player) => (\n            // This is a bad key. Store better info in the User\n            <Grid key={player.id} container item xs={2}>\n              <Card className={styles.card}>\n                <CardContent>{player.name}</CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n      {/* Ready Button */}\n      <Box>\n        <Button fullWidth variant=\"contained\" color=\"primary\">\n          Start Game\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n\nexport function LobbyPage() {\n  const [isReady, setIsReady] = useState<boolean>(false);\n\n  const peer = usePeerJS();\n  const { clone, update } = useSharedData();\n  const { state } = useLocalState();\n  const { peer_id } = useParams<{ peer_id: string }>();\n\n  useEffect(() => {\n    async function listen() {\n      if (peer.id !== peer_id) {\n        await clone(peer_id);\n      }\n      setIsReady(true);\n    }\n    listen();\n    return () => setIsReady(false);\n  }, [peer_id, peer.id, clone]);\n\n  const handleSubmit = ({ name }: { name: string }) => {\n    const player = {\n      name,\n      id: peer.id,\n    };\n    update(creators.users.joinWaiting(player));\n  };\n\n  if (!isReady) {\n    return <CircularProgress />;\n  } else if (!state.user) {\n    return <CreateUser onSubmit={handleSubmit} />;\n  }\n  return <JoinPage />;\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  useHistory,\n} from \"react-router-dom\";\nimport {\n  Toolbar,\n  AppBar,\n  IconButton,\n  Box,\n  CircularProgress,\n} from \"@material-ui/core\";\nimport { Home } from \"@material-ui/icons\";\nimport { LocalStateProvider, LocalStateContext } from \"./LocalState\";\nimport { PokeGetterProvider } from \"./PokeGetterContext\";\nimport { LandingPage } from \"./LandingPage\";\nimport { LobbyPage } from \"./LobbyPage\";\nimport { PeerJSProvider, initializePeerJS } from \"./PeerJSContext\";\nimport { useContext, useState, useEffect } from \"react\";\nimport PeerJS from \"peerjs\";\nimport {\n  SharedData,\n  initializeSharedData,\n  SharedDataProvider,\n} from \"./sharedData\";\n\nfunction Debug() {\n  const { dispatch } = useContext(LocalStateContext);\n  const history = useHistory();\n\n  const handleClear = () => {\n    dispatch({ type: \"clear\" });\n    history.push(\"/\");\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton onClick={handleClear}>\n          <Home />\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction App() {\n  const [peer, setPeer] = useState<PeerJS | null>(null);\n  const [sharedData, setSharedData] = useState<SharedData | null>(null);\n  const [err, setErr] = useState<Error | null>(null);\n\n  // initialize PeerJS\n  useEffect(() => {\n    const listen = async () => {\n      try {\n        const p = await initializePeerJS();\n        setPeer(p);\n      } catch (e) {\n        setErr(e);\n      }\n    };\n    listen();\n  }, []);\n\n  // initialize shared data\n  useEffect(() => {\n    if (!peer) {\n      return;\n    }\n    const listen = async () => {\n      try {\n        const db = initializeSharedData(peer);\n        setSharedData(db);\n      } catch (e) {\n        setErr(e);\n      }\n    };\n    listen();\n  }, [peer]);\n\n  if (peer && sharedData) {\n    return (\n      <PeerJSProvider peer={peer}>\n        <PokeGetterProvider lang=\"en\">\n          <SharedDataProvider db={sharedData}>\n            <LocalStateProvider>\n              <Box>\n                {/**\n                 * @TODO - instead of hard-coding this, it might be better\n                 * to do some fancy logic to determine what the base-url\n                 * actually is. This way, localhost:3000/ and reccanti.github.io/ss-anne\n                 * would both work\n                 *\n                 * ~reccanti 6/22/2021\n                 */}\n                <Router basename=\"/ss-anne/\">\n                  <Debug />\n                  <Switch>\n                    <Route exact path=\"/\">\n                      <LandingPage />\n                    </Route>\n                    <Route exact path=\"/:peer_id\">\n                      <LobbyPage />\n                    </Route>\n                  </Switch>\n                </Router>\n              </Box>\n            </LocalStateProvider>\n          </SharedDataProvider>\n        </PokeGetterProvider>\n      </PeerJSProvider>\n    );\n  } else if (err) {\n    return <>{err.message}</>;\n  } else {\n    return <CircularProgress />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, StylesProvider } from \"@material-ui/core\";\n\n// interface State {\n//   [name: string]: number;\n// }\n\n// interface BaseAction {\n//   type: string;\n// }\n\n// interface AddPerson extends BaseAction {\n//   type: \"addPerson\";\n//   payload: {\n//     name: string;\n//     age: number;\n//   };\n// }\n\n// interface RemovePerson extends BaseAction {\n//   type: \"removePerson\";\n//   payload: {\n//     name: string;\n//   };\n// }\n\n// interface EditAge extends BaseAction {\n//   type: \"editAge\";\n//   payload: {\n//     name: string;\n//     age: number;\n//   };\n// }\n\n// type Action = AddPerson | RemovePerson | EditAge;\n\n// function reducer(state: State, action: Action): State {\n//   switch (action.type) {\n//     case \"addPerson\": {\n//       return {\n//         ...state,\n//         [action.payload.name]: action.payload.age,\n//       };\n//     }\n//     case \"removePerson\": {\n//       const newState = { ...state };\n//       delete newState[action.payload.name];\n//       return newState;\n//     }\n//     case \"editAge\": {\n//       return {\n//         ...state,\n//         [action.payload.name]: action.payload.age,\n//       };\n//     }\n//   }\n//   return state;\n// }\n\n// // @ts-ignore\n// window.coolDB = new WebRTCDatabase<State, Action>({}, reducer);\n// // @ts-ignore\n// window.coolDB.registerOnChange((state) => {\n//   console.log(\"state changed\");\n//   console.log(state);\n// });\n\n// // @ts-ignore\n// window.addPerson = (name: string, age: number) => {\n//   // @ts-ignore\n//   window.coolDB.update({\n//     type: \"addPerson\",\n//     payload: {\n//       name,\n//       age,\n//     },\n//   });\n// };\n\n// // @ts-ignore\n// window.setupDB = () => {\n//   // @ts-ignore\n//   window.addPerson(\"Melissa\", 90);\n//   // @ts-ignore\n//   window.addPerson(\"Hasan\", 32);\n//   // @ts-ignore\n//   window.addPerson(\"Kartik\", 80);\n//   // @ts-ignore\n//   console.log(coolDB.id);\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <StylesProvider>\n      <CssBaseline />\n      <App />\n    </StylesProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}